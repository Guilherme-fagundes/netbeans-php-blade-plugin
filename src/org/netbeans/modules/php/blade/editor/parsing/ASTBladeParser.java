
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Dec 18 08:40:03 EET 2021
//----------------------------------------------------

package org.netbeans.modules.php.blade.editor.parsing;

import java.util.*;
import org.netbeans.modules.csl.api.OffsetRange;
import org.openide.util.Pair;
import org.netbeans.modules.php.blade.editor.parsing.astnodes.*;
import org.netbeans.modules.php.editor.parser.ParserErrorHandler;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Dec 18 08:40:03 EET 2021
  */
public class ASTBladeParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ASTBladeParser() {super();}

  /** Constructor which sets the default scanner. */
  public ASTBladeParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ASTBladeParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\003\003\000\002\002\004\000\002\004" +
    "\004\000\002\004\002\000\002\007\004\000\002\007\002" +
    "\000\002\005\003\000\002\006\004\000\002\006\003\000" +
    "\002\006\010\000\002\006\006\000\002\006\010\000\002" +
    "\006\006\000\002\006\006\000\002\006\006\000\002\006" +
    "\006\000\002\006\010\000\002\006\006\000\002\006\004" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\005\000\002\006\003\000\002\002" +
    "\003\000\002\002\003\000\002\015\005\000\002\015\003" +
    "\000\002\016\003\000\002\016\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\005\000\002\013\005\000\002" +
    "\013\003\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\046\002\ufffe\003\ufffe\004\ufffe\005\ufffe\006" +
    "\ufffe\007\ufffe\011\ufffe\012\ufffe\013\ufffe\016\ufffe\017\ufffe" +
    "\020\ufffe\022\ufffe\024\ufffe\025\ufffe\027\ufffe\036\ufffe\114" +
    "\ufffe\001\002\000\004\002\113\001\002\000\046\002\001" +
    "\003\024\004\012\005\014\006\027\007\011\011\020\012" +
    "\026\013\015\016\013\017\023\020\017\022\030\024\006" +
    "\025\022\027\010\036\025\114\016\001\002\000\004\032" +
    "\110\001\002\000\060\002\ufffb\003\ufffb\004\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb" +
    "\024\ufffb\025\ufffb\026\ufffb\027\ufffb\036\ufffb\114\ufffb\001" +
    "\002\000\062\002\uffee\003\uffee\004\uffee\005\uffee\006\uffee" +
    "\007\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee" +
    "\025\uffee\026\uffee\027\uffee\036\uffee\114\uffee\126\102\001" +
    "\002\000\004\031\100\001\002\000\060\002\uffed\003\uffed" +
    "\004\uffed\005\uffed\006\uffed\007\uffed\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\036" +
    "\uffed\114\uffed\001\002\000\006\003\071\126\072\001\002" +
    "\000\060\002\uffec\003\uffec\004\uffec\005\uffec\006\uffec\007" +
    "\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025" +
    "\uffec\026\uffec\027\uffec\036\uffec\114\uffec\001\002\000\006" +
    "\003\053\126\054\001\002\000\060\002\uffe9\003\uffe9\004" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\011\uffe9\012\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\036\uffe9" +
    "\114\uffe9\001\002\000\004\030\050\001\002\000\060\002" +
    "\uffeb\003\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\036\uffeb\114\uffeb\001\002\000\046\002\uffff\003" +
    "\uffff\004\uffff\005\uffff\006\uffff\007\uffff\011\uffff\012\uffff" +
    "\013\uffff\016\uffff\017\uffff\020\uffff\022\uffff\024\uffff\025" +
    "\uffff\027\uffff\036\uffff\114\uffff\001\002\000\004\032\047" +
    "\001\002\000\060\002\ufff9\003\ufff9\004\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024" +
    "\ufff9\025\ufff9\026\ufff9\027\ufff9\036\ufff9\114\ufff9\001\002" +
    "\000\060\002\uffe6\003\uffe6\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\036\uffe6\114\uffe6\001\002\000\060" +
    "\002\uffea\003\uffea\004\uffea\005\uffea\006\uffea\007\uffea\011" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026" +
    "\uffea\027\uffea\036\uffea\114\uffea\001\002\000\004\126\035" +
    "\001\002\000\060\002\uffe8\003\uffe8\004\uffe8\005\uffe8\006" +
    "\uffe8\007\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\036\uffe8\114\uffe8\001\002" +
    "\000\004\030\031\001\002\000\046\003\ufffc\004\ufffc\005" +
    "\ufffc\006\ufffc\007\ufffc\011\ufffc\012\ufffc\013\ufffc\016\ufffc" +
    "\017\ufffc\020\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\027" +
    "\ufffc\036\ufffc\114\ufffc\001\002\000\046\003\024\004\012" +
    "\005\014\006\027\007\011\011\020\012\026\013\015\016" +
    "\013\017\023\020\017\022\030\023\034\024\006\025\022" +
    "\027\010\036\025\114\016\001\002\000\056\003\ufffd\004" +
    "\ufffd\005\ufffd\006\ufffd\007\ufffd\011\ufffd\012\ufffd\013\ufffd" +
    "\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022" +
    "\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\036\ufffd" +
    "\114\ufffd\001\002\000\060\002\ufff3\003\ufff3\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023" +
    "\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\036\ufff3\114\ufff3" +
    "\001\002\000\006\036\040\040\037\001\002\000\010\046" +
    "\043\114\042\127\041\001\002\000\010\046\uffdf\114\uffdf" +
    "\127\uffdf\001\002\000\010\046\uffde\114\uffde\127\uffde\001" +
    "\002\000\060\002\ufff7\003\ufff7\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\027\ufff7\036\ufff7\114\ufff7\001\002\000" +
    "\006\036\040\040\037\001\002\000\006\036\040\040\037" +
    "\001\002\000\006\114\042\127\045\001\002\000\060\002" +
    "\ufff6\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\011\ufff6" +
    "\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020" +
    "\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\036\ufff6\114\ufff6\001\002\000\010\046\uffdd\114" +
    "\uffdd\127\uffdd\001\002\000\060\002\uffef\003\uffef\004\uffef" +
    "\005\uffef\006\uffef\007\uffef\011\uffef\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef" +
    "\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\036\uffef\114" +
    "\uffef\001\002\000\046\003\ufffc\004\ufffc\005\ufffc\006\ufffc" +
    "\007\ufffc\011\ufffc\012\ufffc\013\ufffc\016\ufffc\017\ufffc\020" +
    "\ufffc\021\ufffc\022\ufffc\024\ufffc\025\ufffc\027\ufffc\036\ufffc" +
    "\114\ufffc\001\002\000\046\003\024\004\012\005\014\006" +
    "\027\007\011\011\020\012\026\013\015\016\013\017\023" +
    "\020\017\021\052\022\030\024\006\025\022\027\010\036" +
    "\025\114\016\001\002\000\060\002\ufff4\003\ufff4\004\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\011\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\036\ufff4\114" +
    "\ufff4\001\002\000\050\003\uffe2\004\uffe2\005\uffe2\006\uffe2" +
    "\007\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\022\uffe2\024\uffe2\025\uffe2\027\uffe2" +
    "\036\uffe2\114\uffe2\001\002\000\006\003\062\036\063\001" +
    "\002\000\050\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017" +
    "\ufffc\020\ufffc\022\ufffc\024\ufffc\025\ufffc\027\ufffc\036\ufffc" +
    "\114\ufffc\001\002\000\050\003\024\004\012\005\014\006" +
    "\027\007\011\011\020\012\026\013\015\014\061\015\057" +
    "\016\013\017\023\020\017\022\030\024\006\025\022\027" +
    "\010\036\025\114\016\001\002\000\060\002\uffe4\003\uffe4" +
    "\004\uffe4\005\uffe4\006\uffe4\007\uffe4\011\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\036" +
    "\uffe4\114\uffe4\001\002\000\060\002\ufff5\003\ufff5\004\ufff5" +
    "\005\ufff5\006\ufff5\007\ufff5\011\ufff5\012\ufff5\013\ufff5\014" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\036\ufff5\114" +
    "\ufff5\001\002\000\060\002\uffe5\003\uffe5\004\uffe5\005\uffe5" +
    "\006\uffe5\007\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\027\uffe5\036\uffe5\114\uffe5\001" +
    "\002\000\006\046\uffe0\127\uffe0\001\002\000\006\046\uffe1" +
    "\127\uffe1\001\002\000\006\046\066\127\065\001\002\000" +
    "\050\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\022\uffe3\024\uffe3\025\uffe3\027\uffe3\036\uffe3\114\uffe3" +
    "\001\002\000\006\036\040\040\037\001\002\000\006\114" +
    "\042\127\070\001\002\000\060\002\ufff8\003\ufff8\004\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\011\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\036\ufff8\114" +
    "\ufff8\001\002\000\060\002\uffdb\003\uffdb\004\uffdb\005\uffdb" +
    "\006\uffdb\007\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\027\uffdb\036\uffdb\114\uffdb\001" +
    "\002\000\006\003\074\036\075\001\002\000\060\002\ufffa" +
    "\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027" +
    "\ufffa\036\ufffa\114\ufffa\001\002\000\004\127\uffd9\001\002" +
    "\000\004\127\uffda\001\002\000\004\127\077\001\002\000" +
    "\060\002\uffdc\003\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\027\uffdc\036\uffdc\114\uffdc\001\002\000\004\010" +
    "\101\001\002\000\060\002\uffe7\003\uffe7\004\uffe7\005\uffe7" +
    "\006\uffe7\007\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\027\uffe7\036\uffe7\114\uffe7\001" +
    "\002\000\006\036\040\040\037\001\002\000\010\046\105" +
    "\114\042\127\104\001\002\000\060\002\ufff0\003\ufff0\004" +
    "\ufff0\005\ufff0\006\ufff0\007\ufff0\011\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\036\ufff0" +
    "\114\ufff0\001\002\000\006\036\040\040\037\001\002\000" +
    "\006\114\042\127\107\001\002\000\060\002\ufff1\003\ufff1" +
    "\004\ufff1\005\ufff1\006\ufff1\007\ufff1\011\ufff1\012\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1" +
    "\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\036" +
    "\ufff1\114\ufff1\001\002\000\046\003\ufffc\004\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\011\ufffc\012\ufffc\013\ufffc\016\ufffc\017" +
    "\ufffc\020\ufffc\022\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc" +
    "\036\ufffc\114\ufffc\001\002\000\046\003\024\004\012\005" +
    "\014\006\027\007\011\011\020\012\026\013\015\016\013" +
    "\017\023\020\017\022\030\024\006\025\022\026\112\027" +
    "\010\036\025\114\016\001\002\000\060\002\ufff2\003\ufff2" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\036" +
    "\ufff2\114\ufff2\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\006\003\003\004\004\001\001\000\002\001" +
    "\001\000\006\005\020\006\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\072\001\001\000\002\001\001" +
    "\000\004\015\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\031\001\001\000\006\005\032\006\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\045\001\001\000\004\020\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\050\001\001\000\006" +
    "\005\032\006\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\063\001\001\000\004\007\055\001\001" +
    "\000\010\002\057\005\032\006\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\110\001\001\000\006\005\032\006\006" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ASTBladeParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ASTBladeParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ASTBladeParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ErrorStrategy defaultStrategy = new DefaultErrorStrategy();;
    private ErrorStrategy errorStrategy = defaultStrategy;

    private String fileName = null;
    private ParserErrorHandler errorHandler = null;

    public void setErrorHandler (ParserErrorHandler handler) {
        this.errorHandler = handler;
    }

    public ParserErrorHandler getErrorHandler () {
        return this.errorHandler;
    }

    public String getFileName() {
        return fileName;
    }

    public void setFileName(String fileName) {
        assert fileName != null;
        this.fileName = fileName;
    }


    interface ErrorStrategy {
        public boolean errorRecovery(boolean debug) throws Exception;
    }

    class DefaultErrorStrategy implements ErrorStrategy {

        public boolean errorRecovery(boolean debug) throws Exception {
            return ASTBladeParser.super.error_recovery(debug);
        }
    }

    /**
     * Attempt to recover from a syntax error.  This returns false if recovery fails,
     * true if it succeeds.
     * @param debug should we produce debugging messages as we parse.
     */
    protected boolean error_recovery(boolean debug) throws java.lang.Exception {
        return errorStrategy.errorRecovery(debug);
    }

    /**
     * Report a non fatal error (or warning).  This method takes a message
     * string and an additional object (to be used by specializations implemented in subclasses).
     * The super class prints the message to System.err.
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_error(String message, Object info) {
        System.out.print("report_eror"  + message);
    }

    /**
     * This method is called when a syntax error has been detected and recovery is about to be invoked.
     * The super class just emit a "Syntax error" error message.
     * @param cur_token the current lookahead Symbol.
     */
    public void syntax_error(java_cup.runtime.Symbol cur_token) {
        java_cup.runtime.Symbol symbol = (java_cup.runtime.Symbol)stack.peek();
        int state = symbol.parse_state;
        short[] rowOfProbe = action_tab[state];
        if (errorHandler != null) {
            errorHandler.handleError(ParserErrorHandler.Type.SYNTAX_ERROR, rowOfProbe, cur_token, symbol);
        }
     }

    /**
     * Report a fatal error.  This method takes a message string and an additional object
     * (to be used by specializations implemented in subclasses).
     * The super class reports the error then throws an exception.
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_fatal_error(String message, Object info) throws Exception {
        if (errorHandler != null) {
            errorHandler.handleError(ParserErrorHandler.Type.FATAL_PARSER_ERROR, null, cur_token, null);
        }
    }

    protected int error_sync_size() {
        return 1;
    }

}

