/* The following code was generated by JFlex 1.4.3 on 2/20/23, 8:52 PM */


package org.netbeans.modules.php.blade.editor.parsing;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.netbeans.modules.php.blade.editor.BladeSyntax;
import org.netbeans.modules.php.editor.parser.PHPParseResult;
import org.netbeans.modules.php.blade.editor.common.ByteStack;
import org.openide.filesystems.FileObject;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP2", "UUF_UNUSED_FIELD"})


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/20/23, 8:52 PM from the specification file
 * <tt>C:/LOCAL_P5_APPS/lmc/blade-php/tools/ASTBladeScanner.flex</tt>
 */
public class ASTBladeScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_BLADE_PARAMETER_EXPRESSION = 34;
  public static final int ST_PHP = 26;
  public static final int ST_DOCBLOCK = 14;
  public static final int ST_ARRAY_ARG = 46;
  public static final int ST_BLADE_ECHO = 30;
  public static final int ST_LOOKING_FOR_LABEL = 4;
  public static final int ST_HTML_COMMENT = 44;
  public static final int ST_PHP_LOOP_EXPRESSION = 16;
  public static final int ST_BLADE_ECHO_ESCAPED = 32;
  public static final int ST_COMMENT = 28;
  public static final int ST_ARGUMENT_EXPRESSION_LIST = 40;
  public static final int ST_DIRECTIVE_ARGUMENT = 38;
  public static final int ST_BLADE_DIRECTIVE = 8;
  public static final int ST_LOOK_FOR_DIRECTIVE_ARGUMENTS = 36;
  public static final int ST_BLADE_INCLUDE_ARGS = 20;
  public static final int ST_LOOKING_FOR_INCLUDED_VARS = 6;
  public static final int ST_STRING_DBQUOTE = 10;
  public static final int ST_BLADE_PARAMETER = 22;
  public static final int ST_ARGUMENT_LIST = 42;
  public static final int ST_STRING_SQUOTE = 12;
  public static final int ST_LOOKING_FOR_PATH = 2;
  public static final int YYINITIAL = 0;
  public static final int ST_INLINE_PHP = 24;
  public static final int ST_PHP_CONDITION_EXPRESSION = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6, 
     7,  7,  8,  8,  9,  9, 10, 10,  6,  6, 11, 11, 12, 12, 13, 13, 
    14, 14, 15, 15, 16, 16,  6,  6, 17, 17, 18, 18, 19, 19, 20, 20
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\5\1\0\1\7\1\4\22\0\1\41\1\16\1\61"+
    "\1\45\1\62\1\64\1\44\1\42\1\54\1\55\2\0\1\57\1\17"+
    "\1\3\1\12\12\1\1\0\1\6\1\63\1\67\1\65\1\66\1\20"+
    "\1\25\1\35\1\46\1\23\1\22\1\37\1\13\1\50\1\24\1\13"+
    "\1\36\1\26\1\21\1\33\1\47\1\34\1\13\1\30\1\40\1\31"+
    "\1\53\1\51\1\32\1\52\1\27\1\13\1\56\1\0\1\60\1\0"+
    "\1\2\1\0\1\25\1\35\1\46\1\43\1\22\1\37\1\13\1\50"+
    "\1\24\1\13\1\36\1\26\1\21\1\33\1\47\1\34\1\13\1\30"+
    "\1\40\1\31\1\53\1\51\1\32\1\52\1\27\1\13\1\14\1\44"+
    "\1\15\1\0\53\10\1\10\12\10\1\10\4\10\1\10\5\10\27\10"+
    "\1\10\37\10\1\10\10\10\u01c2\10\4\0\14\10\16\0\5\10\7\0"+
    "\1\10\1\0\1\10\201\0\5\10\1\0\2\10\2\0\4\10\1\0"+
    "\1\10\6\0\1\10\1\0\3\10\1\0\1\10\1\0\24\10\1\0"+
    "\123\10\1\0\213\10\10\0\246\10\1\0\46\10\2\0\1\10\6\0"+
    "\51\10\107\0\33\10\4\0\4\10\55\0\53\10\25\0\12\11\4\0"+
    "\2\10\1\0\143\10\1\0\1\10\17\0\2\10\7\0\2\10\12\11"+
    "\3\10\2\0\1\10\20\0\1\10\1\0\36\10\35\0\131\10\13\0"+
    "\1\10\16\0\12\11\41\10\11\0\2\10\4\0\1\10\5\0\26\10"+
    "\4\0\1\10\11\0\1\10\3\0\1\10\27\0\31\10\7\0\13\10"+
    "\65\0\25\10\1\0\22\10\74\0\66\10\3\0\1\10\22\0\1\10"+
    "\7\0\12\10\4\0\12\11\1\0\20\10\4\0\10\10\2\0\2\10"+
    "\2\0\26\10\1\0\7\10\1\0\1\10\3\0\4\10\3\0\1\10"+
    "\20\0\1\10\15\0\2\10\1\0\3\10\4\0\12\11\2\10\12\0"+
    "\1\10\10\0\6\10\4\0\2\10\2\0\26\10\1\0\7\10\1\0"+
    "\2\10\1\0\2\10\1\0\2\10\37\0\4\10\1\0\1\10\7\0"+
    "\12\11\2\0\3\10\20\0\11\10\1\0\3\10\1\0\26\10\1\0"+
    "\7\10\1\0\2\10\1\0\5\10\3\0\1\10\22\0\1\10\17\0"+
    "\2\10\4\0\12\11\11\0\1\10\13\0\10\10\2\0\2\10\2\0"+
    "\26\10\1\0\7\10\1\0\2\10\1\0\5\10\3\0\1\10\36\0"+
    "\2\10\1\0\3\10\4\0\12\11\1\0\1\10\21\0\1\10\1\0"+
    "\6\10\3\0\3\10\1\0\4\10\3\0\2\10\1\0\1\10\1\0"+
    "\2\10\3\0\2\10\3\0\3\10\3\0\14\10\26\0\1\10\25\0"+
    "\12\11\25\0\10\10\1\0\3\10\1\0\27\10\1\0\20\10\3\0"+
    "\1\10\32\0\3\10\5\0\2\10\4\0\12\11\20\0\1\10\4\0"+
    "\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0\5\10\3\0"+
    "\1\10\40\0\1\10\1\0\2\10\4\0\12\11\1\0\2\10\21\0"+
    "\11\10\1\0\3\10\1\0\51\10\2\0\1\10\20\0\1\10\5\0"+
    "\3\10\10\0\3\10\4\0\12\11\12\0\6\10\5\0\22\10\3\0"+
    "\30\10\1\0\11\10\1\0\1\10\2\0\7\10\37\0\12\11\21\0"+
    "\60\10\1\0\2\10\14\0\7\10\11\0\12\11\47\0\2\10\1\0"+
    "\1\10\1\0\5\10\1\0\30\10\1\0\1\10\1\0\12\10\1\0"+
    "\2\10\11\0\1\10\2\0\5\10\1\0\1\10\11\0\12\11\2\0"+
    "\4\10\40\0\1\10\37\0\12\11\26\0\10\10\1\0\44\10\33\0"+
    "\5\10\163\0\53\10\24\0\1\10\12\11\6\0\6\10\4\0\4\10"+
    "\3\0\1\10\3\0\2\10\7\0\3\10\4\0\15\10\14\0\1\10"+
    "\1\0\12\11\6\0\46\10\1\0\1\10\5\0\1\10\2\0\53\10"+
    "\1\0\u014d\10\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10"+
    "\2\0\51\10\1\0\4\10\2\0\41\10\1\0\4\10\2\0\7\10"+
    "\1\0\1\10\1\0\4\10\2\0\17\10\1\0\71\10\1\0\4\10"+
    "\2\0\103\10\45\0\20\10\20\0\126\10\2\0\6\10\3\0\u026c\10"+
    "\2\0\21\10\1\0\32\10\5\0\113\10\6\0\10\10\7\0\15\10"+
    "\1\0\4\10\16\0\22\10\16\0\22\10\16\0\15\10\1\0\3\10"+
    "\17\0\64\10\43\0\1\10\4\0\1\10\3\0\12\11\46\0\12\11"+
    "\6\0\131\10\7\0\5\10\2\0\42\10\1\0\1\10\5\0\106\10"+
    "\12\0\37\10\47\0\12\11\36\10\2\0\5\10\13\0\54\10\4\0"+
    "\32\10\6\0\12\11\46\0\27\10\11\0\65\10\53\0\12\11\6\0"+
    "\12\11\15\0\1\10\135\0\57\10\21\0\7\10\4\0\12\11\51\0"+
    "\36\10\15\0\2\10\12\11\54\10\32\0\44\10\34\0\12\11\3\0"+
    "\3\10\12\11\44\10\2\0\11\10\7\0\53\10\2\0\3\10\51\0"+
    "\4\10\1\0\6\10\1\0\2\10\3\0\1\10\5\0\300\10\100\0"+
    "\u0116\10\2\0\6\10\2\0\46\10\2\0\6\10\2\0\10\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\37\10\2\0\65\10\1\0"+
    "\7\10\1\0\1\10\3\0\3\10\1\0\7\10\3\0\4\10\2\0"+
    "\6\10\4\0\15\10\5\0\3\10\1\0\7\10\164\0\1\10\15\0"+
    "\1\10\20\0\15\10\145\0\1\10\4\0\1\10\2\0\12\10\1\0"+
    "\1\10\3\0\5\10\6\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\4\10\1\0\13\10\2\0\4\10\5\0\5\10\4\0\1\10\64\0"+
    "\2\10\u0a7b\0\57\10\1\0\57\10\1\0\205\10\6\0\4\10\3\0"+
    "\2\10\14\0\46\10\1\0\1\10\5\0\1\10\2\0\70\10\7\0"+
    "\1\10\20\0\27\10\11\0\7\10\1\0\7\10\1\0\7\10\1\0"+
    "\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\120\0"+
    "\1\10\u01d5\0\2\10\52\0\5\10\5\0\2\10\4\0\126\10\6\0"+
    "\3\10\1\0\132\10\1\0\4\10\5\0\53\10\1\0\136\10\21\0"+
    "\40\10\60\0\20\10\u0200\0\u19c0\10\100\0\u51fd\10\3\0\u048d\10\103\0"+
    "\56\10\2\0\u010d\10\3\0\20\10\12\11\2\10\24\0\57\10\20\0"+
    "\37\10\2\0\106\10\61\0\11\10\2\0\147\10\2\0\65\10\2\0"+
    "\11\10\52\0\15\10\1\0\3\10\1\0\4\10\1\0\27\10\35\0"+
    "\64\10\16\0\62\10\34\0\12\11\30\0\6\10\3\0\1\10\1\0"+
    "\2\10\1\0\12\11\34\10\12\0\27\10\31\0\35\10\7\0\57\10"+
    "\34\0\1\10\12\11\6\0\5\10\1\0\12\10\12\11\5\10\1\0"+
    "\51\10\27\0\3\10\1\0\10\10\4\0\12\11\6\0\27\10\3\0"+
    "\1\10\3\0\62\10\1\0\1\10\3\0\2\10\2\0\5\10\2\0"+
    "\1\10\1\0\1\10\30\0\3\10\2\0\13\10\7\0\3\10\14\0"+
    "\6\10\2\0\6\10\2\0\6\10\11\0\7\10\1\0\7\10\1\0"+
    "\53\10\1\0\16\10\6\0\163\10\15\0\12\11\6\0\u2ba4\10\14\0"+
    "\27\10\4\0\61\10\u2104\0\u016e\10\2\0\152\10\46\0\7\10\14\0"+
    "\5\10\5\0\1\10\1\0\12\10\1\0\15\10\1\0\5\10\1\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\154\10\41\0\u016b\10\22\0"+
    "\100\10\2\0\66\10\50\0\14\10\164\0\5\10\1\0\207\10\23\0"+
    "\12\11\7\0\32\10\6\0\32\10\13\0\131\10\3\0\6\10\2\0"+
    "\6\10\2\0\6\10\2\0\3\10\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\25\0\1\1\2\2\1\3\1\1\2\4\2\5\1\4"+
    "\1\6\1\7\1\10\1\11\1\4\1\12\2\13\1\12"+
    "\1\2\1\4\2\2\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\4\2\1\27"+
    "\2\30\3\27\2\30\2\27\1\31\1\32\2\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\2\44"+
    "\1\45\1\46\1\47\1\0\1\50\1\0\3\1\10\0"+
    "\1\5\2\51\1\5\1\52\1\53\2\13\7\53\1\0"+
    "\1\53\2\54\1\0\1\55\3\0\1\56\5\0\2\27"+
    "\1\57\2\0\2\27\6\0\1\60\10\0\1\61\1\0"+
    "\2\52\5\53\1\62\11\53\1\63\1\0\1\64\1\27"+
    "\1\64\1\0\1\27\1\57\1\65\1\66\6\0\1\67"+
    "\2\0\10\53\1\70\5\53\1\71\1\72\6\0\1\73"+
    "\1\74\1\75\7\53\1\0\2\53\1\76\1\53\1\77"+
    "\1\53\3\0\1\53\1\100\6\53\1\101\1\0\4\53"+
    "\3\0\1\102\1\103\4\53\1\104\1\0\2\53\1\105"+
    "\1\53\3\0\3\53\1\106\1\107\1\0\1\110\1\111"+
    "\1\53\2\0\7\53\1\0\3\53\1\112\1\107\3\53"+
    "\1\0\1\113\1\114\1\115\3\53\1\0\1\116\2\53"+
    "\1\117\1\120\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0150"+
    "\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0150"+
    "\0\u0150\0\u0150\0\u0150\0\u0690\0\u06c8\0\u0700\0\u0620\0\u0738"+
    "\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0150\0\u0150\0\u0150\0\u0150"+
    "\0\u0150\0\u0150\0\u0150\0\u0150\0\u0150\0\u0150\0\u0150\0\u0850"+
    "\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09a0\0\u09d8"+
    "\0\u0a10\0\u0a48\0\u0a80\0\u0a80\0\u0ab8\0\u0150\0\u0150\0\u0af0"+
    "\0\u0150\0\u0150\0\u0150\0\u0150\0\u0150\0\u0150\0\u0150\0\u0150"+
    "\0\u0150\0\u0b28\0\u0b60\0\u0150\0\u0150\0\u0150\0\u0b98\0\u0bd0"+
    "\0\u0c08\0\u0c40\0\u0c78\0\u0150\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58"+
    "\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18"+
    "\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8"+
    "\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u07e0"+
    "\0\u0150\0\u0818\0\u0850\0\u1298\0\u0150\0\u08c0\0\u08f8\0\u12d0"+
    "\0\u0930\0\u1308\0\u1340\0\u1378\0\u13b0\0\u0a10\0\u13e8\0\u1420"+
    "\0\u1458\0\u1490\0\u14c8\0\u0b28\0\u0b60\0\u1500\0\u1538\0\u0150"+
    "\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8"+
    "\0\u0150\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880"+
    "\0\u18b8\0\u0f88\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08"+
    "\0\u1a40\0\u1a78\0\u1ab0\0\u0150\0\u1ae8\0\u13b0\0\u1b20\0\u0150"+
    "\0\u1b58\0\u1b90\0\u0150\0\u0150\0\u0150\0\u1bc8\0\u1c00\0\u1c38"+
    "\0\u1c70\0\u1ca8\0\u1ce0\0\u0150\0\u1d18\0\u1768\0\u1d50\0\u1d88"+
    "\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48"+
    "\0\u1f80\0\u1fb8\0\u1ff0\0\u2028\0\u0150\0\u0150\0\u2060\0\u2098"+
    "\0\u20d0\0\u2108\0\u2140\0\u2178\0\u0150\0\u0f88\0\u21b0\0\u21e8"+
    "\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370\0\u23a8"+
    "\0\u23e0\0\u0f88\0\u2418\0\u0f88\0\u2450\0\u2488\0\u24c0\0\u24f8"+
    "\0\u2530\0\u0f88\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680"+
    "\0\u0f88\0\u26b8\0\u26f0\0\u2728\0\u2760\0\u2798\0\u27d0\0\u2808"+
    "\0\u2840\0\u0f88\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u2958\0\u0f88"+
    "\0\u2990\0\u29c8\0\u2a00\0\u0f88\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0"+
    "\0\u2b18\0\u2b50\0\u2b88\0\u0f88\0\u2bc0\0\u2bf8\0\u0f88\0\u0f88"+
    "\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u2db8"+
    "\0\u2df0\0\u2e28\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\u0f88\0\u0f88"+
    "\0\u2f40\0\u2f78\0\u2fb0\0\u2fe8\0\u0f88\0\u0f88\0\u0f88\0\u3020"+
    "\0\u3058\0\u3090\0\u30c8\0\u0f88\0\u3100\0\u3138\0\u0150\0\u0f88"+
    "\0\u3170";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\14\26\1\27\1\30\2\26\1\31\42\26\1\32\4\26"+
    "\1\0\1\33\1\34\1\33\1\35\1\36\1\0\1\36"+
    "\1\37\1\0\1\33\1\34\3\0\1\33\1\0\20\34"+
    "\1\36\1\40\1\34\2\0\6\34\1\41\1\42\3\0"+
    "\1\43\1\44\5\0\1\30\1\33\1\34\1\33\1\35"+
    "\1\36\1\30\1\36\1\37\1\30\1\33\1\34\3\30"+
    "\1\33\1\30\20\34\1\36\1\40\1\34\2\30\6\34"+
    "\1\41\1\42\3\30\1\43\1\44\6\30\1\33\1\45"+
    "\1\33\1\46\1\47\1\30\1\36\1\50\1\30\1\33"+
    "\1\45\3\30\1\33\1\51\20\45\1\36\1\40\1\45"+
    "\2\30\6\45\1\41\1\42\3\30\1\43\1\52\66\30"+
    "\1\53\50\30\1\54\25\30\70\0\4\55\1\35\1\36"+
    "\1\55\1\36\31\55\1\36\12\55\1\56\1\57\16\55"+
    "\1\35\1\36\1\55\1\36\31\55\1\36\12\55\1\56"+
    "\1\60\12\55\42\61\1\40\11\61\1\62\1\63\1\61"+
    "\1\64\1\61\1\43\6\61\54\65\1\66\1\67\12\65"+
    "\66\70\1\71\1\70\17\72\1\73\50\72\4\74\1\75"+
    "\1\76\1\74\1\77\5\74\1\100\23\74\1\77\26\74"+
    "\4\101\1\102\1\103\1\101\1\104\6\101\1\105\22\101"+
    "\1\104\26\101\4\55\1\35\1\36\1\55\1\36\31\55"+
    "\1\36\12\55\1\56\1\106\12\55\4\107\1\110\1\111"+
    "\1\107\1\111\31\107\1\111\12\107\1\112\17\107\1\110"+
    "\1\111\1\107\1\111\31\107\1\111\12\107\1\113\1\114"+
    "\12\107\20\115\1\107\33\115\1\116\1\117\1\120\1\121"+
    "\10\115\17\122\1\123\50\122\56\124\1\125\1\124\1\126"+
    "\7\124\14\26\2\0\2\26\1\0\42\26\1\127\4\26"+
    "\14\0\1\130\1\0\1\131\54\0\1\132\10\0\1\132"+
    "\2\0\1\133\1\134\1\135\3\0\1\136\1\137\2\0"+
    "\1\140\4\0\1\141\2\0\1\142\2\132\1\134\1\132"+
    "\6\0\1\132\4\0\1\132\6\0\16\26\1\143\44\26"+
    "\2\0\1\26\1\144\1\26\1\0\3\33\6\0\2\33"+
    "\3\0\1\33\1\0\20\33\2\0\1\33\2\0\6\33"+
    "\6\0\1\33\6\0\2\34\1\33\4\0\2\37\1\33"+
    "\1\34\3\0\1\33\1\0\20\34\2\0\1\34\2\0"+
    "\6\34\6\0\1\33\11\0\1\35\1\145\1\0\1\36"+
    "\31\0\1\36\32\0\1\35\1\36\1\0\1\36\31\0"+
    "\1\36\27\0\2\37\5\0\2\37\1\0\1\37\5\0"+
    "\20\37\2\0\1\37\2\0\6\37\15\0\1\33\1\146"+
    "\1\33\4\0\1\147\1\0\1\33\1\146\3\0\1\33"+
    "\1\0\20\146\2\0\1\146\2\0\6\146\6\0\1\33"+
    "\6\0\2\45\1\33\4\0\2\50\1\33\1\45\3\0"+
    "\1\33\1\0\20\45\2\0\1\45\2\0\6\45\6\0"+
    "\1\33\11\0\1\35\1\150\1\0\1\36\31\0\1\36"+
    "\27\0\2\50\5\0\2\50\1\0\1\50\5\0\20\50"+
    "\2\0\1\50\2\0\6\50\15\0\1\151\1\152\1\153"+
    "\4\0\1\152\2\0\1\152\1\154\4\0\1\152\1\155"+
    "\1\152\1\156\1\157\1\152\1\160\4\152\1\161\2\152"+
    "\1\162\1\163\1\164\1\154\1\152\1\0\1\154\1\152"+
    "\1\165\4\152\1\154\4\0\1\154\7\0\1\33\1\166"+
    "\1\33\4\0\1\167\1\0\1\33\1\166\3\0\1\33"+
    "\1\0\20\166\2\0\1\166\2\0\6\166\6\0\1\33"+
    "\5\0\61\170\1\171\6\170\42\172\1\171\25\172\66\173"+
    "\1\174\66\173\1\175\1\174\1\173\17\176\1\177\67\176"+
    "\1\200\50\176\15\201\1\202\56\201\1\203\1\204\1\201"+
    "\1\77\5\201\1\202\23\201\1\77\32\201\1\203\1\77"+
    "\1\201\1\77\5\201\1\202\23\201\1\77\43\201\1\205"+
    "\52\201\16\206\1\207\55\206\1\210\1\211\1\206\1\104"+
    "\6\206\1\207\22\206\1\104\32\206\1\210\1\104\1\206"+
    "\1\104\6\206\1\207\22\206\1\104\44\206\1\212\51\206"+
    "\5\0\1\213\62\0\17\214\1\215\67\214\1\216\50\214"+
    "\16\26\1\0\44\26\2\0\1\26\1\0\1\26\17\0"+
    "\1\217\66\0\1\220\54\0\1\132\10\0\1\132\25\0"+
    "\2\132\1\0\1\132\6\0\1\132\4\0\1\132\40\0"+
    "\1\221\57\0\1\222\101\0\1\223\60\0\1\224\67\0"+
    "\1\225\64\0\1\226\50\0\1\132\10\0\1\132\24\0"+
    "\1\142\2\132\1\0\1\132\6\0\1\132\4\0\1\132"+
    "\25\0\1\227\104\0\1\230\32\0\1\231\4\0\1\35"+
    "\3\36\31\0\1\36\27\0\2\146\1\33\4\0\2\147"+
    "\1\33\1\146\3\0\1\33\1\0\20\146\2\0\1\146"+
    "\2\0\6\146\6\0\1\33\6\0\2\147\5\0\2\147"+
    "\1\0\1\147\5\0\20\147\2\0\1\147\2\0\6\147"+
    "\20\0\1\35\1\36\1\47\1\36\31\0\1\36\27\0"+
    "\1\151\1\232\1\233\65\0\2\152\5\0\2\152\1\0"+
    "\1\152\5\0\20\152\2\0\1\152\2\0\6\152\15\0"+
    "\1\234\1\0\1\154\10\0\1\154\25\0\1\154\2\0"+
    "\1\154\6\0\1\154\4\0\1\154\11\0\1\154\10\0"+
    "\1\154\25\0\1\154\2\0\1\154\6\0\1\154\4\0"+
    "\1\154\7\0\2\152\5\0\2\152\1\0\1\152\5\0"+
    "\4\152\1\235\1\236\4\152\1\237\5\152\2\0\1\152"+
    "\2\0\4\152\1\240\1\152\15\0\2\152\5\0\2\152"+
    "\1\0\1\152\5\0\12\152\1\241\3\152\1\242\1\152"+
    "\2\0\1\152\2\0\6\152\15\0\2\152\5\0\2\152"+
    "\1\0\1\152\5\0\13\152\1\243\4\152\2\0\1\152"+
    "\2\0\6\152\15\0\2\152\5\0\2\152\1\0\1\152"+
    "\5\0\3\152\1\244\14\152\2\0\1\152\2\0\6\152"+
    "\15\0\2\152\5\0\2\152\1\0\1\152\5\0\20\152"+
    "\2\0\1\152\2\0\2\152\1\245\3\152\15\0\2\152"+
    "\5\0\2\152\1\0\1\152\5\0\20\152\2\0\1\152"+
    "\2\0\1\152\1\246\4\152\15\0\2\152\5\0\2\152"+
    "\1\0\1\152\5\0\1\152\1\247\6\152\1\250\1\251"+
    "\6\152\2\0\1\152\2\0\2\152\1\252\3\152\17\0"+
    "\1\154\10\0\1\154\24\0\1\164\1\154\2\0\1\154"+
    "\6\0\1\154\4\0\1\154\7\0\2\152\5\0\2\152"+
    "\1\0\1\152\5\0\20\152\2\0\1\152\2\0\3\152"+
    "\1\253\2\152\15\0\2\166\1\33\4\0\2\167\1\33"+
    "\1\166\3\0\1\33\1\0\20\166\2\0\1\166\2\0"+
    "\6\166\6\0\1\33\6\0\2\167\5\0\2\167\1\0"+
    "\1\167\5\0\20\167\2\0\1\167\2\0\6\167\14\0"+
    "\65\173\1\254\1\174\1\173\15\176\1\255\1\176\1\200"+
    "\50\176\15\201\1\256\56\201\1\203\1\257\1\201\1\77"+
    "\5\201\1\202\23\201\1\77\32\201\1\203\1\77\1\76"+
    "\1\77\5\201\1\202\23\201\1\77\26\201\15\0\1\260"+
    "\52\0\16\206\1\261\55\206\1\210\1\262\1\206\1\104"+
    "\6\206\1\207\22\206\1\104\32\206\1\210\1\104\1\103"+
    "\1\104\6\206\1\207\22\206\1\104\43\206\1\263\1\261"+
    "\51\206\6\0\1\111\61\0\17\214\1\216\45\214\1\264"+
    "\2\214\17\0\1\265\72\0\1\266\70\0\1\267\17\0"+
    "\1\267\60\0\1\270\62\0\1\271\64\0\1\272\72\0"+
    "\1\273\57\0\1\274\120\0\1\275\20\0\1\151\67\0"+
    "\1\234\67\0\1\234\1\276\66\0\2\152\5\0\2\152"+
    "\1\0\1\152\5\0\20\152\2\0\1\152\2\0\1\277"+
    "\5\152\15\0\2\152\5\0\2\152\1\0\1\152\5\0"+
    "\17\152\1\300\2\0\1\152\2\0\6\152\15\0\2\152"+
    "\5\0\2\152\1\0\1\152\5\0\2\152\1\301\15\152"+
    "\2\0\1\301\2\0\6\152\15\0\2\152\5\0\2\152"+
    "\1\0\1\152\5\0\10\152\1\302\7\152\2\0\1\152"+
    "\2\0\6\152\15\0\2\152\5\0\2\152\1\0\1\152"+
    "\5\0\20\152\2\0\1\152\2\0\1\303\5\152\15\0"+
    "\2\152\5\0\2\152\1\0\1\152\5\0\13\152\1\304"+
    "\4\152\2\0\1\152\2\0\6\152\15\0\2\152\5\0"+
    "\2\152\1\0\1\152\5\0\1\152\1\305\16\152\2\0"+
    "\1\152\2\0\6\152\15\0\2\152\5\0\2\152\1\0"+
    "\1\152\5\0\13\152\1\306\4\152\2\0\1\152\2\0"+
    "\6\152\15\0\2\152\5\0\2\152\1\0\1\152\5\0"+
    "\7\152\1\307\10\152\2\0\1\152\2\0\6\152\15\0"+
    "\2\152\5\0\2\152\1\0\1\152\5\0\20\152\2\0"+
    "\1\152\2\0\1\310\5\152\15\0\2\152\5\0\2\152"+
    "\1\0\1\152\5\0\20\152\2\0\1\152\2\0\1\152"+
    "\1\311\4\152\15\0\2\152\5\0\2\152\1\0\1\152"+
    "\5\0\3\152\1\312\14\152\2\0\1\152\2\0\6\152"+
    "\15\0\2\152\5\0\2\152\1\0\1\152\5\0\20\152"+
    "\2\0\1\152\2\0\1\152\1\313\4\152\15\0\2\152"+
    "\5\0\2\152\1\0\1\152\5\0\1\152\1\314\16\152"+
    "\2\0\1\152\2\0\6\152\14\0\15\176\1\315\1\176"+
    "\1\177\50\176\4\201\1\203\3\77\5\201\1\202\23\201"+
    "\1\77\26\201\15\206\1\316\1\261\55\206\1\210\3\104"+
    "\6\206\1\207\22\206\1\104\26\206\35\0\1\317\56\0"+
    "\1\320\71\0\1\321\63\0\1\322\73\0\1\323\100\0"+
    "\1\324\64\0\1\325\34\0\2\152\5\0\2\152\1\0"+
    "\1\152\5\0\20\152\2\0\1\152\2\0\2\152\1\326"+
    "\3\152\15\0\2\152\5\0\2\152\1\0\1\152\5\0"+
    "\1\152\1\327\16\152\2\0\1\152\2\0\6\152\15\0"+
    "\2\152\5\0\2\152\1\0\1\152\5\0\3\152\1\330"+
    "\12\152\1\331\1\332\2\0\1\152\2\0\6\152\15\0"+
    "\2\152\5\0\2\152\1\0\1\152\5\0\1\152\1\333"+
    "\16\152\2\0\1\152\2\0\6\152\15\0\2\152\5\0"+
    "\2\152\1\0\1\152\5\0\5\152\1\334\12\152\2\0"+
    "\1\152\2\0\6\152\15\0\2\152\5\0\2\152\1\0"+
    "\1\152\5\0\1\152\1\335\16\152\2\0\1\152\2\0"+
    "\6\152\15\0\2\152\5\0\2\152\1\0\1\152\5\0"+
    "\5\152\1\336\12\152\2\0\1\152\2\0\6\152\15\0"+
    "\2\152\1\0\2\337\1\0\1\337\2\152\1\0\1\152"+
    "\5\0\20\152\1\337\1\0\1\152\2\0\6\152\15\0"+
    "\2\152\5\0\2\152\1\0\1\152\5\0\1\152\1\340"+
    "\16\152\2\0\1\152\2\0\6\152\15\0\2\152\5\0"+
    "\2\152\1\0\1\152\5\0\10\152\1\341\7\152\2\0"+
    "\1\152\2\0\6\152\15\0\2\152\5\0\2\152\1\0"+
    "\1\152\5\0\13\152\1\342\4\152\2\0\1\152\2\0"+
    "\6\152\15\0\2\152\5\0\2\152\1\0\1\152\5\0"+
    "\10\152\1\343\7\152\2\0\1\152\2\0\6\152\15\0"+
    "\2\152\5\0\2\152\1\0\1\152\5\0\11\152\1\344"+
    "\6\152\2\0\1\152\2\0\6\152\15\0\2\152\5\0"+
    "\2\152\1\0\1\152\5\0\7\152\1\345\10\152\2\0"+
    "\1\152\2\0\6\152\52\0\1\346\56\0\1\134\71\0"+
    "\1\134\70\0\1\134\71\0\1\347\65\0\1\350\40\0"+
    "\2\152\5\0\2\152\1\0\1\152\5\0\3\152\1\351"+
    "\14\152\2\0\1\152\2\0\6\152\15\0\2\152\5\0"+
    "\2\152\1\0\1\152\5\0\16\152\1\352\1\152\2\0"+
    "\1\152\2\0\6\152\15\0\2\152\5\0\2\152\1\0"+
    "\1\152\5\0\20\152\2\0\1\152\2\0\1\152\1\353"+
    "\4\152\15\0\2\152\5\0\2\152\1\0\1\152\5\0"+
    "\1\152\1\354\7\152\1\355\6\152\2\0\1\152\2\0"+
    "\6\152\15\0\2\152\5\0\2\152\1\0\1\152\5\0"+
    "\12\152\1\356\5\152\2\0\1\152\2\0\6\152\15\0"+
    "\2\152\5\0\2\152\1\0\1\152\5\0\20\152\2\0"+
    "\1\152\2\0\5\152\1\357\15\0\2\152\5\0\2\152"+
    "\1\0\1\152\5\0\12\152\1\360\5\152\2\0\1\152"+
    "\2\0\6\152\15\0\2\152\5\0\2\152\1\0\1\152"+
    "\5\0\2\152\1\361\15\152\2\0\1\361\2\0\6\152"+
    "\14\0\20\337\1\362\47\337\1\0\2\152\5\0\2\152"+
    "\1\0\1\152\5\0\4\152\1\363\13\152\2\0\1\152"+
    "\2\0\6\152\15\0\2\152\5\0\2\152\1\0\1\152"+
    "\5\0\3\152\1\364\14\152\2\0\1\152\2\0\6\152"+
    "\15\0\2\152\5\0\2\152\1\0\1\152\5\0\20\152"+
    "\2\0\1\152\2\0\1\365\5\152\15\0\2\152\5\0"+
    "\2\152\1\0\1\152\5\0\11\152\1\366\6\152\2\0"+
    "\1\152\2\0\6\152\40\0\1\367\67\0\1\370\70\0"+
    "\1\371\43\0\2\152\5\0\2\152\1\0\1\152\5\0"+
    "\16\152\1\372\1\152\2\0\1\152\2\0\6\152\15\0"+
    "\2\152\5\0\2\152\1\0\1\152\5\0\7\152\1\373"+
    "\10\152\2\0\1\152\2\0\6\152\15\0\2\152\5\0"+
    "\2\152\1\0\1\152\5\0\20\152\2\0\1\152\2\0"+
    "\1\374\5\152\15\0\2\152\5\0\2\152\1\0\1\152"+
    "\5\0\3\152\1\375\14\152\2\0\1\152\2\0\6\152"+
    "\15\0\2\152\5\0\2\152\1\0\1\152\5\0\2\152"+
    "\1\376\15\152\2\0\1\376\2\0\6\152\15\0\2\152"+
    "\5\0\2\152\1\0\1\152\5\0\2\152\1\377\15\152"+
    "\2\0\1\377\2\0\6\152\15\0\2\152\5\0\2\152"+
    "\1\0\1\152\5\0\2\152\1\u0100\15\152\2\0\1\u0100"+
    "\2\0\6\152\14\0\20\337\1\362\1\337\1\u0101\45\337"+
    "\1\0\2\152\5\0\2\152\1\0\1\152\5\0\20\152"+
    "\2\0\1\152\2\0\1\u0102\5\152\15\0\2\152\5\0"+
    "\2\152\1\0\1\152\5\0\20\152\2\0\1\152\2\0"+
    "\1\152\1\u0103\4\152\15\0\2\152\5\0\2\152\1\0"+
    "\1\152\5\0\20\152\2\0\1\152\2\0\2\152\1\u0104"+
    "\3\152\15\0\2\152\5\0\2\152\1\0\1\152\5\0"+
    "\7\152\1\u0105\10\152\2\0\1\152\2\0\6\152\45\0"+
    "\1\u0106\71\0\1\u0107\55\0\1\u0108\47\0\2\152\5\0"+
    "\2\152\1\0\1\152\5\0\1\152\1\u0109\16\152\2\0"+
    "\1\152\2\0\6\152\15\0\2\152\5\0\2\152\1\0"+
    "\1\152\5\0\10\152\1\u010a\7\152\2\0\1\152\2\0"+
    "\6\152\15\0\2\152\5\0\2\152\1\0\1\152\5\0"+
    "\10\152\1\u010b\7\152\2\0\1\152\2\0\6\152\15\0"+
    "\2\152\5\0\2\152\1\0\1\152\5\0\17\152\1\u010c"+
    "\2\0\1\152\2\0\6\152\15\0\2\152\5\0\2\152"+
    "\1\0\1\152\5\0\1\152\1\u010d\16\152\2\0\1\152"+
    "\2\0\6\152\14\0\20\337\1\362\12\337\1\u010e\34\337"+
    "\1\0\2\152\5\0\2\152\1\0\1\152\5\0\20\152"+
    "\2\0\1\152\2\0\2\152\1\u010f\3\152\15\0\2\152"+
    "\5\0\2\152\1\0\1\152\5\0\12\152\1\u0110\5\152"+
    "\2\0\1\152\2\0\6\152\15\0\2\152\5\0\2\152"+
    "\1\0\1\152\5\0\3\152\1\u0111\14\152\2\0\1\152"+
    "\2\0\6\152\33\0\1\u0112\73\0\1\134\17\0\1\134"+
    "\46\0\1\u0113\46\0\2\152\5\0\2\152\1\0\1\152"+
    "\5\0\4\152\1\u0114\13\152\2\0\1\152\2\0\6\152"+
    "\15\0\2\152\5\0\2\152\1\0\1\152\5\0\3\152"+
    "\1\u0115\14\152\2\0\1\152\2\0\6\152\15\0\2\152"+
    "\5\0\2\152\1\0\1\152\5\0\20\152\2\0\1\152"+
    "\2\0\1\u0116\5\152\15\0\2\152\5\0\2\152\1\0"+
    "\1\152\5\0\3\152\1\u0117\5\152\1\u0118\4\152\1\u0119"+
    "\1\152\2\0\1\152\2\0\5\152\1\u011a\14\0\20\337"+
    "\1\362\2\337\1\u011b\17\337\1\u011b\24\337\1\0\2\152"+
    "\5\0\2\152\1\0\1\152\5\0\10\152\1\u011c\7\152"+
    "\2\0\1\152\2\0\6\152\52\0\1\141\71\0\1\134"+
    "\30\0\2\152\5\0\2\152\1\0\1\152\5\0\20\152"+
    "\2\0\1\152\2\0\1\u011d\5\152\15\0\2\152\5\0"+
    "\2\152\1\0\1\152\5\0\20\152\2\0\1\152\2\0"+
    "\1\152\1\u011e\4\152\15\0\2\152\5\0\2\152\1\0"+
    "\1\152\5\0\20\152\2\0\1\152\2\0\2\152\1\u011f"+
    "\3\152\15\0\2\152\5\0\2\152\1\0\1\152\5\0"+
    "\16\152\1\u0120\1\152\2\0\1\152\2\0\6\152\15\0"+
    "\2\152\5\0\2\152\1\0\1\152\5\0\20\152\2\0"+
    "\1\152\2\0\2\152\1\u0121\3\152\15\0\2\152\5\0"+
    "\2\152\1\0\1\152\5\0\3\152\1\u0122\14\152\2\0"+
    "\1\152\2\0\6\152\15\0\2\152\5\0\2\152\1\0"+
    "\1\152\5\0\12\152\1\u0123\5\152\2\0\1\152\2\0"+
    "\6\152\14\0\20\337\1\362\13\337\1\u0124\33\337\1\0"+
    "\2\152\5\0\2\152\1\0\1\152\5\0\1\152\1\u0125"+
    "\16\152\2\0\1\152\2\0\6\152\15\0\2\152\5\0"+
    "\2\152\1\0\1\152\5\0\20\152\2\0\1\152\2\0"+
    "\2\152\1\u0126\3\152\15\0\2\152\5\0\2\152\1\0"+
    "\1\152\5\0\12\152\1\u0127\5\152\2\0\1\152\2\0"+
    "\6\152\15\0\2\152\5\0\2\152\1\0\1\152\5\0"+
    "\1\152\1\u0128\16\152\2\0\1\152\2\0\6\152\15\0"+
    "\2\152\5\0\2\152\1\0\1\152\5\0\7\152\1\u0129"+
    "\10\152\2\0\1\152\2\0\6\152\15\0\2\152\5\0"+
    "\2\152\1\0\1\152\5\0\5\152\1\u012a\12\152\2\0"+
    "\1\152\2\0\6\152\14\0\20\337\1\362\27\337\1\u012b"+
    "\17\337\1\0\2\152\5\0\2\152\1\0\1\152\5\0"+
    "\12\152\1\u012c\5\152\2\0\1\152\2\0\6\152\15\0"+
    "\2\152\5\0\2\152\1\0\1\152\5\0\17\152\1\u012d"+
    "\2\0\1\152\2\0\6\152\15\0\2\152\5\0\2\152"+
    "\1\0\1\152\5\0\1\152\1\u012e\16\152\2\0\1\152"+
    "\2\0\6\152\14\0\20\337\1\362\13\337\1\u012f\33\337"+
    "\1\0\2\152\5\0\2\152\1\0\1\152\5\0\10\152"+
    "\1\u0130\7\152\2\0\1\152\2\0\6\152\15\0\2\152"+
    "\5\0\2\152\1\0\1\152\5\0\17\152\1\u0131\2\0"+
    "\1\152\2\0\6\152\15\0\2\152\5\0\2\152\1\0"+
    "\1\152\5\0\17\152\1\u012c\2\0\1\152\2\0\6\152"+
    "\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12712];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\10\16\0\2\1\1\11\7\1\4\11\11\1"+
    "\13\11\16\1\2\11\1\1\11\11\2\1\3\11\1\0"+
    "\1\1\1\0\2\1\1\11\10\0\17\1\1\0\3\1"+
    "\1\0\1\11\3\0\1\11\5\0\3\1\2\0\2\1"+
    "\6\0\1\11\10\0\1\11\1\0\21\1\1\11\1\0"+
    "\2\1\1\11\1\0\1\1\3\11\6\0\1\11\2\0"+
    "\16\1\2\11\6\0\1\11\11\1\1\0\6\1\3\0"+
    "\11\1\1\0\4\1\3\0\7\1\1\0\4\1\3\0"+
    "\5\1\1\0\3\1\2\0\7\1\1\0\10\1\1\0"+
    "\6\1\1\0\3\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private ByteStack stack = new ByteStack();
    private char yy_old_buffer[] = new char[ZZ_BUFFERSIZE];
    private int yy_old_pushbackPos;
    private int whitespaceEndPosition;
    private int directiveParBalance = 0;
    private int directiveBracketBalance = 0;
    private String phpConditionText = "";
    private String phpParameterExpressionText = "";
    private FileObject currentFile;
    private String fakePhpEmbeddingText = "";
    private int lastEmbeddedPos = -1;
    private boolean zzEOFDone = false;
    private int whitespaceCounter = 0;
    private String fakeWhitespaceText = "";
    private boolean elseifOpened = true;
    private Map<Integer, Integer> elseif_balance_buffer = new HashMap<>();
    private int ifBalance = 0;
    private Collection<String> parameterList = new ArrayList<String>();

    public void reset(java.io.Reader reader) {
        yyreset(reader);
    }

    public void setState(int state) {
        yybegin(state);
    }

    public int getState() {
        return yystate();
    }

    private void pushState(int state) {
        stack.push(zzLexicalState);
        yybegin(state);
    }

    private void popState() {
        yybegin(stack.pop());
    }

    public int getCurrentLine() {
        return yyline;
    }

    protected int getTokenStartPosition() {
        return zzStartRead - zzPushbackPos;
    }

    protected int getTokenLength() {
        return zzMarkedPos - zzStartRead;
    }

    public int getLength() {
        return zzEndRead - zzPushbackPos;
    }

    private Symbol createFullSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = yytext();
        return symbol;
    }

    private Symbol createFakeWSSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = fakeWhitespaceText;
        return symbol;
    }

    private Symbol createConditionSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = phpConditionText;
        phpConditionText = "";
        return symbol;
    }


    private Symbol createPhpParameterExpression(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = phpParameterExpressionText;
        phpParameterExpressionText = "";
        return symbol;
    }


    private Symbol createSymbol(int symbolNumber) {
        int leftPosition = getTokenStartPosition();
        Symbol symbol = new Symbol(symbolNumber, leftPosition, leftPosition + getTokenLength());
        return symbol;
    }

    public int getWhitespaceEndPosition() {
        return whitespaceEndPosition;
    }

    private void error(String message) {
        System.out.println("Error at line " + (yyline + 1) + ", column " + (yycolumn + 1) + " : " + message);
    }

    protected void addBladePhpInline() {
        int start = getTokenStartPosition();
        if (start > 1) {
            int offsetEmbed;
            if (lastEmbeddedPos < 0) {
                offsetEmbed = start - 2;
            } else {
                offsetEmbed = start - 2 - lastEmbeddedPos;
            }
            String emptyText = "";
            if (offsetEmbed > 0) {
                emptyText = new String(new char[offsetEmbed]).replace("\0", " ");
            }
            fakePhpEmbeddingText += emptyText + yytext().replace("@php", "<?php ").replace("@endphp", "    ?>");
        } else {
            String phpText = yytext().replace("@php", "<?php ").replace("@endphp", "    ?>");
            int phpTextL = phpText.length();
            int yyTextL = yytext().length();
            if (phpText.length() == yytext().length()) {
                fakePhpEmbeddingText += phpText;
            }
        }

        lastEmbeddedPos = start + getTokenLength();
    }

    protected void addPhpStatement() {
        int start = getTokenStartPosition();
        int offsetEmbed;
        if (lastEmbeddedPos < 0) {
            offsetEmbed = start;
        } else {
            offsetEmbed = start - lastEmbeddedPos;
        }
        String emptyText = "";
        if (offsetEmbed > 0) {
            emptyText = new String(new char[offsetEmbed]).replace("\0", " ");
        }
        fakePhpEmbeddingText += emptyText + yytext();
        lastEmbeddedPos = start + getTokenLength();
    }
    
    protected void addEchoStatement(){
        int start = getTokenStartPosition();
        int offsetEmbed;
        //we assume that previous we had {{ or {!!
        if (lastEmbeddedPos < 0) {
            offsetEmbed = start - 3;
        } else {
            offsetEmbed = start - 3 - lastEmbeddedPos;
        }
        String emptyText;
        if (offsetEmbed > 0) {
            emptyText = new String(new char[offsetEmbed]).replace("\0", " ");
            fakePhpEmbeddingText += emptyText + "<?=" + yytext() + "?>";
            lastEmbeddedPos = start + getTokenLength() + 2;
        }
        
    }

    public String getFakePhpEmbeddingText() {
        return fakePhpEmbeddingText;
    }

    public void setCurentFile(FileObject file) {
        currentFile = file;
    }

    public PHPParseResult getPhpParserResult() {
        ParsingUtils parsingUtils = new ParsingUtils();
        if (fakePhpEmbeddingText.length() > 0) {
            parsingUtils.parsePhpText(fakePhpEmbeddingText);
        } else {
            parsingUtils.parsePhpText("<?php\n");
        }

        return parsingUtils.getParserResult();
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ASTBladeScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ASTBladeScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1812) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 30: 
          { yybegin(YYINITIAL);
    return createFullSymbol(ASTBladeSymbols.T_CLOSE_PARENTHESE);
          }
        case 81: break;
        case 7: 
          { directiveParBalance++;
    	return createSymbol(ASTBladeSymbols.T_OPEN_PARENTHESE);
          }
        case 82: break;
        case 6: 
          { yypushback(1);pushState(ST_STRING_SQUOTE);
          }
        case 83: break;
        case 75: 
          { popState();
        return createFullSymbol(ASTBladeSymbols.T_BLADE_OVERWRITE);
          }
        case 84: break;
        case 9: 
          { yypushback(1);pushState(ST_STRING_DBQUOTE);
          }
        case 85: break;
        case 44: 
          { //to be refactored
        return createFullSymbol(ASTBladeSymbols.T_VARIABLE);
          }
        case 86: break;
        case 59: 
          { yypushback(5);
    pushState(ST_PHP);
          }
        case 87: break;
        case 5: 
          { whitespaceEndPosition = getTokenStartPosition() + yylength();
          }
        case 88: break;
        case 65: 
          { pushState(ST_BLADE_INCLUDE_ARGS);
	    return createFullSymbol(ASTBladeSymbols.T_BLADE_YIELD);
          }
        case 89: break;
        case 14: 
          { directiveParBalance--;
    phpConditionText += yytext();
    if (directiveParBalance <= 0){
        directiveParBalance = 0;
  		 yybegin(YYINITIAL);
   		 return createConditionSymbol(ASTBladeSymbols.T_PHP_LOOP_EXPRESSION);
    }
          }
        case 90: break;
        case 31: 
          { String tt2 = yytext();
    phpParameterExpressionText += yytext();
          }
        case 91: break;
        case 21: 
          { //skipping the parameter
    	directiveParBalance++;
    	//return createSymbol(ASTBladeSymbols.T_OPEN_PARENTHESE);
          }
        case 92: break;
        case 61: 
          { //pop the state
        popState();
        return createFullSymbol(ASTBladeSymbols.T_BLADE_DIRECTIVE);
          }
        case 93: break;
        case 8: 
          { directiveParBalance--;
    	if (directiveParBalance <= 0){
            directiveParBalance = 0;
    		yybegin(YYINITIAL);
    	}
    	return createSymbol(ASTBladeSymbols.T_CLOSE_PARENTHESE);
          }
        case 94: break;
        case 37: 
          { String arrayText = yytext();
   phpParameterExpressionText += yytext();
          }
        case 95: break;
        case 33: 
          { directiveParBalance--;
    if (directiveParBalance < 0){
        pushState(ST_ARGUMENT_EXPRESSION_LIST);
        yypushback(1);
        if (phpParameterExpressionText.length() > 0){
            parameterList.add(phpParameterExpressionText);
            Symbol expr = createPhpParameterExpression(ASTBladeSymbols.T_PARAMETER_EXPRESSION);
            phpParameterExpressionText = "";
            return expr;
        }
    } else if(directiveParBalance > 0) {
        phpParameterExpressionText += yytext();
    } else if (directiveParBalance == 0 && phpParameterExpressionText.length() > 0) {
        parameterList.add(phpParameterExpressionText);
        Symbol expr = createPhpParameterExpression(ASTBladeSymbols.T_PARAMETER_EXPRESSION);
        phpParameterExpressionText = "";
        pushState(ST_ARGUMENT_EXPRESSION_LIST);
        yypushback(1);
        return expr;
     }
          }
        case 96: break;
        case 25: 
          { directiveParBalance--;
    phpConditionText += yytext();
    if (directiveParBalance <= 0){
        directiveParBalance = 0;
  		 yypushback(1);
         popState();
   		 return createConditionSymbol(ASTBladeSymbols.T_PHP_PARAMETER_EXPRESSION);
    }
          }
        case 97: break;
        case 11: 
          { String yytext = yytext();
       popState();
       return createFullSymbol(ASTBladeSymbols.T_INLINE_HTML);
          }
        case 98: break;
        case 43: 
          { String yytext = yytext();
       if (BladeSyntax.CONDITIONAL_DIRECTIVES.contains(yytext)) {
             pushState(ST_PHP_CONDITION_EXPRESSION);
             return createFullSymbol(ASTBladeSymbols.T_BLADE_CONDITION_OPEN_TAG);
       }
       whitespaceCounter = 0;
       fakeWhitespaceText = "";
       pushState(ST_LOOK_FOR_DIRECTIVE_ARGUMENTS);
       return createFullSymbol(ASTBladeSymbols.T_BLADE_DIRECTIVE);
          }
        case 99: break;
        case 4: 
          { return createFullSymbol(ASTBladeSymbols.T_STRING);
          }
        case 100: break;
        case 19: 
          { if (phpParameterExpressionText.trim().length() > 0){
            yypushback(1);
            return createPhpParameterExpression(ASTBladeSymbols.T_PHP_PARAMETER_EXPRESSION);
        }
        pushState(ST_BLADE_PARAMETER);
        return createSymbol(ASTBladeSymbols.T_COMMA);
          }
        case 101: break;
        case 17: 
          { directiveParBalance++;
        if (phpParameterExpressionText.trim().length() > 0){
            phpParameterExpressionText += yytext();
        }
        if (directiveParBalance > 1) {
            pushState(ST_BLADE_PARAMETER);
        } else {
    	   return createSymbol(ASTBladeSymbols.T_OPEN_PARENTHESE);
        }
          }
        case 102: break;
        case 72: 
          { pushState(ST_PHP_LOOP_EXPRESSION);
        return createFullSymbol(ASTBladeSymbols.T_BLADE_FOREACH);
          }
        case 103: break;
        case 24: 
          { String yytext = yytext();
    popState();
    return createFullSymbol(ASTBladeSymbols.T_INLINE_HTML);
          }
        case 104: break;
        case 64: 
          { if (elseif_balance_buffer.get(ifBalance) != null && elseif_balance_buffer.get(ifBalance) > 0) {
            int yylength = yylength();
            //fake symbol to mark a closing elseif
            yypushback(yylength);
            int currentElseIfBalance = elseif_balance_buffer.get(ifBalance)-1;
            elseif_balance_buffer.put(ifBalance, currentElseIfBalance);
            return createSymbol(ASTBladeSymbols.T_BLADE_ELSEIF_END);
        }
        elseif_balance_buffer.remove(ifBalance);
        ifBalance--;

        popState();
        int yylength = yylength();

        return createFullSymbol(ASTBladeSymbols.T_BLADE_ENDIF);
          }
        case 105: break;
        case 54: 
          { yypushback(4);
    pushState(ST_COMMENT);
          }
        case 106: break;
        case 48: 
          { String yytext = yytext();
    pushState(ST_BLADE_ECHO_ESCAPED);
    return createFullSymbol(ASTBladeSymbols.T_BLADE_OPEN_ECHO);
          }
        case 107: break;
        case 18: 
          { String yytext = yytext();
    	directiveParBalance--;
    	if (directiveParBalance <= 0){
            directiveParBalance = 0;
            //exit out of ST_BLADE_INCLUDE_ARGS
            if (phpParameterExpressionText.trim().length() > 0){
                directiveParBalance++;
                yypushback(1);
                return createPhpParameterExpression(ASTBladeSymbols.T_PHP_PARAMETER_EXPRESSION);
            }
    		yybegin(YYINITIAL);
    		
    	}
    	return createSymbol(ASTBladeSymbols.T_CLOSE_PARENTHESE);
          }
        case 108: break;
        case 69: 
          { whitespaceCounter = 0;
        fakeWhitespaceText = "";
    	pushState(ST_LOOK_FOR_DIRECTIVE_ARGUMENTS);
    	return createFullSymbol(ASTBladeSymbols.T_BLADE_SWITCH);
          }
        case 109: break;
        case 51: 
          { //yypushback(2);
    addPhpStatement();
    popState();
    return createFullSymbol(ASTBladeSymbols.T_INLINE_PHP);
          }
        case 110: break;
        case 50: 
          { pushState(ST_PHP_CONDITION_EXPRESSION);
        ifBalance++;
        elseif_balance_buffer.put(ifBalance, 0);
        return createFullSymbol(ASTBladeSymbols.T_BLADE_IF);
          }
        case 111: break;
        case 47: 
          { String yytext = yytext();
    popState();
    return createFullSymbol(ASTBladeSymbols.T_BLADE_CLOSE_ECHO);
          }
        case 112: break;
        case 35: 
          { if (phpParameterExpressionText.length() > 0) {
        directiveParBalance = 1;
        directiveBracketBalance = 0;
        parameterList.add(phpParameterExpressionText);
        yypushback(1);
        Symbol expr = createPhpParameterExpression(ASTBladeSymbols.T_PARAMETER_EXPRESSION);
        phpParameterExpressionText = "";
        return expr;
    }
    return createFullSymbol(ASTBladeSymbols.T_COMMA);
          }
        case 113: break;
        case 56: 
          { pushState(ST_PHP_LOOP_EXPRESSION);
        return createFullSymbol(ASTBladeSymbols.T_BLADE_FOR);
          }
        case 114: break;
        case 40: 
          { String yytext = yytext();
    pushState(ST_BLADE_ECHO);
    return createFullSymbol(ASTBladeSymbols.T_BLADE_OPEN_ECHO);
          }
        case 115: break;
        case 13: 
          { directiveParBalance++;
    phpConditionText += yytext();
          }
        case 116: break;
        case 10: 
          { //to be refactored
        return createFullSymbol(ASTBladeSymbols.T_STRING);
          }
        case 117: break;
        case 1: 
          { return createFullSymbol(ASTBladeSymbols.T_INLINE_HTML);
          }
        case 118: break;
        case 27: 
          { //look for directive arguments
    String tokenText = yytext();
    int debug = 1;
    whitespaceCounter++;
    fakeWhitespaceText += tokenText;
          }
        case 119: break;
        case 67: 
          { popState();
        return createFullSymbol(ASTBladeSymbols.T_BLADE_ENDFOR);
          }
        case 120: break;
        case 76: 
          { popState();
        return createFullSymbol(ASTBladeSymbols.T_BLADE_ENDFOREACH);
          }
        case 121: break;
        case 79: 
          { popState();
        addBladePhpInline();
        return createFullSymbol(ASTBladeSymbols.T_BLADE_INLINE_PHP);
          }
        case 122: break;
        case 80: 
          { pushState(ST_ARGUMENT_EXPRESSION_LIST);
       return createFullSymbol(ASTBladeSymbols.T_BLADE_INCLUDE_FIRST);
          }
        case 123: break;
        case 15: 
          { directiveParBalance--;
    phpConditionText += yytext();
    if (directiveParBalance <= 0){
        directiveParBalance = 0;
  		 yybegin(YYINITIAL);
   		 return createConditionSymbol(ASTBladeSymbols.T_PHP_CONDITION_EXPRESSION);
    }
          }
        case 124: break;
        case 12: 
          { String yytext = yytext();
	int debug = 1;
	phpConditionText += yytext();
          }
        case 125: break;
        case 71: 
          { pushState(ST_BLADE_INCLUDE_ARGS);
       return createFullSymbol(ASTBladeSymbols.T_BLADE_INCLUDE);
          }
        case 126: break;
        case 52: 
          { String yytext = yytext();
    yypushback(2);
    addEchoStatement();
    return createFullSymbol(ASTBladeSymbols.T_BLADE_PHP_ECHO);
          }
        case 127: break;
        case 53: 
          { popState();
    return createFullSymbol(ASTBladeSymbols.T_INLINE_HTML);
          }
        case 128: break;
        case 20: 
          { String ddd = yytext();
    	phpParameterExpressionText += yytext();
          }
        case 129: break;
        case 73: 
          { pushState(ST_BLADE_INCLUDE_ARGS);
        return createFullSymbol(ASTBladeSymbols.T_BLADE_SECTION);
          }
        case 130: break;
        case 45: 
          { popState(); 
   return createFullSymbol(ASTBladeSymbols.T_STRING);
          }
        case 131: break;
        case 16: 
          { String debugText = yytext();
        phpParameterExpressionText += yytext();
          }
        case 132: break;
        case 78: 
          { pushState(ST_ARGUMENT_EXPRESSION_LIST);
       return createFullSymbol(ASTBladeSymbols.T_BLADE_INCLUDE_CONDITIONAL);
          }
        case 133: break;
        case 3: 
          { pushState(ST_BLADE_DIRECTIVE);
    if (yylength() > 0){
        yypushback(1);
        String tokenText = yytext();
        if (!tokenText.equals("@")){
            return createFullSymbol(ASTBladeSymbols.T_INLINE_HTML);
        }
    }
          }
        case 134: break;
        case 58: 
          { String yytext = yytext();
    yypushback(3);
    addEchoStatement();
    return createFullSymbol(ASTBladeSymbols.T_BLADE_PHP_ECHO);
          }
        case 135: break;
        case 77: 
          { popState();
    	return createFullSymbol(ASTBladeSymbols.T_BLADE_ENDSECTION);
          }
        case 136: break;
        case 41: 
          { return createFullSymbol(ASTBladeSymbols.T_VARIABLE);
          }
        case 137: break;
        case 28: 
          { //TO TEST
    //directiveParBalance++;
    popState();
    yypushback(1);
    whitespaceCounter = 0;
    fakeWhitespaceText = "";
    pushState(ST_BLADE_PARAMETER_EXPRESSION);
    
    return createSymbol(ASTBladeSymbols.T_OPEN_PARENTHESE);
          }
        case 138: break;
        case 74: 
          { popState();
    	return createFullSymbol(ASTBladeSymbols.T_BLADE_ENDSWITCH);
          }
        case 139: break;
        case 32: 
          { directiveParBalance++;
    phpParameterExpressionText += yytext();
          }
        case 140: break;
        case 66: 
          { if (elseif_balance_buffer.get(ifBalance) > 0) {
            int yylength = yylength();
            //fake symbol to mark a closign elseif
            yypushback(yylength);
            int currentElseIfBalance = elseif_balance_buffer.get(ifBalance)-1;
            elseif_balance_buffer.put(ifBalance, currentElseIfBalance);
            return createSymbol(ASTBladeSymbols.T_BLADE_ELSEIF_END);
        }

        pushState(ST_PHP_CONDITION_EXPRESSION);
        int currentElseIfBalance = elseif_balance_buffer.get(ifBalance)+1;
        elseif_balance_buffer.put(ifBalance, currentElseIfBalance);
        
        return createFullSymbol(ASTBladeSymbols.T_BLADE_ELSEIF);
          }
        case 141: break;
        case 23: 
          { //no break;
          }
        case 142: break;
        case 22: 
          { String yytext = yytext();
    	directiveParBalance--;
    	if (directiveParBalance <= 0){
            directiveParBalance =0;
    		if (phpParameterExpressionText.length() > 0){
    			directiveParBalance++;
    			yypushback(1);
    			popState();
    			return createPhpParameterExpression(ASTBladeSymbols.T_PHP_PARAMETER_EXPRESSION);
    		} else {
    			yybegin(YYINITIAL);
            	return createSymbol(ASTBladeSymbols.T_CLOSE_PARENTHESE);
            }
    	}
          }
        case 143: break;
        case 55: 
          { yypushback(4);
    pushState(ST_HTML_COMMENT);
    //return createFullSymbol(ASTBladeSymbols.T_INLINE_HTML);
          }
        case 144: break;
        case 39: 
          { directiveBracketBalance--; 
   phpParameterExpressionText += yytext();
   if (directiveBracketBalance == 0){
    pushState(ST_ARGUMENT_LIST);
    return createPhpParameterExpression(ASTBladeSymbols.T_PARAMETER_EXPRESSION);
   }
          }
        case 145: break;
        case 70: 
          { pushState(ST_BLADE_INCLUDE_ARGS);
    	return createFullSymbol(ASTBladeSymbols.T_BLADE_EXTENDS);
          }
        case 146: break;
        case 34: 
          { directiveBracketBalance = 0; 
   yypushback(1);
   pushState(ST_ARRAY_ARG);
          }
        case 147: break;
        case 68: 
          { popState();
        return createFullSymbol(ASTBladeSymbols.T_BLADE_APPEND);
          }
        case 148: break;
        case 62: 
          { popState();
        return createFullSymbol(ASTBladeSymbols.T_BLADE_STOP);
          }
        case 149: break;
        case 46: 
          { //yypushback(2);
    popState();
    return createFullSymbol(ASTBladeSymbols.T_INLINE_PHP);
          }
        case 150: break;
        case 60: 
          { pushState(ST_BLADE_INCLUDE_ARGS);
        return createFullSymbol(ASTBladeSymbols.T_BLADE_EACH);
          }
        case 151: break;
        case 42: 
          { String yytext = yytext();
    	popState();
    	return createFullSymbol(ASTBladeSymbols.T_INLINE_HTML);
          }
        case 152: break;
        case 63: 
          { popState();
        return createFullSymbol(ASTBladeSymbols.T_BLADE_SHOW);
          }
        case 153: break;
        case 26: 
          { yybegin(YYINITIAL);
    yypushback(1);
    int length = yylength();
    String tokenText = yytext();
    if (!tokenText.equals("@")){
        if (tokenText.length() == 0 && whitespaceCounter > 0){
            return createFakeWSSymbol(ASTBladeSymbols.T_INLINE_HTML);
        } else if (length > 0){
            return createFullSymbol(ASTBladeSymbols.T_INLINE_HTML);
        }
    }
          }
        case 154: break;
        case 2: 
          { // do nothing
          }
        case 155: break;
        case 49: 
          { yypushback(3);
    pushState(ST_PHP);
          }
        case 156: break;
        case 38: 
          { phpParameterExpressionText += yytext();
   directiveBracketBalance++;
          }
        case 157: break;
        case 57: 
          { popState();
    return createFullSymbol(ASTBladeSymbols.T_BLADE_COMMENT);
          }
        case 158: break;
        case 36: 
          { 
          }
        case 159: break;
        case 29: 
          { popState();
    phpParameterExpressionText = "";
    parameterList = new ArrayList<String>();
    whitespaceCounter = 0;
    fakeWhitespaceText = "";
    pushState(ST_ARGUMENT_LIST);
    directiveParBalance = 1;
    return createFullSymbol(ASTBladeSymbols.T_OPEN_PARENTHESE);
          }
        case 160: break;
        default: 
          if (zzInput == YYEOF && (zzStartRead == zzCurrentPos || zzLexicalState == ST_DOCBLOCK)) {
            zzAtEOF = true;
            zzDoEOF();
              {     return createSymbol(ASTBladeSymbols.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
