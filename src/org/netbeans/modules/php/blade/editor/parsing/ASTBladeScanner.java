/* The following code was generated by JFlex 1.4.3 on 12/18/21 9:44 AM */


package org.netbeans.modules.php.blade.editor.parsing;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
//import org.netbeans.modules.php.editor.parser.astnodes.*;
import org.netbeans.modules.web.common.api.ByteStack;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP2", "UUF_UNUSED_FIELD"})


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/18/21 9:44 AM from the specification file
 * <tt>ASTBladeScanner.flex</tt>
 */
public class ASTBladeScanner implements Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_DOCBLOCK = 14;
  public static final int ST_BLADE_DIRECTIVE = 8;
  public static final int ST_PHP_CONDITION_EXPRESSION = 18;
  public static final int ST_PHP = 26;
  public static final int ST_COMMENT = 28;
  public static final int ST_LOOKING_FOR_PATH = 2;
  public static final int ST_LOOKING_FOR_INCLUDED_VARS = 6;
  public static final int ST_BLADE_PARAMETER = 22;
  public static final int ST_STRING_SQUOTE = 12;
  public static final int ST_BLADE_ECHO = 30;
  public static final int ST_BLADE_ECHO_ESCAPED = 32;
  public static final int YYINITIAL = 0;
  public static final int ST_BLADE_INCLUDE_ARGS = 20;
  public static final int ST_INLINE_PHP = 24;
  public static final int ST_STRING_DBQUOTE = 10;
  public static final int ST_LOOKING_FOR_LABEL = 4;
  public static final int ST_PHP_LOOP_EXPRESSION = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6, 
     7,  7,  8,  8,  9,  9, 10, 10,  6,  6, 11, 11, 12, 12, 13, 13, 
    14, 14
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\5\1\0\1\7\1\4\22\0\1\7\1\14\1\41"+
    "\1\0\1\46\1\60\1\56\1\42\1\44\1\45\1\0\1\57\1\43"+
    "\1\15\1\3\1\0\12\1\1\51\1\6\1\62\1\47\1\50\1\63"+
    "\1\16\1\36\1\10\1\21\1\26\1\20\1\34\1\10\1\31\1\23"+
    "\2\10\1\30\1\10\1\25\1\24\1\40\1\10\1\35\1\17\1\22"+
    "\1\37\1\10\1\32\1\33\1\27\1\10\1\52\1\0\1\53\1\55"+
    "\1\2\1\0\1\36\1\10\1\21\1\26\1\20\1\34\1\10\1\31"+
    "\1\23\2\10\1\30\1\10\1\25\1\24\1\40\1\10\1\35\1\17"+
    "\1\22\1\37\1\10\1\32\1\33\1\27\1\10\1\12\1\54\1\13"+
    "\1\61\53\10\1\10\12\10\1\10\4\10\1\10\5\10\27\10\1\10"+
    "\37\10\1\10\10\10\u01c2\10\4\0\14\10\16\0\5\10\7\0\1\10"+
    "\1\0\1\10\201\0\5\10\1\0\2\10\2\0\4\10\10\0\1\10"+
    "\1\0\3\10\1\0\1\10\1\0\24\10\1\0\123\10\1\0\213\10"+
    "\10\0\236\10\11\0\46\10\2\0\1\10\7\0\47\10\110\0\33\10"+
    "\5\0\3\10\55\0\53\10\25\0\12\11\4\0\2\10\1\0\143\10"+
    "\1\0\1\10\17\0\2\10\7\0\2\10\12\11\3\10\2\0\1\10"+
    "\20\0\1\10\1\0\36\10\35\0\131\10\13\0\1\10\16\0\12\11"+
    "\41\10\11\0\2\10\4\0\1\10\5\0\26\10\4\0\1\10\11\0"+
    "\1\10\3\0\1\10\27\0\31\10\107\0\1\10\1\0\13\10\127\0"+
    "\66\10\3\0\1\10\22\0\1\10\7\0\12\10\4\0\12\11\1\0"+
    "\7\10\1\0\7\10\5\0\10\10\2\0\2\10\2\0\26\10\1\0"+
    "\7\10\1\0\1\10\3\0\4\10\3\0\1\10\20\0\1\10\15\0"+
    "\2\10\1\0\3\10\4\0\12\11\2\10\23\0\6\10\4\0\2\10"+
    "\2\0\26\10\1\0\7\10\1\0\2\10\1\0\2\10\1\0\2\10"+
    "\37\0\4\10\1\0\1\10\7\0\12\11\2\0\3\10\20\0\11\10"+
    "\1\0\3\10\1\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10"+
    "\3\0\1\10\22\0\1\10\17\0\2\10\4\0\12\11\25\0\10\10"+
    "\2\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10"+
    "\3\0\1\10\36\0\2\10\1\0\3\10\4\0\12\11\1\0\1\10"+
    "\21\0\1\10\1\0\6\10\3\0\3\10\1\0\4\10\3\0\2\10"+
    "\1\0\1\10\1\0\2\10\3\0\2\10\3\0\3\10\3\0\14\10"+
    "\26\0\1\10\25\0\12\11\25\0\10\10\1\0\3\10\1\0\27\10"+
    "\1\0\12\10\1\0\5\10\3\0\1\10\32\0\2\10\6\0\2\10"+
    "\4\0\12\11\25\0\10\10\1\0\3\10\1\0\27\10\1\0\12\10"+
    "\1\0\5\10\3\0\1\10\40\0\1\10\1\0\2\10\4\0\12\11"+
    "\1\0\2\10\22\0\10\10\1\0\3\10\1\0\51\10\2\0\1\10"+
    "\20\0\1\10\21\0\2\10\4\0\12\11\12\0\6\10\5\0\22\10"+
    "\3\0\30\10\1\0\11\10\1\0\1\10\2\0\7\10\72\0\60\10"+
    "\1\0\2\10\14\0\7\10\11\0\12\11\47\0\2\10\1\0\1\10"+
    "\2\0\2\10\1\0\1\10\2\0\1\10\6\0\4\10\1\0\7\10"+
    "\1\0\3\10\1\0\1\10\1\0\1\10\2\0\2\10\1\0\4\10"+
    "\1\0\2\10\11\0\1\10\2\0\5\10\1\0\1\10\11\0\12\11"+
    "\2\0\4\10\40\0\1\10\37\0\12\11\26\0\10\10\1\0\44\10"+
    "\33\0\5\10\163\0\53\10\24\0\1\10\12\11\6\0\6\10\4\0"+
    "\4\10\3\0\1\10\3\0\2\10\7\0\3\10\4\0\15\10\14\0"+
    "\1\10\1\0\12\11\6\0\46\10\1\0\1\10\5\0\1\10\2\0"+
    "\53\10\1\0\u014d\10\1\0\4\10\2\0\7\10\1\0\1\10\1\0"+
    "\4\10\2\0\51\10\1\0\4\10\2\0\41\10\1\0\4\10\2\0"+
    "\7\10\1\0\1\10\1\0\4\10\2\0\17\10\1\0\71\10\1\0"+
    "\4\10\2\0\103\10\45\0\20\10\20\0\125\10\14\0\u026c\10\2\0"+
    "\21\10\1\0\32\10\5\0\113\10\25\0\15\10\1\0\4\10\16\0"+
    "\22\10\16\0\22\10\16\0\15\10\1\0\3\10\17\0\64\10\43\0"+
    "\1\10\4\0\1\10\3\0\12\11\46\0\12\11\6\0\130\10\10\0"+
    "\51\10\1\0\1\10\5\0\106\10\12\0\35\10\51\0\12\11\36\10"+
    "\2\0\5\10\13\0\54\10\25\0\7\10\10\0\12\11\46\0\27\10"+
    "\11\0\65\10\53\0\12\11\6\0\12\11\15\0\1\10\135\0\57\10"+
    "\21\0\7\10\4\0\12\11\51\0\36\10\15\0\2\10\12\11\54\10"+
    "\32\0\44\10\34\0\12\11\3\0\3\10\12\11\44\10\153\0\4\10"+
    "\1\0\4\10\3\0\2\10\11\0\300\10\100\0\u0116\10\2\0\6\10"+
    "\2\0\46\10\2\0\6\10\2\0\10\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\37\10\2\0\65\10\1\0\7\10\1\0\1\10"+
    "\3\0\3\10\1\0\7\10\3\0\4\10\2\0\6\10\4\0\15\10"+
    "\5\0\3\10\1\0\7\10\164\0\1\10\15\0\1\10\20\0\15\10"+
    "\145\0\1\10\4\0\1\10\2\0\12\10\1\0\1\10\3\0\5\10"+
    "\6\0\1\10\1\0\1\10\1\0\1\10\1\0\4\10\1\0\13\10"+
    "\2\0\4\10\5\0\5\10\4\0\1\10\64\0\2\10\u0a7b\0\57\10"+
    "\1\0\57\10\1\0\205\10\6\0\4\10\3\0\2\10\14\0\46\10"+
    "\1\0\1\10\5\0\1\10\2\0\70\10\7\0\1\10\20\0\27\10"+
    "\11\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10"+
    "\1\0\7\10\1\0\7\10\1\0\7\10\120\0\1\10\u01d5\0\2\10"+
    "\52\0\5\10\5\0\2\10\4\0\126\10\6\0\3\10\1\0\132\10"+
    "\1\0\4\10\5\0\51\10\3\0\136\10\21\0\33\10\65\0\20\10"+
    "\u0200\0\u19b6\10\112\0\u51cd\10\63\0\u048d\10\103\0\56\10\2\0\u010d\10"+
    "\3\0\20\10\12\11\2\10\24\0\57\10\20\0\31\10\10\0\106\10"+
    "\61\0\11\10\2\0\147\10\2\0\4\10\1\0\4\10\14\0\13\10"+
    "\115\0\12\10\1\0\3\10\1\0\4\10\1\0\27\10\35\0\64\10"+
    "\16\0\62\10\34\0\12\11\30\0\6\10\3\0\1\10\4\0\12\11"+
    "\34\10\12\0\27\10\31\0\35\10\7\0\57\10\34\0\1\10\12\11"+
    "\46\0\51\10\27\0\3\10\1\0\10\10\4\0\12\11\6\0\27\10"+
    "\3\0\1\10\5\0\60\10\1\0\1\10\3\0\2\10\2\0\5\10"+
    "\2\0\1\10\1\0\1\10\30\0\3\10\2\0\13\10\7\0\3\10"+
    "\14\0\6\10\2\0\6\10\2\0\6\10\11\0\7\10\1\0\7\10"+
    "\221\0\43\10\15\0\12\11\6\0\u2ba4\10\14\0\27\10\4\0\61\10"+
    "\u2104\0\u016e\10\2\0\152\10\46\0\7\10\14\0\5\10\5\0\1\10"+
    "\1\0\12\10\1\0\15\10\1\0\5\10\1\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\154\10\41\0\u016b\10\22\0\100\10\2\0\66\10"+
    "\50\0\14\10\164\0\5\10\1\0\207\10\23\0\12\11\7\0\32\10"+
    "\6\0\32\10\13\0\131\10\3\0\6\10\2\0\6\10\2\0\6\10"+
    "\2\0\3\10\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\2\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\2\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\2\1\36\1\6\1\2\1\21\1\22\3\2\2\37"+
    "\1\11\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\5\2\1\47\2\50\3\47\2\50\2\47\1\0\1\51"+
    "\1\0\1\52\1\1\2\0\2\4\2\11\1\53\1\54"+
    "\7\55\1\56\1\0\1\57\2\0\2\11\2\0\1\60"+
    "\5\0\2\47\1\61\2\0\2\47\2\0\1\62\1\0"+
    "\1\63\1\0\1\11\6\55\1\64\3\55\1\11\1\0"+
    "\1\65\1\47\1\65\1\0\1\47\1\61\1\66\1\0"+
    "\7\55\1\67\1\55\1\70\1\71\1\72\1\55\1\73"+
    "\10\55\1\0\2\55\1\74\4\55\1\75\1\55\1\0"+
    "\2\55\1\76\1\77\3\55\1\0\1\100\2\55\1\101"+
    "\1\102\1\103\1\0\2\55\1\0\2\55\1\0\1\104"+
    "\1\105\1\0\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u0340\0\u0374\0\u03a8\0\u0138\0\u03dc\0\u0410\0\u0444\0\u0478"+
    "\0\u04ac\0\u04e0\0\u0138\0\u04e0\0\u0138\0\u0138\0\u0138\0\u0138"+
    "\0\u0138\0\u0138\0\u0138\0\u0514\0\u0548\0\u0138\0\u0138\0\u0138"+
    "\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138"+
    "\0\u0138\0\u057c\0\u0138\0\u05b0\0\u05e4\0\u0138\0\u0618\0\u064c"+
    "\0\u0680\0\u06b4\0\u06e8\0\u06e8\0\u0138\0\u0138\0\u0138\0\u0138"+
    "\0\u0138\0\u0138\0\u0138\0\u05e4\0\u071c\0\u0750\0\u0784\0\u07b8"+
    "\0\u07ec\0\u0820\0\u0854\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924"+
    "\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0138\0\u0a28\0\u0a5c"+
    "\0\u0a90\0\u0478\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0138\0\u0b94"+
    "\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0618"+
    "\0\u0138\0\u064c\0\u0680\0\u0d34\0\u0d68\0\u071c\0\u0750\0\u0138"+
    "\0\u0784\0\u07b8\0\u0d9c\0\u07ec\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c"+
    "\0\u08bc\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0138\0\u0fa4"+
    "\0\u0138\0\u0478\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc"+
    "\0\u1110\0\u0b94\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u0e6c"+
    "\0\u1248\0\u0138\0\u127c\0\u12b0\0\u0138\0\u0138\0\u12e4\0\u1318"+
    "\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8"+
    "\0\u0138\0\u0138\0\u0138\0\u14ec\0\u0b94\0\u1520\0\u1554\0\u1588"+
    "\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728"+
    "\0\u0b94\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u0b94\0\u182c\0\u1860"+
    "\0\u1894\0\u18c8\0\u18fc\0\u0b94\0\u1930\0\u1964\0\u1998\0\u19cc"+
    "\0\u0b94\0\u1a00\0\u1a34\0\u0b94\0\u0b94\0\u0b94\0\u1a68\0\u1a9c"+
    "\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u0b94\0\u0b94\0\u1bd4"+
    "\0\u0138";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\12\20\1\21\1\22\1\23\1\20\1\24\43\20\1\25"+
    "\1\20\1\0\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\27\3\0\1\35\1\36\1\0\22\27\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\0\1\61\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\27\3\61\1\35\1\36\1\61\22\27"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\3\61\1\62\1\63\1\31\1\32\1\33"+
    "\1\34\1\62\3\61\1\35\1\36\1\64\22\62\1\37"+
    "\1\40\1\41\1\42\1\43\1\65\1\66\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\42\61\1\67\64\61\1\70\21\61\64\0\4\71"+
    "\1\72\1\73\1\71\1\74\35\71\1\75\16\71\44\76"+
    "\1\77\1\100\16\76\41\61\1\37\1\40\1\101\1\42"+
    "\1\102\57\61\1\37\1\40\1\61\1\42\1\103\1\104"+
    "\15\61\63\105\1\106\15\107\1\110\46\107\4\111\1\112"+
    "\1\113\1\111\1\114\3\111\1\115\50\111\4\116\1\117"+
    "\1\120\1\116\1\121\4\116\1\122\47\116\12\20\2\0"+
    "\2\20\1\0\43\20\1\123\1\20\12\0\1\124\1\0"+
    "\1\125\62\0\1\126\50\0\12\20\2\0\1\127\1\20"+
    "\1\0\43\20\1\123\61\20\1\0\1\20\1\0\1\130"+
    "\1\0\1\26\1\131\1\132\61\0\2\27\5\0\2\27"+
    "\5\0\22\27\24\0\1\133\66\0\1\134\1\135\1\0"+
    "\1\34\60\0\1\134\1\34\1\0\1\34\56\0\1\136"+
    "\5\0\1\136\6\0\22\136\73\0\1\137\14\0\2\62"+
    "\5\0\2\62\5\0\22\62\25\0\1\140\5\0\1\140"+
    "\6\0\1\141\1\142\2\140\1\143\3\140\1\144\4\140"+
    "\1\145\3\140\1\146\25\0\1\147\5\0\1\147\6\0"+
    "\22\147\23\0\41\150\1\151\22\150\42\152\1\151\21\152"+
    "\45\153\1\75\22\153\1\154\1\155\1\153\1\74\35\153"+
    "\1\75\22\153\1\154\1\74\1\153\1\74\35\153\1\75"+
    "\16\153\63\156\1\157\50\156\1\160\12\156\1\157\15\161"+
    "\1\162\63\161\1\163\46\161\13\164\1\165\54\164\1\166"+
    "\1\167\1\164\1\114\3\164\1\165\54\164\1\166\1\114"+
    "\1\164\1\114\3\164\1\165\63\164\1\170\50\164\14\171"+
    "\1\172\53\171\1\173\1\174\1\171\1\121\4\171\1\172"+
    "\53\171\1\173\1\121\1\171\1\121\4\171\1\172\63\171"+
    "\1\175\47\171\60\20\1\0\1\20\17\0\1\176\62\0"+
    "\1\177\47\0\12\20\1\0\1\126\2\20\1\0\43\20"+
    "\1\123\1\20\40\0\1\200\6\0\1\201\15\0\1\26"+
    "\63\0\1\133\1\202\65\0\1\134\1\203\1\0\1\34"+
    "\60\0\1\134\1\34\1\32\1\34\55\0\2\136\5\0"+
    "\2\136\5\0\22\136\24\0\2\140\5\0\2\140\5\0"+
    "\22\140\24\0\2\140\5\0\2\140\5\0\1\140\1\204"+
    "\10\140\1\205\7\140\24\0\2\140\5\0\2\140\5\0"+
    "\6\140\1\206\2\140\1\207\2\140\1\210\5\140\24\0"+
    "\2\140\5\0\2\140\5\0\6\140\1\211\6\140\1\212"+
    "\4\140\24\0\2\140\5\0\2\140\5\0\4\140\1\213"+
    "\15\140\24\0\2\140\5\0\2\140\5\0\5\140\1\214"+
    "\14\140\24\0\2\140\5\0\2\140\5\0\12\140\1\215"+
    "\7\140\24\0\2\147\5\0\2\147\5\0\22\147\23\0"+
    "\4\153\1\154\1\216\1\153\1\74\35\153\1\75\22\153"+
    "\1\154\1\74\1\73\1\74\35\153\1\75\16\153\13\161"+
    "\1\217\1\161\1\163\46\161\13\164\1\220\54\164\1\166"+
    "\1\221\1\164\1\114\3\164\1\165\54\164\1\166\1\114"+
    "\1\113\1\114\3\164\1\165\50\164\13\0\1\222\50\0"+
    "\14\171\1\223\53\171\1\173\1\224\1\171\1\121\4\171"+
    "\1\172\53\171\1\173\1\121\1\120\1\121\4\171\1\172"+
    "\62\171\1\225\1\223\47\171\15\0\1\226\77\0\1\227"+
    "\36\0\1\134\3\34\55\0\2\140\5\0\2\140\5\0"+
    "\2\140\1\230\17\140\24\0\2\140\5\0\2\140\5\0"+
    "\5\140\1\231\14\140\24\0\2\140\5\0\2\140\5\0"+
    "\7\140\1\232\12\140\24\0\2\140\5\0\2\140\5\0"+
    "\1\233\21\140\24\0\2\140\5\0\2\140\5\0\3\140"+
    "\1\234\16\140\24\0\2\140\5\0\2\140\5\0\2\140"+
    "\1\235\17\140\24\0\2\140\5\0\2\140\5\0\1\140"+
    "\1\236\20\140\24\0\2\140\5\0\2\140\5\0\16\140"+
    "\1\237\3\140\24\0\2\140\5\0\2\140\5\0\21\140"+
    "\1\240\23\0\4\153\1\154\3\74\35\153\1\75\16\153"+
    "\13\161\1\241\1\161\1\162\46\161\4\164\1\166\3\114"+
    "\3\164\1\165\50\164\13\171\1\242\1\223\53\171\1\173"+
    "\3\121\4\171\1\172\47\171\40\0\1\243\24\0\2\140"+
    "\5\0\2\140\5\0\3\140\1\244\16\140\24\0\2\140"+
    "\5\0\2\140\5\0\13\140\1\245\6\140\24\0\2\140"+
    "\5\0\2\140\5\0\1\246\3\140\1\247\10\140\1\250"+
    "\4\140\24\0\2\140\5\0\2\140\5\0\1\140\1\251"+
    "\20\140\24\0\2\140\5\0\2\140\5\0\1\140\1\252"+
    "\20\140\24\0\2\140\5\0\2\140\5\0\11\140\1\253"+
    "\10\140\24\0\2\140\5\0\2\140\5\0\11\140\1\254"+
    "\10\140\24\0\2\140\5\0\2\140\5\0\1\140\1\255"+
    "\20\140\24\0\2\140\1\0\2\256\1\0\1\256\2\140"+
    "\5\0\22\140\24\0\2\140\5\0\2\140\5\0\4\140"+
    "\1\257\15\140\24\0\2\140\5\0\2\140\5\0\1\140"+
    "\1\260\20\140\24\0\2\140\5\0\2\140\5\0\15\140"+
    "\1\261\4\140\24\0\2\140\5\0\2\140\5\0\5\140"+
    "\1\262\14\140\24\0\2\140\5\0\2\140\5\0\4\140"+
    "\1\263\15\140\24\0\2\140\5\0\2\140\5\0\6\140"+
    "\1\264\13\140\24\0\2\140\5\0\2\140\5\0\20\140"+
    "\1\265\1\140\24\0\2\140\5\0\2\140\5\0\7\140"+
    "\1\266\12\140\24\0\2\140\5\0\2\140\5\0\17\140"+
    "\1\267\2\140\23\0\16\256\1\270\45\256\1\0\2\140"+
    "\5\0\2\140\5\0\5\140\1\271\14\140\24\0\2\140"+
    "\5\0\2\140\5\0\2\140\1\272\17\140\24\0\2\140"+
    "\5\0\2\140\5\0\16\140\1\273\3\140\24\0\2\140"+
    "\5\0\2\140\5\0\15\140\1\274\4\140\24\0\2\140"+
    "\5\0\2\140\5\0\7\140\1\275\12\140\24\0\2\140"+
    "\5\0\2\140\5\0\7\140\1\276\12\140\24\0\2\140"+
    "\5\0\2\140\5\0\2\140\1\277\17\140\23\0\16\256"+
    "\1\270\1\256\1\300\43\256\1\0\2\140\5\0\2\140"+
    "\5\0\6\140\1\301\13\140\24\0\2\140\5\0\2\140"+
    "\5\0\3\140\1\302\16\140\24\0\2\140\5\0\2\140"+
    "\5\0\1\140\1\303\20\140\24\0\2\140\5\0\2\140"+
    "\5\0\1\304\21\140\24\0\2\140\5\0\2\140\5\0"+
    "\1\140\1\305\20\140\24\0\2\140\5\0\2\140\5\0"+
    "\12\140\1\306\7\140\23\0\16\256\1\270\6\256\1\307"+
    "\36\256\1\0\2\140\5\0\2\140\5\0\4\140\1\310"+
    "\15\140\24\0\2\140\5\0\2\140\5\0\17\140\1\311"+
    "\2\140\23\0\16\256\1\270\7\256\1\312\35\256\1\0"+
    "\2\140\5\0\2\140\5\0\5\140\1\313\14\140\24\0"+
    "\2\140\5\0\2\140\5\0\2\140\1\314\17\140\23\0"+
    "\16\256\1\270\21\256\1\315\23\256\1\0\2\140\5\0"+
    "\2\140\5\0\6\140\1\316\13\140\24\0\2\140\5\0"+
    "\2\140\5\0\12\140\1\317\7\140\23\0\16\256\1\270"+
    "\12\256\1\320\50\256\1\270\21\256\1\321\23\256";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7176];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\10\10\0\4\1\1\11\6\1\1\11\1\1"+
    "\7\11\2\1\14\11\1\1\1\11\2\1\1\11\6\1"+
    "\7\11\17\1\1\0\1\1\1\0\1\11\1\1\2\0"+
    "\5\1\1\11\10\1\1\0\1\11\2\0\2\1\2\0"+
    "\1\11\5\0\3\1\2\0\2\1\2\0\1\11\1\0"+
    "\1\11\1\0\14\1\1\0\2\1\1\11\1\0\1\1"+
    "\2\11\1\0\11\1\3\11\12\1\1\0\11\1\1\0"+
    "\7\1\1\0\6\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private ByteStack stack = new ByteStack();
    private char yy_old_buffer[] = new char[ZZ_BUFFERSIZE];
    private int yy_old_pushbackPos;
    private int whitespaceEndPosition;
    private int directiveParBalance = 0;
    private String phpConditionText = "";

    public void reset(java.io.Reader reader) {
        yyreset(reader);
    }

    public void setState(int state) {
        yybegin(state);
    }

    public int getState() {
        return yystate();
    }

    private void pushState(int state) {
        stack.push(zzLexicalState);
        yybegin(state);
    }

    private void popState() {
        yybegin(stack.pop());
    }

    public int getCurrentLine() {
        return yyline;
    }

    protected int getTokenStartPosition() {
        return zzStartRead - zzPushbackPos;
    }

    protected int getTokenLength() {
        return zzMarkedPos - zzStartRead;
    }

    public int getLength() {
        return zzEndRead - zzPushbackPos;
    }

    private Symbol createFullSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = yytext();
        return symbol;
    }

    private Symbol createConditionSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = phpConditionText;
        phpConditionText = "";
        return symbol;
    }

    private Symbol createSymbol(int symbolNumber) {
        int leftPosition = getTokenStartPosition();
        Symbol symbol = new Symbol(symbolNumber, leftPosition, leftPosition + getTokenLength());
        return symbol;
    }     
    public int getWhitespaceEndPosition() {
        return whitespaceEndPosition;
    }
    private void error(String message) {
        System.out.println("Error at line "+(yyline+1)+", column "+(yycolumn+1)+" : "+message);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ASTBladeScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ASTBladeScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1766) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
//    if (!zzEOFDone) {
//      zzEOFDone = true;
//      yyclose();
//    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 54: 
          { yypushback(4);
    pushState(ST_COMMENT);
          }
        case 71: break;
        case 21: 
          { return createSymbol(ASTBladeSymbols.T_OPEN_RECT);
          }
        case 72: break;
        case 28: 
          { return createSymbol(ASTBladeSymbols.T_TILDA);
          }
        case 73: break;
        case 26: 
          { return createSymbol(ASTBladeSymbols.T_PLUS);
          }
        case 74: break;
        case 66: 
          { pushState(ST_BLADE_INCLUDE_ARGS);
       return createFullSymbol(ASTBladeSymbols.T_BLADE_INCLUDE);
          }
        case 75: break;
        case 4: 
          { return createFullSymbol(ASTBladeSymbols.T_NUMBER);
          }
        case 76: break;
        case 69: 
          { popState();
        return createFullSymbol(ASTBladeSymbols.T_BLADE_ENDFOREACH);
          }
        case 77: break;
        case 55: 
          { pushState(ST_PHP_LOOP_EXPRESSION);
        return createFullSymbol(ASTBladeSymbols.T_BLADE_FOR);
          }
        case 78: break;
        case 31: 
          { String yytext = yytext();
		popState();
		popState();
		return createSymbol(ASTBladeSymbols.T_INLINE_HTML);
          }
        case 79: break;
        case 3: 
          { pushState(ST_BLADE_DIRECTIVE);
	if (yylength() > 0){
		yypushback(1);
		return createFullSymbol(ASTBladeSymbols.T_INLINE_HTML);
	}
          }
        case 80: break;
        case 56: 
          { popState();
    return createFullSymbol(ASTBladeSymbols.T_BLADE_COMMENT);
          }
        case 81: break;
        case 64: 
          { pushState(ST_BLADE_INCLUDE_ARGS);
        return createFullSymbol(ASTBladeSymbols.T_BLADE_SECTION);
          }
        case 82: break;
        case 24: 
          { return createSymbol(ASTBladeSymbols.T_KOVA);
          }
        case 83: break;
        case 2: 
          { // do nothing
          }
        case 84: break;
        case 18: 
          { return createSymbol(ASTBladeSymbols.T_EQUAL);
          }
        case 85: break;
        case 27: 
          { return createSymbol(ASTBladeSymbols.T_PRECENT);
          }
        case 86: break;
        case 16: 
          { directiveParBalance--;
    	if (directiveParBalance == 0){
    		popState();
    	}
    	return createSymbol(ASTBladeSymbols.T_CLOSE_PARENTHESE);
          }
        case 87: break;
        case 47: 
          { popState(); 
   return createFullSymbol(ASTBladeSymbols.T_STRING);
          }
        case 88: break;
        case 30: 
          { //to be refactored
        return createFullSymbol(ASTBladeSymbols.T_STRING);
          }
        case 89: break;
        case 25: 
          { return createSymbol(ASTBladeSymbols.T_REFERENCE);
          }
        case 90: break;
        case 37: 
          { String yytext = yytext();
    	directiveParBalance--;
    	if (directiveParBalance == 0){
            //exit out of ST_DIRECTIVE
    		popState();
    		//maybe use yyreset ?
            try {
                    popState();
                } catch (Exception ex) {

            }
    	}
    	return createSymbol(ASTBladeSymbols.T_CLOSE_PARENTHESE);
          }
        case 91: break;
        case 50: 
          { String yytext = yytext();
    pushState(ST_BLADE_ECHO_ESCAPED);
    return createFullSymbol(ASTBladeSymbols.T_BLADE_OPEN_ECHO);
          }
        case 92: break;
        case 46: 
          { //to be refactored
        return createFullSymbol(ASTBladeSymbols.T_VARIABLE);
          }
        case 93: break;
        case 51: 
          { yypushback(3);
    pushState(ST_PHP);
          }
        case 94: break;
        case 23: 
          { return createSymbol(ASTBladeSymbols.T_OR);
          }
        case 95: break;
        case 11: 
          { return createSymbol(ASTBladeSymbols.T_MINUS);
          }
        case 96: break;
        case 48: 
          { //yypushback(2);
    popState();
    return createSymbol(ASTBladeSymbols.T_INLINE_PHP);
          }
        case 97: break;
        case 40: 
          { String yytext = yytext();
    popState();
    return createFullSymbol(ASTBladeSymbols.T_INLINE_HTML);
          }
        case 98: break;
        case 19: 
          { return createSymbol(ASTBladeSymbols.T_LGREATER);
          }
        case 99: break;
        case 6: 
          { return createSymbol(ASTBladeSymbols.T_NEKUDA);
          }
        case 100: break;
        case 53: 
          { String yytext = yytext();
    yypushback(2);
    return createFullSymbol(ASTBladeSymbols.T_BLADE_PHP_ECHO);
          }
        case 101: break;
        case 17: 
          { return createSymbol(ASTBladeSymbols.T_DOLLAR);
          }
        case 102: break;
        case 15: 
          { directiveParBalance++;
    	return createSymbol(ASTBladeSymbols.T_OPEN_PARENTHESE);
          }
        case 103: break;
        case 22: 
          { return createSymbol(ASTBladeSymbols.T_CLOSE_RECT);
          }
        case 104: break;
        case 70: 
          { popState();
        return createFullSymbol(ASTBladeSymbols.T_BLADE_INLINE_PHP);
          }
        case 105: break;
        case 59: 
          { popState();
     return createFullSymbol(ASTBladeSymbols.T_BLADE_SHOW);
          }
        case 106: break;
        case 9: 
          { whitespaceEndPosition = getTokenStartPosition() + yylength();
          }
        case 107: break;
        case 44: 
          { {return createSymbol(ASTBladeSymbols.T_ARRAY_ASSIGN);}
          }
        case 108: break;
        case 36: 
          { pushState(ST_BLADE_PARAMETER);
        return createSymbol(ASTBladeSymbols.T_COMMA);
          }
        case 109: break;
        case 14: 
          { return createSymbol(ASTBladeSymbols.T_COMMA);
          }
        case 110: break;
        case 67: 
          { pushState(ST_PHP_LOOP_EXPRESSION);
            return createFullSymbol(ASTBladeSymbols.T_BLADE_FOREACH);
          }
        case 111: break;
        case 13: 
          { yypushback(1);pushState(ST_STRING_SQUOTE);
          }
        case 112: break;
        case 1: 
          { return createSymbol(ASTBladeSymbols.T_INLINE_HTML);
          }
        case 113: break;
        case 57: 
          { String yytext = yytext();
    yypushback(3);
    return createFullSymbol(ASTBladeSymbols.T_BLADE_PHP_ECHO);
          }
        case 114: break;
        case 65: 
          { return createFullSymbol(ASTBladeSymbols.T_BLADE_EXTENDS);
          }
        case 115: break;
        case 63: 
          { pushState(ST_PHP_CONDITION_EXPRESSION);
        return createFullSymbol(ASTBladeSymbols.T_BLADE_ELSEIF);
          }
        case 116: break;
        case 8: 
          { return createSymbol(ASTBladeSymbols.T_SEMICOLON);
          }
        case 117: break;
        case 61: 
          { popState();
    return createFullSymbol(ASTBladeSymbols.T_BLADE_YIELD);
          }
        case 118: break;
        case 20: 
          { return createSymbol(ASTBladeSymbols.T_NEKUDOTAIM);
          }
        case 119: break;
        case 29: 
          { return createSymbol(ASTBladeSymbols.T_RGREATER);
          }
        case 120: break;
        case 38: 
          { directiveParBalance--;
    	if (directiveParBalance == 0){
    		popState();
    		popState();
    	}
    	return createSymbol(ASTBladeSymbols.T_CLOSE_PARENTHESE);
          }
        case 121: break;
        case 35: 
          {
              phpConditionText += yytext();
              directiveParBalance--;
    if (directiveParBalance == 0){
  		 popState();
   		 popState();
   		 return createConditionSymbol(ASTBladeSymbols.T_PHP_CONDITION_EXPRESSION);
    }
          }
        case 122: break;
        case 5: 
          { return createFullSymbol(ASTBladeSymbols.T_STRING_VARNAME);
          }
        case 123: break;
        case 34: 
          { directiveParBalance++;
          phpConditionText += yytext();
          }
        case 124: break;
        case 68: 
          { popState();
    return createFullSymbol(ASTBladeSymbols.T_BLADE_ENDSECTION);
          }
        case 125: break;
        case 58: 
          { yypushback(5);
    pushState(ST_PHP);
          }
        case 126: break;
        case 52: 
          { pushState(ST_PHP_CONDITION_EXPRESSION);
        return createFullSymbol(ASTBladeSymbols.T_BLADE_IF);
          }
        case 127: break;
        case 12: 
          { yypushback(1);pushState(ST_STRING_DBQUOTE);
          }
        case 128: break;
        case 42: 
          { String yytext = yytext();
    return createFullSymbol(ASTBladeSymbols.T_BLADE_CLOSE_ECHO);
          }
        case 129: break;
        case 41: 
          { String yytext = yytext();
    pushState(ST_BLADE_ECHO);
    return createFullSymbol(ASTBladeSymbols.T_BLADE_OPEN_ECHO);
          }
        case 130: break;
        case 10: 
          { return createSymbol(ASTBladeSymbols.T_NOT);
          }
        case 131: break;
        case 49: 
          { String yytext = yytext();
    popState();
    return createFullSymbol(ASTBladeSymbols.T_BLADE_CLOSE_ECHO);
          }
        case 132: break;
        case 62: 
          { popState();
        return createFullSymbol(ASTBladeSymbols.T_BLADE_ENDFOR);
          }
        case 133: break;
        case 60: 
          { popState();
        return createFullSymbol(ASTBladeSymbols.T_BLADE_ENDIF);
          }
        case 134: break;
        case 7: 
          { String yytext = yytext();
		directiveParBalance = 0;
		popState();
		return createSymbol(ASTBladeSymbols.T_INLINE_HTML);
          }
        case 135: break;
        case 45: 
          { return createFullSymbol(ASTBladeSymbols.T_BLADE_DIRECTIVE);
          }
        case 136: break;
        case 33: 
          { String yytext = yytext();
	int debug = 1;
	phpConditionText += yytext;
          }
        case 137: break;
        case 32: 
          { popState();
	popState();
	return createFullSymbol(ASTBladeSymbols.T_PHP_LOOP_EXPRESSION);
          }
        case 138: break;
        case 43: 
          { return createFullSymbol(ASTBladeSymbols.T_VARIABLE);
          }
        case 139: break;
        case 39: 
          { //no break;
          }
        case 140: break;
        default: 
          if (zzInput == YYEOF && (zzStartRead == zzCurrentPos || zzLexicalState == ST_DOCBLOCK)) {
            zzAtEOF = true;
            zzDoEOF();
              {     return createSymbol(ASTBladeSymbols.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
