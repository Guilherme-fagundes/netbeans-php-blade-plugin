/* The following code was generated by JFlex 1.6.1 */

 /*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2016 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2016 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.blade.editor.lexer;

import java.util.Objects;
import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;
import org.netbeans.modules.web.common.api.ByteStack;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/LOCAL_P5_APPS/lmc/blade-php/tools/BladeColoringLexer.flex</tt>
 */
public class BladeColoringLexer {
/** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ST_HTML = 2;
  public static final int ST_PHP = 4;
  public static final int ST_PHP_ECHO = 6;
  public static final int ST_INLINE_PHP = 8;
  public static final int ST_BLADE_PHP = 10;
  public static final int ST_BLADE_ECHO = 12;
  public static final int ST_BLADE_ECHO_ESCAPED = 14;
  public static final int ST_DIRECTIVE = 16;
  public static final int ST_DIRECTIVE_ARGUMENTS = 18;
  public static final int ST_COMMENT = 20;
  public static final int ST_HIGHLIGHTING_ERROR = 22;
  public static final int ST_CLOSE_BLADE_PHP = 24;
  public static final int ST_PHP_LOOKING_FOR_DIRECTIVE_ARG = 26;
  public static final int ST_PHP_LOOKING_FOR_DIRECTIVE_PARAM = 28;
  public static final int ST_PHP_LOOP_EXPR = 30;
  public static final int ST_DIRECTIVE_ARG = 32;
  public static final int ST_PHP_COND_EXPR = 34;
  public static final int ST_CLOSE_PARANTHEIS = 36;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  0,  0,  4,  4,  5,  5,  6,  6, 
     0,  0,  0,  0,  7,  7,  8,  8,  0,  0,  9,  9,  0,  0, 10, 10, 
    11, 11, 12, 12, 13, 13
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\54\1\54\1\2\22\0\1\1\1\6\1\45"+
    "\2\0\1\24\1\0\1\46\1\51\1\52\3\0\1\7\2\0\12\11"+
    "\1\0\1\23\1\13\1\44\1\17\1\14\1\12\1\41\1\10\1\31"+
    "\1\22\1\20\1\53\1\42\1\16\1\35\2\10\1\40\1\10\1\21"+
    "\1\50\1\15\1\10\1\33\1\27\1\37\1\43\3\10\1\47\1\10"+
    "\4\0\1\10\1\0\1\41\1\10\1\32\1\22\1\20\1\53\1\42"+
    "\1\16\1\36\2\10\1\40\1\10\1\21\1\50\1\26\1\10\1\34"+
    "\1\30\1\25\1\43\3\10\1\47\1\10\1\4\1\0\1\5\1\0"+
    "\6\10\1\55\44\10\1\10\12\10\1\10\4\10\1\10\5\10\27\10"+
    "\1\10\37\10\1\10\10\10\60\10\2\35\115\10\1\27\u0142\10\4\0"+
    "\14\10\16\0\5\10\7\0\1\10\1\0\1\10\201\0\5\10\1\0"+
    "\2\10\2\0\4\10\1\0\1\10\6\0\1\10\1\0\3\10\1\0"+
    "\1\10\1\0\24\10\1\0\123\10\1\0\213\10\10\0\246\10\1\0"+
    "\46\10\2\0\1\10\7\0\47\10\110\0\33\10\5\0\3\10\55\0"+
    "\53\10\25\0\12\11\4\0\2\10\1\0\143\10\1\0\1\10\17\0"+
    "\2\10\7\0\2\10\12\11\3\10\2\0\1\10\20\0\1\10\1\0"+
    "\36\10\35\0\131\10\13\0\1\10\16\0\12\11\41\10\11\0\2\10"+
    "\4\0\1\10\5\0\26\10\4\0\1\10\11\0\1\10\3\0\1\10"+
    "\27\0\31\10\107\0\23\10\121\0\66\10\3\0\1\10\22\0\1\10"+
    "\7\0\12\10\4\0\12\11\1\0\20\10\4\0\10\10\2\0\2\10"+
    "\2\0\26\10\1\0\7\10\1\0\1\10\3\0\4\10\3\0\1\10"+
    "\20\0\1\10\15\0\2\10\1\0\3\10\4\0\12\11\2\10\23\0"+
    "\6\10\4\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0"+
    "\2\10\1\0\2\10\37\0\4\10\1\0\1\10\7\0\12\11\2\0"+
    "\3\10\20\0\11\10\1\0\3\10\1\0\26\10\1\0\7\10\1\0"+
    "\2\10\1\0\5\10\3\0\1\10\22\0\1\10\17\0\2\10\4\0"+
    "\12\11\25\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0"+
    "\2\10\1\0\5\10\3\0\1\10\36\0\2\10\1\0\3\10\4\0"+
    "\12\11\1\0\1\10\21\0\1\10\1\0\6\10\3\0\3\10\1\0"+
    "\4\10\3\0\2\10\1\0\1\10\1\0\2\10\3\0\2\10\3\0"+
    "\3\10\3\0\14\10\26\0\1\10\25\0\12\11\25\0\10\10\1\0"+
    "\3\10\1\0\27\10\1\0\20\10\3\0\1\10\32\0\2\10\6\0"+
    "\2\10\4\0\12\11\25\0\10\10\1\0\3\10\1\0\27\10\1\0"+
    "\12\10\1\0\5\10\3\0\1\10\40\0\1\10\1\0\2\10\4\0"+
    "\12\11\1\0\2\10\22\0\10\10\1\0\3\10\1\0\51\10\2\0"+
    "\1\10\20\0\1\10\21\0\2\10\4\0\12\11\12\0\6\10\5\0"+
    "\22\10\3\0\30\10\1\0\11\10\1\0\1\10\2\0\7\10\37\0"+
    "\12\11\21\0\60\10\1\0\2\10\14\0\7\10\11\0\12\11\47\0"+
    "\2\10\1\0\1\10\2\0\2\10\1\0\1\10\2\0\1\10\6\0"+
    "\4\10\1\0\7\10\1\0\3\10\1\0\1\10\1\0\1\10\2\0"+
    "\2\10\1\0\4\10\1\0\2\10\11\0\1\10\2\0\5\10\1\0"+
    "\1\10\11\0\12\11\2\0\4\10\40\0\1\10\37\0\12\11\26\0"+
    "\10\10\1\0\44\10\33\0\5\10\163\0\53\10\24\0\1\10\12\11"+
    "\6\0\6\10\4\0\4\10\3\0\1\10\3\0\2\10\7\0\3\10"+
    "\4\0\15\10\14\0\1\10\1\0\12\11\6\0\46\10\1\0\1\10"+
    "\5\0\1\10\2\0\53\10\1\0\u014d\10\1\0\4\10\2\0\7\10"+
    "\1\0\1\10\1\0\4\10\2\0\51\10\1\0\4\10\2\0\41\10"+
    "\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\17\10"+
    "\1\0\71\10\1\0\4\10\2\0\103\10\45\0\20\10\20\0\125\10"+
    "\14\0\u026c\10\2\0\21\10\1\0\32\10\5\0\113\10\6\0\10\10"+
    "\7\0\15\10\1\0\4\10\16\0\22\10\16\0\22\10\16\0\15\10"+
    "\1\0\3\10\17\0\64\10\43\0\1\10\4\0\1\10\3\0\12\11"+
    "\46\0\12\11\6\0\130\10\10\0\51\10\1\0\1\10\5\0\106\10"+
    "\12\0\37\10\47\0\12\11\36\10\2\0\5\10\13\0\54\10\25\0"+
    "\7\10\10\0\12\11\46\0\27\10\11\0\65\10\53\0\12\11\6\0"+
    "\12\11\15\0\1\10\135\0\57\10\21\0\7\10\4\0\12\11\51\0"+
    "\36\10\15\0\2\10\12\11\54\10\32\0\44\10\34\0\12\11\3\0"+
    "\3\10\12\11\44\10\153\0\4\10\1\0\4\10\3\0\2\10\11\0"+
    "\300\10\100\0\u0116\10\2\0\6\10\2\0\46\10\2\0\6\10\2\0"+
    "\10\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0\37\10\2\0"+
    "\65\10\1\0\7\10\1\0\1\10\3\0\3\10\1\0\7\10\3\0"+
    "\4\10\2\0\6\10\4\0\15\10\5\0\3\10\1\0\7\10\53\0"+
    "\1\54\1\54\107\0\1\10\15\0\1\10\20\0\15\10\145\0\1\10"+
    "\4\0\1\10\2\0\12\10\1\0\1\10\3\0\5\10\6\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\4\10\1\0\13\10\2\0\4\10"+
    "\5\0\5\10\4\0\1\10\64\0\2\10\u0a7b\0\57\10\1\0\57\10"+
    "\1\0\205\10\6\0\4\10\3\0\2\10\14\0\46\10\1\0\1\10"+
    "\5\0\1\10\2\0\70\10\7\0\1\10\20\0\27\10\11\0\7\10"+
    "\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10"+
    "\1\0\7\10\1\0\7\10\120\0\1\10\u01d5\0\2\10\52\0\5\10"+
    "\5\0\2\10\4\0\126\10\6\0\3\10\1\0\132\10\1\0\4\10"+
    "\5\0\51\10\3\0\136\10\21\0\33\10\65\0\20\10\u0200\0\u19b6\10"+
    "\112\0\u51cd\10\63\0\u048d\10\103\0\56\10\2\0\u010d\10\3\0\20\10"+
    "\12\11\2\10\24\0\57\10\20\0\37\10\2\0\106\10\61\0\11\10"+
    "\2\0\147\10\2\0\4\10\1\0\36\10\2\0\2\10\105\0\13\10"+
    "\1\0\3\10\1\0\4\10\1\0\27\10\35\0\64\10\16\0\62\10"+
    "\34\0\12\11\30\0\6\10\3\0\1\10\4\0\12\11\34\10\12\0"+
    "\27\10\31\0\35\10\7\0\57\10\34\0\1\10\12\11\6\0\5\10"+
    "\1\0\12\10\12\11\5\10\1\0\51\10\27\0\3\10\1\0\10\10"+
    "\4\0\12\11\6\0\27\10\3\0\1\10\3\0\62\10\1\0\1\10"+
    "\3\0\2\10\2\0\5\10\2\0\1\10\1\0\1\10\30\0\3\10"+
    "\2\0\13\10\7\0\3\10\14\0\6\10\2\0\6\10\2\0\6\10"+
    "\11\0\7\10\1\0\7\10\1\0\53\10\1\0\4\10\4\0\2\10"+
    "\132\0\43\10\15\0\12\11\6\0\u2ba4\10\14\0\27\10\4\0\61\10"+
    "\u2104\0\u016e\10\2\0\152\10\46\0\7\10\14\0\5\10\5\0\1\10"+
    "\1\0\12\10\1\0\15\10\1\0\5\10\1\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\154\10\41\0\u016b\10\22\0\100\10\2\0\66\10"+
    "\50\0\14\10\164\0\5\10\1\0\207\10\23\0\12\11\7\0\32\10"+
    "\6\0\32\10\13\0\131\10\3\0\6\10\2\0\6\10\2\0\6\10"+
    "\2\0\3\10\43\0\14\10\1\0\32\10\1\0\23\10\1\0\2\10"+
    "\1\0\17\10\2\0\16\10\42\0\173\10\u0185\0\35\10\3\0\61\10"+
    "\57\0\40\10\20\0\21\10\1\0\10\10\6\0\46\10\12\0\36\10"+
    "\2\0\44\10\4\0\10\10\60\0\236\10\2\0\12\11\126\0\50\10"+
    "\10\0\64\10\234\0\u0137\10\11\0\26\10\12\0\10\10\230\0\6\10"+
    "\2\0\1\10\1\0\54\10\1\0\2\10\3\0\1\10\2\0\27\10"+
    "\12\0\27\10\11\0\37\10\141\0\26\10\12\0\32\10\106\0\70\10"+
    "\6\0\2\10\100\0\1\10\17\0\4\10\1\0\3\10\1\0\33\10"+
    "\54\0\35\10\3\0\35\10\43\0\10\10\1\0\34\10\33\0\66\10"+
    "\12\0\26\10\12\0\23\10\15\0\22\10\156\0\111\10\u03ba\0\65\10"+
    "\56\0\12\11\23\0\55\10\40\0\31\10\7\0\12\11\11\0\44\10"+
    "\17\0\12\11\20\0\43\10\3\0\1\10\14\0\60\10\16\0\4\10"+
    "\13\0\12\11\1\10\45\0\22\10\1\0\31\10\204\0\57\10\21\0"+
    "\12\11\13\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0"+
    "\2\10\1\0\5\10\3\0\1\10\37\0\5\10\u011e\0\60\10\24\0"+
    "\2\10\1\0\1\10\10\0\12\11\246\0\57\10\121\0\60\10\24\0"+
    "\1\10\13\0\12\11\46\0\53\10\25\0\12\11\u01d6\0\100\10\12\11"+
    "\25\0\1\10\u01c0\0\71\10\u0507\0\u0399\10\u0c67\0\u042f\10\u33d1\0\u0239\10"+
    "\7\0\37\10\1\0\12\11\146\0\36\10\22\0\60\10\20\0\4\10"+
    "\14\0\12\11\11\0\25\10\5\0\23\10\u0370\0\105\10\13\0\1\10"+
    "\102\0\15\10\u4060\0\2\10\u0bfe\0\153\10\5\0\15\10\3\0\11\10"+
    "\7\0\12\10\u1766\0\125\10\1\0\107\10\1\0\2\10\2\0\1\10"+
    "\2\0\2\10\2\0\4\10\1\0\14\10\1\0\1\10\1\0\7\10"+
    "\1\0\101\10\1\0\4\10\2\0\10\10\1\0\7\10\1\0\34\10"+
    "\1\0\4\10\1\0\5\10\1\0\1\10\3\0\7\10\1\0\u0154\10"+
    "\2\0\31\10\1\0\31\10\1\0\37\10\1\0\31\10\1\0\37\10"+
    "\1\0\31\10\1\0\37\10\1\0\31\10\1\0\37\10\1\0\31\10"+
    "\1\0\10\10\2\0\62\11\u1000\0\305\10\u053b\0\4\10\1\0\33\10"+
    "\1\0\2\10\1\0\1\10\2\0\1\10\1\0\12\10\1\0\4\10"+
    "\1\0\1\10\1\0\1\10\6\0\1\10\4\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\2\10\1\0\1\10\2\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\1\0\1\10\2\0\4\10\1\0\7\10\1\0\4\10\1\0\4\10"+
    "\1\0\1\10\1\0\12\10\1\0\21\10\5\0\3\10\1\0\5\10"+
    "\1\0\21\10\u1144\0\ua6d7\10\51\0\u1035\10\13\0\336\10\u3fe2\0\u021e\10"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\16\0\1\1\1\2\2\3\1\1\1\3\1\1\1\3"+
    "\1\0\1\3\2\0\1\3\1\0\2\3\1\4\2\5"+
    "\1\3\1\0\1\3\1\4\2\5\1\3\3\0\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\0\1\17\1\0\1\20\1\1\1\21\7\22"+
    "\3\0\1\23\1\0\1\24\3\0\1\25\5\0\1\26"+
    "\1\22\1\27\4\22\1\30\2\22\1\0\1\31\1\0"+
    "\1\32\1\33\2\0\2\34\1\0\1\25\2\0\1\35"+
    "\1\36\3\22\1\30\1\22\1\37\4\0\1\40\1\0"+
    "\1\41\1\36\6\22\1\37\1\22\1\42\3\0\1\43"+
    "\5\22\1\44\1\22\3\0\2\22\1\45\2\22\1\44"+
    "\1\22\1\1\1\0\1\46\1\47\1\22\1\45\1\22"+
    "\1\50\1\51\1\52\1\0\1\46\1\53\2\22\1\50"+
    "\1\51\1\52\1\0\2\22\1\0\1\54\1\55\1\0"+
    "\1\54\1\55\21\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03c6\0\u03f4"+
    "\0\u0422\0\u0450\0\u047e\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536"+
    "\0\u0508\0\u0564\0\u04da\0\u0592\0\u05c0\0\u05ee\0\u05c0\0\u061c"+
    "\0\u0592\0\u064a\0\u0678\0\0\0\u06a6\0\0\0\0\0\0"+
    "\0\0\0\0\0\0\0\0\0\0\0\u06d4\0\u0702\0\u0730"+
    "\0\0\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872"+
    "\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\0\0\u0986\0\0"+
    "\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6"+
    "\0\u0b24\0\0\0\u0b52\0\0\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a"+
    "\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\0\0\u0cf0\0\0\0\0"+
    "\0\u0d1e\0\u0d4c\0\u0a3e\0\0\0\u0d7a\0\0\0\u0da8\0\u0dd6"+
    "\0\0\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18"+
    "\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\0\0\u0ffe\0\0\0\u102c"+
    "\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c"+
    "\0\0\0\u11ca\0\u11f8\0\u1226\0\0\0\u1254\0\u1282\0\u12b0"+
    "\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420"+
    "\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534\0\u1562\0\u1590"+
    "\0\u15be\0\0\0\u15ec\0\u161a\0\u1648\0\u1676\0\u16a4\0\u16d2"+
    "\0\u1700\0\0\0\0\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6"+
    "\0\u1814\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928\0\u1956"+
    "\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6"+
    "\0\u1af4\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36"+
    "\0\u1c64\0\u1c92";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\56\0\1\17\3\20\1\21\1\22\1\23\3\17\1\24"+
    "\1\25\42\17\2\26\2\27\10\26\1\30\37\26\2\27"+
    "\14\31\1\32\41\31\2\33\2\34\6\33\1\35\41\33"+
    "\2\34\1\36\1\37\1\40\1\41\1\36\1\42\46\36"+
    "\2\43\1\44\1\45\1\46\1\47\2\44\1\50\45\44"+
    "\2\51\7\52\1\53\46\52\1\54\3\55\50\54\53\0"+
    "\1\56\1\57\3\0\52\13\1\60\3\13\51\61\1\62"+
    "\1\63\3\61\52\15\1\64\3\15\52\0\1\65\3\0"+
    "\4\17\2\0\4\17\1\0\1\66\43\17\3\20\2\0"+
    "\4\17\1\0\1\66\42\17\4\0\1\67\1\0\1\70"+
    "\54\0\1\71\50\0\4\17\2\0\1\72\3\17\1\0"+
    "\1\66\42\17\1\0\3\73\4\0\1\74\4\0\1\75"+
    "\1\74\1\0\1\76\2\74\2\0\1\74\1\75\2\77"+
    "\4\74\2\100\5\74\3\0\1\101\1\74\2\0\1\102"+
    "\1\0\1\74\13\17\1\0\1\103\7\17\3\0\1\17"+
    "\1\104\1\17\1\0\1\17\1\0\1\17\1\0\12\17"+
    "\2\0\3\17\14\27\1\105\55\27\1\105\2\27\1\106"+
    "\36\27\14\31\1\107\55\31\1\107\2\31\1\110\36\31"+
    "\12\34\1\111\55\34\1\111\5\34\1\112\35\34\5\43"+
    "\1\113\51\43\3\37\1\43\1\113\51\43\2\37\1\41"+
    "\1\43\1\113\55\43\1\114\50\43\6\51\1\115\50\51"+
    "\3\45\2\51\1\115\50\51\2\45\1\47\2\51\1\115"+
    "\55\51\1\116\47\51\7\52\1\117\55\52\1\120\46\52"+
    "\1\0\3\55\52\0\13\17\2\0\7\17\3\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\12\17"+
    "\2\0\3\17\7\0\1\121\54\0\1\122\47\0\4\17"+
    "\1\0\1\71\4\17\1\0\1\66\42\17\1\0\3\73"+
    "\53\0\3\123\4\0\2\74\3\0\2\74\1\0\3\74"+
    "\2\0\17\74\3\0\2\74\1\124\1\0\1\74\1\0"+
    "\1\74\1\0\3\123\4\0\2\74\3\0\1\74\1\125"+
    "\1\0\3\74\2\0\17\74\3\0\2\74\1\124\1\0"+
    "\1\74\1\0\1\74\1\0\3\123\4\0\2\74\3\0"+
    "\2\74\1\0\1\74\1\126\1\74\2\0\17\74\3\0"+
    "\2\74\1\124\1\0\1\74\1\0\1\74\1\0\3\123"+
    "\4\0\2\74\3\0\2\74\1\0\1\127\2\74\2\0"+
    "\17\74\3\0\2\74\1\124\1\0\1\74\1\0\1\74"+
    "\1\0\3\123\4\0\2\74\3\0\2\74\1\0\1\74"+
    "\1\130\1\74\2\0\17\74\3\0\2\74\1\124\1\0"+
    "\1\131\1\0\1\74\1\0\3\123\4\0\2\74\3\0"+
    "\2\74\1\0\3\74\2\0\10\74\2\132\5\74\3\0"+
    "\2\74\1\124\1\0\1\74\1\0\1\74\1\0\3\123"+
    "\4\0\2\74\3\0\2\74\1\0\3\74\2\0\17\74"+
    "\3\0\1\74\1\133\1\124\1\0\1\74\1\0\1\74"+
    "\15\0\1\134\10\0\1\134\15\0\1\135\42\0\2\136"+
    "\23\0\14\27\1\105\2\27\1\137\36\27\14\31\1\107"+
    "\2\31\1\140\36\31\12\34\1\111\5\34\1\141\47\34"+
    "\1\111\6\34\1\142\34\34\5\43\1\143\50\43\5\0"+
    "\1\144\50\0\6\51\1\145\54\51\1\146\1\145\47\51"+
    "\7\52\1\147\53\52\1\150\1\52\1\147\46\52\7\0"+
    "\1\151\47\0\3\123\45\0\1\124\5\0\3\123\4\0"+
    "\2\74\3\0\1\152\1\74\1\0\3\74\2\0\1\74"+
    "\1\152\15\74\3\0\2\74\1\124\1\0\1\74\1\0"+
    "\1\74\1\0\3\123\4\0\2\74\3\0\2\74\1\0"+
    "\2\74\1\153\2\0\17\74\3\0\2\74\1\124\1\0"+
    "\1\74\1\0\1\74\1\0\3\123\4\0\2\74\3\0"+
    "\2\74\1\0\3\74\2\0\4\74\2\154\11\74\3\0"+
    "\2\74\1\124\1\0\1\74\1\0\1\74\1\0\3\123"+
    "\4\0\2\74\3\0\2\74\1\0\3\74\2\0\4\74"+
    "\2\155\11\74\3\0\2\74\1\124\1\0\1\74\1\0"+
    "\1\74\1\0\3\156\4\0\2\74\3\0\2\74\1\0"+
    "\3\74\2\0\17\74\3\0\2\74\1\124\1\0\1\74"+
    "\1\0\1\74\1\0\3\123\4\0\2\74\3\0\2\74"+
    "\1\0\1\157\2\74\2\0\17\74\3\0\2\74\1\124"+
    "\1\0\1\74\1\0\1\74\1\0\3\123\4\0\2\74"+
    "\3\0\2\74\1\0\3\74\2\0\6\74\2\160\7\74"+
    "\3\0\2\74\1\124\1\0\1\74\1\0\1\74\16\0"+
    "\1\161\72\0\2\162\21\0\12\34\1\111\6\34\1\163"+
    "\46\34\1\111\7\34\1\164\33\34\5\51\1\165\1\145"+
    "\47\51\5\52\1\166\1\52\1\147\53\52\1\167\1\52"+
    "\1\117\46\52\1\0\3\170\4\0\2\74\3\0\2\74"+
    "\1\0\3\74\2\0\17\74\3\0\2\74\1\124\1\0"+
    "\1\74\1\0\1\74\1\0\3\123\4\0\2\74\3\0"+
    "\1\171\1\74\1\0\3\74\2\0\1\74\1\171\2\172"+
    "\13\74\3\0\2\74\1\124\1\0\1\173\1\0\1\74"+
    "\1\0\3\123\4\0\2\74\3\0\2\74\1\0\3\74"+
    "\2\0\1\174\11\74\1\174\4\74\3\0\2\74\1\124"+
    "\1\0\1\74\1\0\1\74\1\0\3\123\4\0\2\74"+
    "\3\0\2\74\1\0\3\74\2\0\13\74\1\175\3\74"+
    "\3\0\2\74\1\124\1\0\1\74\1\0\1\74\1\0"+
    "\3\156\45\0\1\124\5\0\3\123\4\0\2\74\3\0"+
    "\2\74\1\0\3\74\2\0\13\74\1\176\3\74\3\0"+
    "\2\74\1\124\1\0\1\74\1\0\1\74\1\0\3\177"+
    "\4\0\2\74\3\0\2\74\1\0\1\200\2\74\2\0"+
    "\17\74\3\0\2\74\1\124\1\0\1\74\1\0\1\74"+
    "\15\0\1\201\10\0\1\201\64\0\2\202\17\0\12\34"+
    "\1\111\7\34\1\203\45\34\1\111\2\34\1\204\10\34"+
    "\1\204\27\34\5\52\1\205\1\52\1\117\46\52\1\0"+
    "\3\170\45\0\1\124\5\0\3\123\4\0\2\74\3\0"+
    "\1\74\1\206\1\0\3\74\2\0\17\74\3\0\2\74"+
    "\1\124\1\0\1\74\1\0\1\74\1\0\3\123\4\0"+
    "\2\74\3\0\2\74\1\0\1\207\2\74\2\0\17\74"+
    "\3\0\2\74\1\124\1\0\1\74\1\0\1\74\1\0"+
    "\3\123\4\0\2\74\3\0\2\74\1\0\3\74\2\0"+
    "\17\74\3\0\1\74\1\210\1\124\1\0\1\74\1\0"+
    "\1\74\1\0\3\123\4\0\2\74\3\0\2\74\1\0"+
    "\3\74\2\0\10\74\2\211\5\74\3\0\2\74\1\124"+
    "\1\0\1\74\1\0\1\74\1\0\3\123\4\0\2\74"+
    "\3\0\2\74\1\0\3\74\2\0\16\74\1\212\3\0"+
    "\2\74\1\124\1\0\1\74\1\0\1\74\1\0\3\123"+
    "\4\0\2\74\3\0\2\74\1\0\2\74\1\213\2\0"+
    "\17\74\3\0\2\74\1\124\1\0\1\74\1\0\1\74"+
    "\1\0\3\177\45\0\1\124\5\0\3\123\4\0\2\74"+
    "\3\0\2\74\1\0\3\74\2\0\14\74\1\214\2\74"+
    "\3\0\2\74\1\124\1\0\1\74\1\0\1\74\15\0"+
    "\1\215\10\0\1\215\27\0\12\34\1\111\2\34\1\216"+
    "\10\34\1\216\41\34\1\111\3\34\1\217\37\34\1\0"+
    "\3\123\4\0\2\74\3\0\1\220\1\74\1\0\3\74"+
    "\2\0\1\74\1\220\15\74\3\0\2\74\1\124\1\0"+
    "\1\74\1\0\1\74\1\0\3\123\4\0\2\74\3\0"+
    "\2\74\1\0\3\74\2\0\4\74\2\221\11\74\3\0"+
    "\2\74\1\124\1\0\1\74\1\0\1\74\1\0\3\123"+
    "\4\0\2\74\3\0\2\74\1\0\3\74\2\0\6\74"+
    "\2\222\7\74\3\0\2\74\1\124\1\0\1\74\1\0"+
    "\1\74\1\0\3\123\4\0\2\74\3\0\2\74\1\0"+
    "\3\74\2\0\17\74\3\0\1\74\1\223\1\124\1\0"+
    "\1\74\1\0\1\74\1\0\3\123\4\0\2\74\3\0"+
    "\2\74\1\0\2\74\1\224\2\0\17\74\3\0\2\74"+
    "\1\124\1\0\1\74\1\0\1\74\1\0\3\225\4\0"+
    "\2\74\3\0\2\74\1\0\3\74\2\0\17\74\3\0"+
    "\2\74\1\124\1\0\1\74\1\0\1\74\1\0\3\123"+
    "\4\0\2\74\3\0\2\74\1\0\3\74\2\0\4\74"+
    "\2\226\11\74\3\0\2\74\1\124\1\0\1\74\1\0"+
    "\1\74\25\0\1\227\11\0\1\227\16\0\12\34\1\111"+
    "\3\34\1\230\51\34\1\111\2\34\1\231\10\34\1\231"+
    "\27\34\1\0\3\123\4\0\2\74\3\0\2\74\1\0"+
    "\3\74\1\232\1\0\17\74\3\0\2\74\1\124\1\0"+
    "\1\74\1\0\1\74\1\0\3\123\4\0\2\74\3\0"+
    "\2\74\1\0\3\74\2\0\1\233\11\74\1\233\4\74"+
    "\3\0\2\74\1\124\1\0\1\74\1\0\1\74\1\0"+
    "\3\234\4\0\2\74\3\0\2\74\1\0\1\235\2\74"+
    "\2\0\17\74\3\0\2\74\1\124\1\0\1\74\1\0"+
    "\1\74\1\0\3\123\4\0\2\74\3\0\2\74\1\0"+
    "\1\74\1\236\1\74\2\0\17\74\3\0\2\74\1\124"+
    "\1\0\1\74\1\0\1\74\1\0\3\123\4\0\2\74"+
    "\3\0\2\74\1\0\1\237\2\74\2\0\17\74\3\0"+
    "\2\74\1\124\1\0\1\74\1\0\1\74\1\0\3\225"+
    "\45\0\1\124\5\0\3\123\4\0\2\74\3\0\1\74"+
    "\1\240\1\0\3\74\2\0\17\74\3\0\2\74\1\124"+
    "\1\0\1\74\1\0\1\74\1\0\3\241\52\0\12\34"+
    "\1\111\2\34\1\242\10\34\1\242\27\34\23\0\1\243"+
    "\33\0\3\123\4\0\2\74\3\0\2\74\1\0\3\74"+
    "\2\0\10\74\2\244\5\74\3\0\2\74\1\124\1\0"+
    "\1\74\1\0\1\74\1\0\3\234\45\0\1\124\5\0"+
    "\3\123\4\0\2\74\3\0\2\74\1\0\3\74\2\0"+
    "\14\74\1\245\2\74\3\0\2\74\1\124\1\0\1\74"+
    "\1\0\1\74\1\0\3\246\4\0\2\74\3\0\2\74"+
    "\1\0\3\74\2\0\17\74\3\0\2\74\1\124\1\0"+
    "\1\74\1\0\1\74\1\0\3\247\4\0\2\74\3\0"+
    "\2\74\1\0\3\74\2\0\17\74\3\0\2\74\1\124"+
    "\1\0\1\74\1\0\1\74\1\0\3\250\4\0\2\74"+
    "\3\0\2\74\1\0\3\74\2\0\17\74\3\0\2\74"+
    "\1\124\1\0\1\74\1\0\1\74\1\0\3\241\34\0"+
    "\1\251\16\0\3\123\4\0\2\74\3\0\2\74\1\0"+
    "\3\74\2\0\17\74\3\0\1\74\1\252\1\124\1\0"+
    "\1\74\1\0\1\74\1\0\3\123\4\0\2\74\3\0"+
    "\2\74\1\0\3\74\2\0\4\74\2\253\11\74\3\0"+
    "\2\74\1\124\1\0\1\74\1\0\1\74\1\0\3\246"+
    "\45\0\1\124\5\0\3\247\45\0\1\124\5\0\3\250"+
    "\45\0\1\124\45\0\1\254\15\0\3\123\4\0\2\74"+
    "\3\0\2\74\1\0\1\74\1\255\1\74\2\0\17\74"+
    "\3\0\2\74\1\124\1\0\1\74\1\0\1\74\1\0"+
    "\3\123\4\0\2\74\3\0\1\74\1\256\1\0\3\74"+
    "\2\0\17\74\3\0\2\74\1\124\1\0\1\74\1\0"+
    "\1\74\21\0\1\257\35\0\3\260\4\0\2\74\3\0"+
    "\2\74\1\0\3\74\2\0\17\74\3\0\2\74\1\124"+
    "\1\0\1\74\1\0\1\74\1\0\3\261\4\0\2\74"+
    "\3\0\2\74\1\0\3\74\2\0\17\74\3\0\2\74"+
    "\1\124\1\0\1\74\1\0\1\74\42\0\1\262\14\0"+
    "\3\260\45\0\1\124\5\0\3\261\45\0\1\124\47\0"+
    "\1\263\53\0\1\264\56\0\1\265\33\0\1\266\36\0"+
    "\3\266\40\0\1\267\12\0\3\267\11\0\1\270\10\0"+
    "\1\270\16\0\1\271\1\272\25\0\1\273\54\0\1\274"+
    "\10\0\1\274\44\0\1\275\10\0\1\275\44\0\1\276"+
    "\10\0\1\276\45\0\1\277\55\0\1\300\40\0\3\276"+
    "\13\0\1\54\53\0\1\301\10\0\1\301\44\0\1\302"+
    "\10\0\1\302\74\0\1\276\56\0\1\276\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7360];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\10\15\0\10\1\1\0\1\1\2\0\1\1\1\0"+
    "\6\1\1\0\5\1\3\0\1\11\1\1\10\11\1\0"+
    "\1\1\1\0\1\11\11\1\3\0\1\11\1\0\1\11"+
    "\3\0\1\1\5\0\1\11\1\1\1\11\7\1\1\0"+
    "\1\11\1\0\2\11\2\0\1\1\1\11\1\0\1\11"+
    "\2\0\1\11\7\1\4\0\1\11\1\0\1\11\11\1"+
    "\1\11\3\0\1\11\7\1\3\0\10\1\1\0\1\1"+
    "\1\11\6\1\1\0\2\11\5\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\21\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */
    private ByteStack stack = new ByteStack();
    private LexerInput input;
    private int parenBalanceInDirective = 0; //for directive arguments

    public BladeColoringLexer(LexerRestartInfo info) {
        this.input = info.input();
        if(info.state() != null) {
            //reset state
            setState((LexerState) info.state(), parenBalanceInDirective);
        } else {
            //initial state
            stack.push(ST_HTML);
            zzState = ST_HTML;
            zzLexicalState = ST_HTML;
        }

    }

    public static final class LexerState  {
        final ByteStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;
        final int parenBalanceInDirective; 

        LexerState(ByteStack stack, int zzState, int zzLexicalState, int parenBalanceInDirective) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.parenBalanceInDirective = parenBalanceInDirective;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null || obj.getClass() != this.getClass()) {
                return false;
            }
            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                && (this.zzState == state.zzState)
                //&& (this.zzLexicalState == state.zzLexicalState)
                //&& (this.parenBalanceInDirective == state.parenBalanceInDirective)
                );
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            hash = 31 * hash + this.parenBalanceInDirective;
            if (stack != null) {
                hash = 31 * hash + this.stack.hashCode();
            }
            return hash;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.copyOf(), zzState, zzLexicalState, parenBalanceInDirective);
    }

    public void setState(LexerState state, int parenBalanceInDirective) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
        this.parenBalanceInDirective = state.parenBalanceInDirective;
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    //other functions

    protected void pushBack(int i) {
        yypushback(i);
    }

    protected void popState() {
        yybegin(stack.pop());
    }

    protected void pushState(final int state) {
        stack.push(getZZLexicalState());
        yybegin(state);
    }

    /**
     * Returns the smallest of multiple index values.
     *
     * @param values values
     * @return the smallest of multiple index values, -1 if all values are -1
     */
    private static int minIndex(int... values) {
        assert values.length != 0 : "No values"; // NOI18N
        boolean first = true;
        int min = -1;
        for (int value : values) {
            if (value == -1) {
                continue;
            }
            if (first) {
                first = false;
                min = value;
                continue;
            }
            min = Math.min(min, value);
        }
        return min;
    }

    /**
     * Get the first whitespace index of text.
     *
     * @param text the text
     * @return the first index of whitespace if whitespace exists, otherwise -1
     */
    private static int firstWhitespaceIndexOf(String text) {
        return minIndex(
            text.indexOf(' '),
            text.indexOf('\n'),
            text.indexOf('\r'),
            text.indexOf('\t')
        );
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BladeColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2510) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public BladeTokenId findNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;


      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
            zzInput = input.read();

            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

        //action
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BladeTokenId.T_HTML;
            }
          case 46: break;
          case 2: 
            { String yytext = yytext();
	//whitespace
    return BladeTokenId.WHITESPACE;
            }
          case 47: break;
          case 3: 
            { //if (yylength() > 1) {
        //    yypushback(1);
        //}
        //pushState(ST_HIGHLIGHTING_ERROR);
            }
          case 48: break;
          case 4: 
            { //no break;
            }
          case 49: break;
          case 5: 
            { String yytext = yytext();
    popState();
    return BladeTokenId.T_HTML;
            }
          case 50: break;
          case 6: 
            { popState();
        return BladeTokenId.T_HTML;
            }
          case 51: break;
          case 7: 
            { //directive paranthesis
    return BladeTokenId.BLADE_PHP_TOKEN;
            }
          case 52: break;
          case 8: 
            { //directive end
    yypushback(1);
	popState();
    return BladeTokenId.T_BLADE_PHP_VAR;
            }
          case 53: break;
          case 9: 
            { yypushback(1);
    popState();
    return BladeTokenId.T_BLADE_PHP_LOOP_PARAM;
            }
          case 54: break;
          case 10: 
            { String yytext = yytext();
	int test = 1;
            }
          case 55: break;
          case 11: 
            { String yytext = yytext();
    parenBalanceInDirective++;
    if (parenBalanceInDirective == 1){
        //first paranthesis
    	return BladeTokenId.BLADE_PHP_TOKEN;
    }
            }
          case 56: break;
          case 12: 
            { String yytext = yytext();
    parenBalanceInDirective--;
    if (parenBalanceInDirective <= 0){
        if (yylength() == 1){
           popState();
           return BladeTokenId.BLADE_PHP_TOKEN;
        }
        yypushback(1);
        popState();
        pushState(ST_CLOSE_PARANTHEIS);
		return BladeTokenId.T_DIRECTIVE_ARG;
    }
            }
          case 57: break;
          case 13: 
            { yypushback(1);
    popState();
    return BladeTokenId.T_BLADE_PHP_COND;
            }
          case 58: break;
          case 14: 
            { String yytext = yytext();
       popState();
       return BladeTokenId.BLADE_PHP_TOKEN;
            }
          case 59: break;
          case 15: 
            { String yytext = yytext();
    pushState(ST_BLADE_ECHO);
    return BladeTokenId.T_BLADE_OPEN_ECHO;
            }
          case 60: break;
          case 16: 
            { String yytext = yytext();
    return BladeTokenId.T_BLADE_CLOSE_ECHO;
            }
          case 61: break;
          case 17: 
            { return BladeTokenId.T_BLADE_DIRECTIVE_PREFIX;
            }
          case 62: break;
          case 18: 
            { String yytext = yytext();
   return BladeTokenId.T_BLADE_DIRECTIVE;
            }
          case 63: break;
          case 19: 
            { if (yylength() == 2){
	    popState(); 
		return BladeTokenId.T_CLOSE_PHP;
	}
	yypushback(2);
    return BladeTokenId.T_PHP;
            }
          case 64: break;
          case 20: 
            { if (yylength() == 2){
	    popState(); 
		return BladeTokenId.T_CLOSE_PHP;
	}
	yypushback(2);
    return BladeTokenId.T_PHP_ECHO;
            }
          case 65: break;
          case 21: 
            { String yytext = yytext();
    popState();
    return BladeTokenId.T_BLADE_CLOSE_ECHO;
            }
          case 66: break;
          case 22: 
            { String yytext = yytext();
    pushState(ST_BLADE_ECHO_ESCAPED);
    return BladeTokenId.T_BLADE_OPEN_ECHO;
            }
          case 67: break;
          case 23: 
            { //we have a fatal in php embedding in (:)
   pushState(ST_DIRECTIVE_ARG);
   yypushback(1);
   return BladeTokenId.T_BLADE_DIRECTIVE;
            }
          case 68: break;
          case 24: 
            { pushState(ST_PHP_COND_EXPR);
    return BladeTokenId.T_BLADE_IF;
            }
          case 69: break;
          case 25: 
            { pushState(ST_PHP_ECHO);
    return BladeTokenId.T_PHP_OPEN_ECHO;
            }
          case 70: break;
          case 26: 
            { if (yylength() == 2){
       popState();
       return BladeTokenId.T_CLOSE_PHP;
    }
    yypushback(2);
    return BladeTokenId.T_PHP;
            }
          case 71: break;
          case 27: 
            { if (yylength() == 2){
       popState();
       return BladeTokenId.T_CLOSE_PHP;
    }
    yypushback(2);
    return BladeTokenId.T_PHP_ECHO;
            }
          case 72: break;
          case 28: 
            { String yytext = yytext();
    yypushback(2);
    return BladeTokenId.T_BLADE_PHP_ECHO;
            }
          case 73: break;
          case 29: 
            { pushState(ST_COMMENT);
    return BladeTokenId.T_BLADE_COMMENT;
            }
          case 74: break;
          case 30: 
            { pushState(ST_BLADE_PHP);
    return BladeTokenId.T_BLADE_PHP_OPEN;
            }
          case 75: break;
          case 31: 
            { pushState(ST_PHP_LOOP_EXPR);
    return BladeTokenId.T_BLADE_FOR;
            }
          case 76: break;
          case 32: 
            { String yytext = yytext();
    yypushback(3);
    return BladeTokenId.T_BLADE_PHP_ECHO;
            }
          case 77: break;
          case 33: 
            { popState();
    return BladeTokenId.T_BLADE_COMMENT;
            }
          case 78: break;
          case 34: 
            { pushState(ST_PHP);
    return BladeTokenId.T_OPEN_PHP;
            }
          case 79: break;
          case 35: 
            { yypushback(4);
    return BladeTokenId.T_BLADE_COMMENT;
            }
          case 80: break;
          case 36: 
            { return BladeTokenId.T_BLADE_YIELD;
            }
          case 81: break;
          case 37: 
            { return BladeTokenId.T_BLADE_ENDFOR;
            }
          case 82: break;
          case 38: 
            { String ttext = yytext();
    popState();
    if (yylength() == "@endphp".length()){
        return BladeTokenId.T_BLADE_ENDPHP;
    }
    
    yypushback("@endphp".length());
    return BladeTokenId.T_BLADE_PHP;
            }
          case 83: break;
          case 39: 
            { return BladeTokenId.T_BLADE_ENDPHP;
            }
          case 84: break;
          case 40: 
            { pushState(ST_PHP_LOOKING_FOR_DIRECTIVE_ARG);
    return BladeTokenId.T_BLADE_SECTION;
            }
          case 85: break;
          case 41: 
            { pushState(ST_PHP_LOOKING_FOR_DIRECTIVE_ARG);
    return BladeTokenId.T_BLADE_INCLUDE;
            }
          case 86: break;
          case 42: 
            { pushState(ST_PHP_LOOP_EXPR);
    return BladeTokenId.T_BLADE_FOREACH;
            }
          case 87: break;
          case 43: 
            { String ttext = yytext();
    popState();
    return BladeTokenId.T_BLADE_ENDPHP;
            }
          case 88: break;
          case 44: 
            { return BladeTokenId.T_BLADE_ENDSECTION;
            }
          case 89: break;
          case 45: 
            { return BladeTokenId.T_BLADE_ENDFOREACH;
            }
          case 90: break;
      //end of value
      default:
        if (zzInput == YYEOF) {
            if (input.readLength() > 0) {
                // backup eof
                String yytext = yytext();
                input.backup(1);
                //and return the text as error token
                if (zzLexicalState == ST_COMMENT) {
                    return BladeTokenId.T_BLADE_COMMENT;
                } else if (zzLexicalState == ST_BLADE_ECHO || zzLexicalState == ST_BLADE_ECHO_ESCAPED) {
                    return BladeTokenId.T_BLADE_OPEN_ECHO;
                } else if (zzLexicalState == ST_PHP) {
                    return BladeTokenId.T_BLADE_PHP;
                } else if (zzLexicalState == ST_BLADE_PHP) {
                    return BladeTokenId.T_BLADE_PHP;
                } else if (zzLexicalState == ST_DIRECTIVE_ARG) {
                    return BladeTokenId.T_HTML;
                }
                return BladeTokenId.T_HTML;
            } else {
                String yytext = yytext();
                return null;
            }
        } else {
            String yytext = yytext();
            int testState = zzLexicalState;
            zzScanError(ZZ_NO_MATCH);
            //no match
        }
      }
    }
  }


}
