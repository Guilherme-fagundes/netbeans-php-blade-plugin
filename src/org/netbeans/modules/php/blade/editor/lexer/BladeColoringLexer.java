/* The following code was generated by JFlex 1.4.3 on 31.01.2022 10:16 */

   /*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2016 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2016 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.blade.editor.lexer;

import java.util.Objects;
import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;
import org.netbeans.modules.web.common.api.ByteStack;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 31.01.2022 10:16 from the specification file
 * <tt>BladeColoringLexer.flex</tt>
 */
public class BladeColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_PHP = 4;
  public static final int ST_PHP_IF_EXPR = 34;
  public static final int ST_PHP_LOOKING_FOR_LOOP_EXPR = 38;
  public static final int ST_HTML = 2;
  public static final int ST_LOOKING_FOR_SECOND_PARAMETER = 28;
  public static final int ST_PHP_LOOKING_FOR_DIRECTIVE_PARAM = 26;
  public static final int ST_CLOSE_BLADE_PHP = 22;
  public static final int ST_DIRECTIVE = 16;
  public static final int ST_BLADE_ECHO = 12;
  public static final int ST_BLADE_ECHO_ESCAPED = 14;
  public static final int ST_COMMENT = 18;
  public static final int ST_BLADE_ARGUMENT = 30;
  public static final int ST_PHP_ECHO = 6;
  public static final int ST_BLADE_PHP = 10;
  public static final int ST_CLOSE_PARANTHEIS = 42;
  public static final int ST_PHP_LOOKING_FOR_IF_EXPR = 36;
  public static final int ST_PHP_LOOP_EXPR = 32;
  public static final int ST_HIGHLIGHTING_ERROR = 20;
  public static final int ST_DIRECTIVE_ARG = 40;
  public static final int ST_STRING_SQUOTE = 46;
  public static final int YYINITIAL = 0;
  public static final int ST_STRING_DQUOTE = 44;
  public static final int ST_INLINE_PHP = 8;
  public static final int ST_PHP_LOOKING_FOR_DIRECTIVE_ARG = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  0,  0,  4,  4,  5,  5,  6,  6, 
     0,  0,  7,  7,  8,  8,  0,  0,  9,  9,  0,  0, 10, 10, 11, 11, 
    12, 12, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\2\0\1\2\22\0\1\1\1\6\1\45\1\0"+
    "\1\57\1\24\1\0\1\46\1\54\1\55\2\0\1\56\1\7\2\0"+
    "\12\11\1\0\1\23\1\13\1\44\1\17\1\14\1\12\1\41\1\10"+
    "\1\31\1\22\1\20\1\53\1\42\1\16\1\35\2\10\1\40\1\50"+
    "\1\21\1\52\1\15\1\10\1\33\1\27\1\37\1\43\2\10\1\47"+
    "\1\51\1\10\1\0\1\60\2\0\1\10\1\0\1\41\1\10\1\32"+
    "\1\22\1\20\1\53\1\42\1\16\1\36\2\10\1\40\1\50\1\21"+
    "\1\52\1\26\1\10\1\34\1\30\1\25\1\43\2\10\1\47\1\51"+
    "\1\10\1\4\1\0\1\5\1\0\53\10\1\10\12\10\1\10\4\10"+
    "\1\10\5\10\27\10\1\10\37\10\1\10\10\10\u01c2\10\4\0\14\10"+
    "\16\0\5\10\7\0\1\10\1\0\1\10\201\0\5\10\1\0\2\10"+
    "\2\0\4\10\10\0\1\10\1\0\3\10\1\0\1\10\1\0\24\10"+
    "\1\0\123\10\1\0\213\10\10\0\236\10\11\0\46\10\2\0\1\10"+
    "\7\0\47\10\110\0\33\10\5\0\3\10\55\0\53\10\25\0\12\11"+
    "\4\0\2\10\1\0\143\10\1\0\1\10\17\0\2\10\7\0\2\10"+
    "\12\11\3\10\2\0\1\10\20\0\1\10\1\0\36\10\35\0\131\10"+
    "\13\0\1\10\16\0\12\11\41\10\11\0\2\10\4\0\1\10\5\0"+
    "\26\10\4\0\1\10\11\0\1\10\3\0\1\10\27\0\31\10\107\0"+
    "\1\10\1\0\13\10\127\0\66\10\3\0\1\10\22\0\1\10\7\0"+
    "\12\10\4\0\12\11\1\0\7\10\1\0\7\10\5\0\10\10\2\0"+
    "\2\10\2\0\26\10\1\0\7\10\1\0\1\10\3\0\4\10\3\0"+
    "\1\10\20\0\1\10\15\0\2\10\1\0\3\10\4\0\12\11\2\10"+
    "\23\0\6\10\4\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10"+
    "\1\0\2\10\1\0\2\10\37\0\4\10\1\0\1\10\7\0\12\11"+
    "\2\0\3\10\20\0\11\10\1\0\3\10\1\0\26\10\1\0\7\10"+
    "\1\0\2\10\1\0\5\10\3\0\1\10\22\0\1\10\17\0\2\10"+
    "\4\0\12\11\25\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10"+
    "\1\0\2\10\1\0\5\10\3\0\1\10\36\0\2\10\1\0\3\10"+
    "\4\0\12\11\1\0\1\10\21\0\1\10\1\0\6\10\3\0\3\10"+
    "\1\0\4\10\3\0\2\10\1\0\1\10\1\0\2\10\3\0\2\10"+
    "\3\0\3\10\3\0\14\10\26\0\1\10\25\0\12\11\25\0\10\10"+
    "\1\0\3\10\1\0\27\10\1\0\12\10\1\0\5\10\3\0\1\10"+
    "\32\0\2\10\6\0\2\10\4\0\12\11\25\0\10\10\1\0\3\10"+
    "\1\0\27\10\1\0\12\10\1\0\5\10\3\0\1\10\40\0\1\10"+
    "\1\0\2\10\4\0\12\11\1\0\2\10\22\0\10\10\1\0\3\10"+
    "\1\0\51\10\2\0\1\10\20\0\1\10\21\0\2\10\4\0\12\11"+
    "\12\0\6\10\5\0\22\10\3\0\30\10\1\0\11\10\1\0\1\10"+
    "\2\0\7\10\72\0\60\10\1\0\2\10\14\0\7\10\11\0\12\11"+
    "\47\0\2\10\1\0\1\10\2\0\2\10\1\0\1\10\2\0\1\10"+
    "\6\0\4\10\1\0\7\10\1\0\3\10\1\0\1\10\1\0\1\10"+
    "\2\0\2\10\1\0\4\10\1\0\2\10\11\0\1\10\2\0\5\10"+
    "\1\0\1\10\11\0\12\11\2\0\4\10\40\0\1\10\37\0\12\11"+
    "\26\0\10\10\1\0\44\10\33\0\5\10\163\0\53\10\24\0\1\10"+
    "\12\11\6\0\6\10\4\0\4\10\3\0\1\10\3\0\2\10\7\0"+
    "\3\10\4\0\15\10\14\0\1\10\1\0\12\11\6\0\46\10\1\0"+
    "\1\10\5\0\1\10\2\0\53\10\1\0\u014d\10\1\0\4\10\2\0"+
    "\7\10\1\0\1\10\1\0\4\10\2\0\51\10\1\0\4\10\2\0"+
    "\41\10\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0"+
    "\17\10\1\0\71\10\1\0\4\10\2\0\103\10\45\0\20\10\20\0"+
    "\125\10\14\0\u026c\10\2\0\21\10\1\0\32\10\5\0\113\10\25\0"+
    "\15\10\1\0\4\10\16\0\22\10\16\0\22\10\16\0\15\10\1\0"+
    "\3\10\17\0\64\10\43\0\1\10\4\0\1\10\3\0\12\11\46\0"+
    "\12\11\6\0\130\10\10\0\51\10\1\0\1\10\5\0\106\10\12\0"+
    "\35\10\51\0\12\11\36\10\2\0\5\10\13\0\54\10\25\0\7\10"+
    "\10\0\12\11\46\0\27\10\11\0\65\10\53\0\12\11\6\0\12\11"+
    "\15\0\1\10\135\0\57\10\21\0\7\10\4\0\12\11\51\0\36\10"+
    "\15\0\2\10\12\11\54\10\32\0\44\10\34\0\12\11\3\0\3\10"+
    "\12\11\44\10\153\0\4\10\1\0\4\10\3\0\2\10\11\0\300\10"+
    "\100\0\u0116\10\2\0\6\10\2\0\46\10\2\0\6\10\2\0\10\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\37\10\2\0\65\10"+
    "\1\0\7\10\1\0\1\10\3\0\3\10\1\0\7\10\3\0\4\10"+
    "\2\0\6\10\4\0\15\10\5\0\3\10\1\0\7\10\164\0\1\10"+
    "\15\0\1\10\20\0\15\10\145\0\1\10\4\0\1\10\2\0\12\10"+
    "\1\0\1\10\3\0\5\10\6\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\4\10\1\0\13\10\2\0\4\10\5\0\5\10\4\0\1\10"+
    "\64\0\2\10\u0a7b\0\57\10\1\0\57\10\1\0\205\10\6\0\4\10"+
    "\3\0\2\10\14\0\46\10\1\0\1\10\5\0\1\10\2\0\70\10"+
    "\7\0\1\10\20\0\27\10\11\0\7\10\1\0\7\10\1\0\7\10"+
    "\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10"+
    "\120\0\1\10\u01d5\0\2\10\52\0\5\10\5\0\2\10\4\0\126\10"+
    "\6\0\3\10\1\0\132\10\1\0\4\10\5\0\51\10\3\0\136\10"+
    "\21\0\33\10\65\0\20\10\u0200\0\u19b6\10\112\0\u51cd\10\63\0\u048d\10"+
    "\103\0\56\10\2\0\u010d\10\3\0\20\10\12\11\2\10\24\0\57\10"+
    "\20\0\31\10\10\0\106\10\61\0\11\10\2\0\147\10\2\0\4\10"+
    "\1\0\4\10\14\0\13\10\115\0\12\10\1\0\3\10\1\0\4\10"+
    "\1\0\27\10\35\0\64\10\16\0\62\10\34\0\12\11\30\0\6\10"+
    "\3\0\1\10\4\0\12\11\34\10\12\0\27\10\31\0\35\10\7\0"+
    "\57\10\34\0\1\10\12\11\46\0\51\10\27\0\3\10\1\0\10\10"+
    "\4\0\12\11\6\0\27\10\3\0\1\10\5\0\60\10\1\0\1\10"+
    "\3\0\2\10\2\0\5\10\2\0\1\10\1\0\1\10\30\0\3\10"+
    "\2\0\13\10\7\0\3\10\14\0\6\10\2\0\6\10\2\0\6\10"+
    "\11\0\7\10\1\0\7\10\221\0\43\10\15\0\12\11\6\0\u2ba4\10"+
    "\14\0\27\10\4\0\61\10\u2104\0\u016e\10\2\0\152\10\46\0\7\10"+
    "\14\0\5\10\5\0\1\10\1\0\12\10\1\0\15\10\1\0\5\10"+
    "\1\0\1\10\1\0\2\10\1\0\2\10\1\0\154\10\41\0\u016b\10"+
    "\22\0\100\10\2\0\66\10\50\0\14\10\164\0\5\10\1\0\207\10"+
    "\23\0\12\11\7\0\32\10\6\0\32\10\13\0\131\10\3\0\6\10"+
    "\2\0\6\10\2\0\6\10\2\0\3\10\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\23\0\1\1\1\2\2\3\2\4\1\1\1\4\1\1"+
    "\1\5\1\0\1\5\2\0\1\5\1\0\2\5\1\6"+
    "\2\7\2\5\1\6\2\7\1\5\2\0\1\1\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\3\4\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\11\1\30\1\0\1\31\1\32\1\33\1\34\1\35"+
    "\1\31\1\36\1\4\1\37\3\4\1\0\1\40\1\0"+
    "\1\41\1\1\1\42\7\43\3\0\1\44\1\0\1\45"+
    "\4\0\1\46\6\0\1\47\1\0\1\50\1\51\1\52"+
    "\1\0\1\53\10\43\1\54\2\43\1\0\1\55\2\0"+
    "\1\56\1\57\2\0\2\60\1\0\1\61\2\0\1\62"+
    "\1\63\10\43\1\64\5\0\1\65\1\0\1\66\5\43"+
    "\1\67\2\43\1\70\3\43\1\71\4\0\1\72\3\43"+
    "\1\73\5\43\1\74\1\43\4\0\1\75\2\43\1\76"+
    "\1\77\4\43\1\100\1\1\1\0\1\101\1\102\2\43"+
    "\1\103\1\104\1\105\1\106\1\0\1\101\1\107\2\43"+
    "\1\0\2\43\1\0\1\110\1\111\22\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u03d4\0\u0436"+
    "\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u052b\0\u055c\0\u058d"+
    "\0\u05be\0\u05ef\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u0682"+
    "\0\u06e4\0\u0715\0\u0746\0\u0777\0\u0746\0\u07a8\0\u07d9\0\u080a"+
    "\0\0\0\u083b\0\0\0\u086c\0\u089d\0\0\0\0\0\0"+
    "\0\0\0\0\0\0\0\0\0\u08ce\0\u08ff\0\0\0\0"+
    "\0\0\0\u0930\0\0\0\0\0\u0961\0\0\0\u0961\0\0"+
    "\0\0\0\0\0\0\0\0\0\u0992\0\0\0\u09c3\0\0"+
    "\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\0\0\u0b1a"+
    "\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2"+
    "\0\u0cd3\0\u0d04\0\u0d35\0\0\0\u0d66\0\0\0\u0d97\0\u0dc8"+
    "\0\u0651\0\u0df9\0\u0e2a\0\u0715\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee"+
    "\0\u08ce\0\0\0\u08ff\0\0\0\0\0\u0f1f\0\u0f50\0\0"+
    "\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8"+
    "\0\u0b7c\0\u1109\0\u113a\0\u116b\0\0\0\u119c\0\u11cd\0\0"+
    "\0\0\0\u11fe\0\u122f\0\u0e2a\0\0\0\u1260\0\0\0\u1291"+
    "\0\u12c2\0\0\0\u0b7c\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7"+
    "\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f"+
    "\0\u1570\0\0\0\u15a1\0\0\0\u15d2\0\u1603\0\u1634\0\u1665"+
    "\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u0b7c\0\u175a\0\u178b\0\u17bc"+
    "\0\0\0\u17ed\0\u181e\0\u184f\0\u1880\0\0\0\u18b1\0\u18e2"+
    "\0\u1913\0\u0b7c\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u0b7c"+
    "\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u0b7c\0\u1b2e\0\u1b5f"+
    "\0\u1b90\0\u0b7c\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u17ed\0\u1c85"+
    "\0\u1cb6\0\u1ce7\0\0\0\u1d18\0\u1d49\0\u0b7c\0\u0b7c\0\u0b7c"+
    "\0\u0b7c\0\u1d7a\0\0\0\0\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e"+
    "\0\u1e6f\0\u1ea0\0\u0b7c\0\u0b7c\0\u1ed1\0\u1f02\0\u1f33\0\u1f64"+
    "\0\u1f95\0\u1fc6\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec"+
    "\0\u211d\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\61\0\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\3\24\1\33\1\34\45\24\3\35\1\36\10\35\1\37"+
    "\44\35\14\40\1\41\44\40\3\42\1\43\6\42\1\44"+
    "\46\42\1\45\1\46\1\47\1\50\1\45\1\51\53\45"+
    "\1\52\1\53\1\54\1\55\2\52\1\56\52\52\7\57"+
    "\1\60\51\57\1\61\3\62\55\61\1\63\1\64\2\65"+
    "\13\63\1\66\25\63\1\66\6\63\1\67\1\70\3\63"+
    "\54\71\1\72\1\73\3\71\45\74\1\75\1\76\6\74"+
    "\1\77\1\100\2\74\1\101\3\102\50\101\1\103\1\104"+
    "\3\101\1\63\3\105\50\63\1\106\4\63\1\0\3\107"+
    "\50\0\1\106\4\0\45\110\1\111\1\112\5\110\1\113"+
    "\1\114\1\110\1\115\1\110\55\0\1\116\3\0\45\117"+
    "\1\120\12\117\1\121\46\122\1\120\11\122\1\123\4\24"+
    "\2\0\4\24\1\0\1\124\46\24\3\25\2\0\4\24"+
    "\1\0\1\124\46\24\2\25\1\27\2\0\4\24\1\0"+
    "\1\124\45\24\4\0\1\125\1\0\1\126\57\0\1\127"+
    "\53\0\4\24\2\0\1\130\3\24\1\0\1\124\45\24"+
    "\1\0\3\131\4\0\1\132\4\0\1\133\1\132\1\0"+
    "\1\134\2\132\2\0\1\132\1\133\2\135\4\132\2\136"+
    "\5\132\3\0\2\132\1\137\1\132\1\140\5\0\13\24"+
    "\1\0\1\141\7\24\3\0\1\24\1\142\1\24\1\0"+
    "\1\24\1\0\1\24\1\0\15\24\2\0\3\24\14\36"+
    "\1\143\60\36\1\143\2\36\1\144\41\36\14\40\1\145"+
    "\60\40\1\145\2\40\1\146\41\40\12\43\1\147\60\43"+
    "\1\147\5\43\1\150\40\43\5\151\1\152\54\151\3\46"+
    "\1\151\1\152\54\151\2\46\1\50\1\151\1\152\60\151"+
    "\1\153\53\151\6\154\1\155\53\154\3\53\2\154\1\155"+
    "\53\154\2\53\1\55\2\154\1\155\60\154\1\156\52\154"+
    "\7\57\1\157\60\57\1\160\51\57\1\0\3\62\56\0"+
    "\3\64\56\0\1\64\2\65\55\0\45\161\1\162\13\161"+
    "\46\163\1\164\12\163\1\0\3\102\56\0\3\107\50\0"+
    "\1\165\14\0\1\166\4\0\2\166\1\0\3\166\2\0"+
    "\17\166\3\0\5\166\5\0\45\117\1\0\12\117\46\0"+
    "\1\74\13\0\46\122\1\0\11\122\47\0\1\74\12\0"+
    "\13\24\2\0\7\24\3\0\1\24\1\0\1\24\1\0"+
    "\1\24\1\0\1\24\1\0\15\24\2\0\3\24\7\0"+
    "\1\167\57\0\1\170\52\0\4\24\1\0\1\127\4\24"+
    "\1\0\1\124\45\24\1\0\3\131\65\0\2\132\3\0"+
    "\2\132\1\0\3\132\2\0\17\132\3\0\5\132\15\0"+
    "\2\132\3\0\1\132\1\171\1\0\3\132\2\0\14\132"+
    "\1\172\2\132\3\0\5\132\15\0\2\132\3\0\2\132"+
    "\1\0\1\132\1\173\1\132\2\0\13\132\1\174\3\132"+
    "\3\0\1\175\4\132\15\0\2\132\3\0\2\132\1\0"+
    "\1\176\2\132\2\0\1\177\11\132\1\177\4\132\3\0"+
    "\5\132\15\0\2\132\3\0\2\132\1\0\1\132\1\200"+
    "\1\132\2\0\17\132\3\0\4\132\1\201\15\0\2\132"+
    "\3\0\2\132\1\0\3\132\2\0\10\132\2\202\5\132"+
    "\3\0\5\132\15\0\2\132\3\0\2\132\1\0\3\132"+
    "\2\0\17\132\3\0\3\132\1\203\1\132\22\0\1\204"+
    "\10\0\1\204\15\0\1\205\2\0\1\206\42\0\2\207"+
    "\26\0\14\36\1\143\2\36\1\210\41\36\14\40\1\145"+
    "\2\40\1\211\41\40\12\43\1\147\5\43\1\212\52\43"+
    "\1\147\6\43\1\213\37\43\5\151\1\214\53\151\5\0"+
    "\1\215\53\0\6\154\1\216\57\154\1\217\1\216\52\154"+
    "\7\57\1\220\56\57\1\221\1\57\1\220\51\57\10\0"+
    "\2\166\3\0\2\166\1\0\3\166\2\0\17\166\3\0"+
    "\5\166\14\0\1\222\61\0\2\132\3\0\1\223\1\132"+
    "\1\0\3\132\2\0\1\132\1\223\15\132\3\0\5\132"+
    "\15\0\2\132\3\0\2\132\1\0\3\132\2\0\6\132"+
    "\2\224\7\132\3\0\5\132\15\0\2\132\3\0\2\132"+
    "\1\0\2\132\1\225\2\0\17\132\3\0\5\132\15\0"+
    "\2\132\3\0\2\132\1\0\3\132\2\0\2\132\2\226"+
    "\13\132\3\0\5\132\15\0\2\132\3\0\2\132\1\0"+
    "\3\132\2\0\1\227\11\132\1\227\4\132\3\0\5\132"+
    "\15\0\2\132\3\0\2\132\1\0\3\132\2\0\4\132"+
    "\2\230\11\132\3\0\5\132\15\0\2\132\3\0\2\132"+
    "\1\0\3\132\2\0\17\132\3\0\3\132\1\231\1\132"+
    "\15\0\2\132\3\0\2\132\1\0\3\132\2\0\4\132"+
    "\2\232\11\132\3\0\5\132\15\0\2\132\3\0\2\132"+
    "\1\0\1\233\2\132\2\0\17\132\3\0\5\132\15\0"+
    "\2\132\3\0\2\132\1\0\3\132\2\0\6\132\2\234"+
    "\7\132\3\0\5\132\23\0\1\235\112\0\1\236\43\0"+
    "\2\237\24\0\12\43\1\147\6\43\1\240\51\43\1\147"+
    "\7\43\1\241\36\43\5\154\1\242\1\216\52\154\5\57"+
    "\1\243\1\57\1\220\56\57\1\244\1\57\1\157\51\57"+
    "\10\0\2\132\3\0\2\132\1\0\1\245\2\132\2\0"+
    "\17\132\3\0\5\132\15\0\2\132\3\0\1\246\1\132"+
    "\1\0\3\132\2\0\1\132\1\246\2\247\4\132\2\250"+
    "\5\132\3\0\4\132\1\251\15\0\2\132\3\0\2\132"+
    "\1\0\1\252\2\132\2\0\17\132\3\0\5\132\15\0"+
    "\2\132\3\0\2\132\1\0\1\253\2\132\2\0\17\132"+
    "\3\0\5\132\15\0\2\132\3\0\2\132\1\0\3\132"+
    "\2\0\1\254\11\132\1\254\4\132\3\0\5\132\15\0"+
    "\2\132\3\0\1\255\1\132\1\0\3\132\2\0\1\132"+
    "\1\255\15\132\3\0\5\132\15\0\2\132\3\0\2\132"+
    "\1\0\3\132\2\0\13\132\1\256\3\132\3\0\5\132"+
    "\15\0\2\132\3\0\2\132\1\0\3\132\2\0\13\132"+
    "\1\257\3\132\3\0\5\132\15\0\2\132\3\0\2\132"+
    "\1\0\1\260\2\132\2\0\17\132\3\0\5\132\22\0"+
    "\1\261\10\0\1\261\72\0\1\262\55\0\2\263\22\0"+
    "\12\43\1\147\7\43\1\264\50\43\1\147\2\43\1\265"+
    "\10\43\1\265\32\43\5\57\1\266\1\57\1\157\51\57"+
    "\10\0\2\132\3\0\2\132\1\0\1\132\1\267\1\132"+
    "\2\0\17\132\3\0\5\132\15\0\2\132\3\0\1\132"+
    "\1\270\1\0\3\132\2\0\17\132\3\0\5\132\15\0"+
    "\2\132\3\0\2\132\1\0\1\271\2\132\2\0\17\132"+
    "\3\0\5\132\15\0\2\132\3\0\2\132\1\0\3\132"+
    "\2\0\17\132\3\0\4\132\1\272\15\0\2\132\3\0"+
    "\2\132\1\0\3\132\2\0\17\132\3\0\3\132\1\273"+
    "\1\132\15\0\2\132\3\0\2\132\1\0\3\132\2\0"+
    "\10\132\2\274\5\132\3\0\5\132\15\0\2\132\3\0"+
    "\2\132\1\0\1\132\1\275\1\132\2\0\17\132\3\0"+
    "\5\132\15\0\2\132\3\0\2\132\1\0\3\132\2\0"+
    "\10\132\2\276\5\132\3\0\5\132\15\0\2\132\3\0"+
    "\2\132\1\0\3\132\2\0\16\132\1\277\3\0\5\132"+
    "\15\0\2\132\3\0\2\132\1\0\2\132\1\300\2\0"+
    "\17\132\3\0\5\132\15\0\2\132\3\0\2\132\1\0"+
    "\3\132\2\0\14\132\1\301\2\132\3\0\5\132\5\0"+
    "\13\262\1\0\1\302\44\262\15\0\1\303\10\0\1\303"+
    "\32\0\12\43\1\147\2\43\1\304\10\43\1\304\44\43"+
    "\1\147\3\43\1\305\42\43\10\0\2\132\3\0\2\132"+
    "\1\0\3\132\2\0\1\306\11\132\1\306\4\132\3\0"+
    "\5\132\15\0\2\132\3\0\1\307\1\132\1\0\3\132"+
    "\2\0\1\132\1\307\15\132\3\0\5\132\15\0\2\132"+
    "\3\0\2\132\1\0\3\132\2\0\4\132\2\310\11\132"+
    "\3\0\5\132\15\0\2\132\3\0\2\132\1\0\3\132"+
    "\2\0\6\132\2\311\7\132\3\0\5\132\15\0\2\132"+
    "\3\0\2\132\1\0\3\132\2\0\17\132\3\0\4\132"+
    "\1\312\15\0\2\132\3\0\2\132\1\0\2\132\1\313"+
    "\2\0\17\132\3\0\5\132\15\0\2\132\3\0\2\132"+
    "\1\0\3\132\2\0\17\132\3\0\3\132\1\314\1\132"+
    "\15\0\2\132\3\0\2\132\1\0\2\132\1\315\2\0"+
    "\17\132\3\0\5\132\15\0\2\132\3\0\2\132\1\0"+
    "\3\132\2\0\4\132\2\316\11\132\3\0\5\132\5\0"+
    "\13\262\1\0\1\302\2\262\1\317\41\262\25\0\1\320"+
    "\11\0\1\320\21\0\12\43\1\147\3\43\1\321\54\43"+
    "\1\147\2\43\1\322\10\43\1\322\32\43\10\0\2\132"+
    "\3\0\2\132\1\0\3\132\1\323\1\0\17\132\3\0"+
    "\5\132\15\0\2\132\3\0\2\132\1\0\3\132\2\0"+
    "\1\324\11\132\1\324\4\132\3\0\5\132\15\0\2\132"+
    "\3\0\2\132\1\0\1\325\2\132\2\0\17\132\3\0"+
    "\5\132\15\0\2\132\3\0\2\132\1\0\3\132\2\0"+
    "\2\132\2\326\13\132\3\0\5\132\15\0\2\132\3\0"+
    "\2\132\1\0\1\132\1\327\1\132\2\0\17\132\3\0"+
    "\5\132\15\0\2\132\3\0\2\132\1\0\1\330\2\132"+
    "\2\0\17\132\3\0\5\132\15\0\2\132\3\0\1\132"+
    "\1\331\1\0\3\132\2\0\17\132\3\0\5\132\6\0"+
    "\3\332\55\0\12\43\1\147\2\43\1\333\10\43\1\333"+
    "\32\43\23\0\1\334\45\0\2\132\3\0\2\132\1\0"+
    "\3\132\2\0\10\132\2\335\5\132\3\0\5\132\15\0"+
    "\2\132\3\0\2\132\1\0\3\132\2\0\14\132\1\336"+
    "\2\132\3\0\5\132\6\0\3\332\34\0\1\337\30\0"+
    "\2\132\3\0\2\132\1\0\3\132\2\0\17\132\3\0"+
    "\3\132\1\340\1\132\15\0\2\132\3\0\2\132\1\0"+
    "\3\132\2\0\4\132\2\341\11\132\3\0\5\132\46\0"+
    "\1\342\27\0\2\132\3\0\2\132\1\0\1\132\1\343"+
    "\1\132\2\0\17\132\3\0\5\132\15\0\2\132\3\0"+
    "\1\132\1\344\1\0\3\132\2\0\17\132\3\0\5\132"+
    "\26\0\1\345\101\0\1\346\61\0\1\347\56\0\1\350"+
    "\61\0\1\351\36\0\1\352\41\0\3\352\40\0\1\353"+
    "\15\0\3\353\11\0\1\354\10\0\1\354\16\0\1\355"+
    "\1\356\30\0\1\357\57\0\1\360\10\0\1\360\47\0"+
    "\1\361\10\0\1\361\47\0\1\362\10\0\1\362\50\0"+
    "\1\363\60\0\1\364\43\0\3\362\13\0\1\61\56\0"+
    "\1\365\10\0\1\365\47\0\1\366\10\0\1\366\77\0"+
    "\1\362\61\0\1\362\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8771];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\10\22\0\12\1\1\0\1\1\2\0\1\1\1\0"+
    "\13\1\2\0\1\11\1\1\1\11\2\1\7\11\2\1"+
    "\3\11\1\1\2\11\1\1\1\11\1\0\5\11\1\1"+
    "\1\11\1\1\1\11\3\1\1\0\1\1\1\0\1\11"+
    "\11\1\3\0\1\11\1\0\1\11\4\0\1\1\6\0"+
    "\1\11\1\0\2\11\1\1\1\0\1\11\13\1\1\0"+
    "\1\11\2\0\2\11\2\0\1\1\1\11\1\0\1\11"+
    "\2\0\1\11\12\1\5\0\1\11\1\0\1\11\14\1"+
    "\1\11\4\0\1\11\13\1\4\0\13\1\1\0\1\1"+
    "\1\11\6\1\1\0\2\11\2\1\1\0\2\1\1\0"+
    "\2\1\22\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */
    private ByteStack stack = new ByteStack();
    private LexerInput input;
    private int parenBalanceInDirective = 0; //for directive arguments
    private boolean argHasVariable = false;

    public BladeColoringLexer(LexerRestartInfo info) {
        this.input = info.input();
        if(info.state() != null) {
            //reset state
            setState((LexerState) info.state(), parenBalanceInDirective);
        } else {
            //initial state
            stack.push(ST_HTML);
            zzState = ST_HTML;
            zzLexicalState = ST_HTML;
        }

    }

    public static final class LexerState  {
        final ByteStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;
        final int parenBalanceInDirective; 

        LexerState(ByteStack stack, int zzState, int zzLexicalState, int parenBalanceInDirective) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.parenBalanceInDirective = parenBalanceInDirective;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null || obj.getClass() != this.getClass()) {
                return false;
            }
            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                && (this.zzState == state.zzState)
                //&& (this.zzLexicalState == state.zzLexicalState)
                //&& (this.parenBalanceInDirective == state.parenBalanceInDirective)
                );
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            hash = 31 * hash + this.parenBalanceInDirective;
            if (stack != null) {
                hash = 31 * hash + this.stack.hashCode();
            }
            return hash;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.copyOf(), zzState, zzLexicalState, parenBalanceInDirective);
    }

    public void setState(LexerState state, int parenBalanceInDirective) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
        this.parenBalanceInDirective = state.parenBalanceInDirective;
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    //other functions

    protected void pushBack(int i) {
        yypushback(i);
    }

    protected void popState() {
        yybegin(stack.pop());
    }

    protected void pushState(final int state) {
        stack.push(getZZLexicalState());
        yybegin(state);
    }

    /**
     * Returns the smallest of multiple index values.
     *
     * @param values values
     * @return the smallest of multiple index values, -1 if all values are -1
     */
    private static int minIndex(int... values) {
        assert values.length != 0 : "No values"; // NOI18N
        boolean first = true;
        int min = -1;
        for (int value : values) {
            if (value == -1) {
                continue;
            }
            if (first) {
                first = false;
                min = value;
                continue;
            }
            min = Math.min(min, value);
        }
        return min;
    }

    /**
     * Get the first whitespace index of text.
     *
     * @param text the text
     * @return the first index of whitespace if whitespace exists, otherwise -1
     */
    private static int firstWhitespaceIndexOf(String text) {
        return minIndex(
            text.indexOf(' '),
            text.indexOf('\n'),
            text.indexOf('\r'),
            text.indexOf('\t')
        );
    }

    private boolean isWhitespace(){
    	return yytext().replaceAll("\\s+","").length() == 0;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BladeColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public BladeColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1754) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public BladeTokenId findNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();
            
            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 21: 
          { if (parenBalanceInDirective != 0 && yytext().replaceAll("\\s+","").length() == 1){
    ///??
            return BladeTokenId.WHITESPACE;
    }
          }
        case 74: break;
        case 49: 
          { String yytext = yytext();
    popState();
    return BladeTokenId.T_BLADE_CLOSE_ECHO_ESCAPED;
          }
        case 75: break;
        case 33: 
          { String yytext = yytext();
    return BladeTokenId.T_BLADE_CLOSE_ECHO;
          }
        case 76: break;
        case 69: 
          { pushState(ST_PHP_LOOKING_FOR_DIRECTIVE_ARG);
    return BladeTokenId.T_BLADE_INCLUDE;
          }
        case 77: break;
        case 3: 
          { String yytext = yytext();
	//whitespace
    return BladeTokenId.NEWLINE;
          }
        case 78: break;
        case 23: 
          { String yytext = yytext();
    parenBalanceInDirective--;
    if (yylength() == 1){
    	parenBalanceInDirective=0;
        popState();
        return BladeTokenId.BLADE_PHP_TOKEN;
    }
    if (parenBalanceInDirective == 0){
    	yypushback(1);
    	switch (zzLexicalState) {
        case ST_PHP_IF_EXPR:
                return BladeTokenId.T_BLADE_PHP_COND;
        case ST_PHP_LOOP_EXPR:
                return BladeTokenId.T_BLADE_PHP_LOOP_PARAM;
        } 
    }
          }
        case 79: break;
        case 40: 
          { //string debug
	String yytext = yytext();
	int debug = 1;
	//might catch other values also
	if (yytext.startsWith("'")){
		return BladeTokenId.BLADE_PHP_STRING;
	}
          }
        case 80: break;
        case 18: 
          { //directive end
    parenBalanceInDirective--;
    String yytext = yytext();
    if (yylength() == 1 && parenBalanceInDirective == 0){
        yybegin(ST_HTML);
        return BladeTokenId.BLADE_PHP_TOKEN;
    }
    if (parenBalanceInDirective <= 0){
    	parenBalanceInDirective++;
	    yypushback(1);
    	return BladeTokenId.T_BLADE_PHP_VAR;
    }
          }
        case 81: break;
        case 42: 
          { argHasVariable = true;
          }
        case 82: break;
        case 26: 
          { //can try to remove this state
    //should add a condition to not include it as a argument
    String yytext = yytext();
    int test = 1;
    if (yylength() == 1){
        pushState(ST_STRING_DQUOTE);
    }
          }
        case 83: break;
        case 11: 
          { yybegin(ST_HTML);
    return BladeTokenId.WHITESPACE;
          }
        case 84: break;
        case 41: 
          { String yytext = yytext();
	switch (zzLexicalState) {
            case ST_PHP_LOOKING_FOR_IF_EXPR:
                    popState();
                    pushState(ST_PHP_IF_EXPR);
                    break;
            case ST_PHP_LOOKING_FOR_LOOP_EXPR:
                    popState();
                    pushState(ST_PHP_LOOP_EXPR);
                    break;
	}
	
	yypushback(1);
	return BladeTokenId.WHITESPACE;
          }
        case 85: break;
        case 7: 
          { String yytext = yytext();
    popState();
    return BladeTokenId.T_HTML;
          }
        case 86: break;
        case 13: 
          { //directive paranthesis
	parenBalanceInDirective++;
	pushState(ST_BLADE_ARGUMENT);
    return BladeTokenId.BLADE_PHP_TOKEN;
          }
        case 87: break;
        case 38: 
          { String yytext = yytext();
    popState();
    return BladeTokenId.T_BLADE_CLOSE_ECHO;
          }
        case 88: break;
        case 60: 
          { pushState(ST_PHP_LOOKING_FOR_DIRECTIVE_ARG);
    return BladeTokenId.T_BLADE_YIELD;
          }
        case 89: break;
        case 17: 
          { //second param state
    String yytext = yytext();
    parenBalanceInDirective--;
    if (yylength() == 1){
    	parenBalanceInDirective=0;
        yybegin(ST_HTML);
        return BladeTokenId.BLADE_PHP_TOKEN;
    }
    if (parenBalanceInDirective <= 0){
		yypushback(1);
        return BladeTokenId.T_BLADE_PHP_VAR;
    }
          }
        case 90: break;
        case 29: 
          { String yytext = yytext();
    if (yylength() == 1){
       parenBalanceInDirective = 0;
       popState();
       return BladeTokenId.BLADE_PHP_TOKEN;
    }
    parenBalanceInDirective--;
    if (parenBalanceInDirective <= 0){
        if (yylength() == 1){
           popState();
           return BladeTokenId.BLADE_PHP_TOKEN;
        }
        yypushback(1);
        popState();
        pushState(ST_CLOSE_PARANTHEIS);
        argHasVariable = false;
		return BladeTokenId.T_DIRECTIVE_ARG;
    }
          }
        case 91: break;
        case 30: 
          { String yytext = yytext();
       popState();
       return BladeTokenId.BLADE_PHP_TOKEN;
          }
        case 92: break;
        case 20: 
          { String yytext = yytext();
    int debug = 1;
          }
        case 93: break;
        case 39: 
          { //should have a flag for include
	//string debug
	String yytext = yytext();
	int debug = 1;
	//might catch other values also
	if (yytext.startsWith("\"")){
            return BladeTokenId.BLADE_PHP_STRING;
	}
          }
        case 94: break;
        case 57: 
          { pushState(ST_PHP);
    return BladeTokenId.T_OPEN_PHP;
          }
        case 95: break;
        case 46: 
          { if (yylength() == 2){
       popState();
       return BladeTokenId.T_CLOSE_PHP;
    }
    yypushback(2);
    return BladeTokenId.T_PHP;
          }
        case 96: break;
        case 53: 
          { String yytext = yytext();
    if (yylength() == 3){
    	popState();
    	return BladeTokenId.T_BLADE_CLOSE_ECHO;
    }
    yypushback(3);
    return BladeTokenId.T_BLADE_PHP_ECHO;
          }
        case 97: break;
        case 63: 
          { pushState(ST_PHP_LOOKING_FOR_IF_EXPR);
    return BladeTokenId.T_BLADE_ELSEIF;
          }
        case 98: break;
        case 1: 
          { return BladeTokenId.T_HTML;
          }
        case 99: break;
        case 56: 
          { return BladeTokenId.T_BLADE_STOP;
          }
        case 100: break;
        case 51: 
          { pushState(ST_BLADE_PHP);
    return BladeTokenId.T_BLADE_PHP_OPEN;
          }
        case 101: break;
        case 44: 
          { pushState(ST_PHP_LOOKING_FOR_IF_EXPR);
    return BladeTokenId.T_BLADE_IF;
          }
        case 102: break;
        case 22: 
          { String yytext = yytext();
	parenBalanceInDirective++;
	if (yylength() == 1 && parenBalanceInDirective == 1){
		return BladeTokenId.BLADE_PHP_TOKEN;
	}
          }
        case 103: break;
        case 25: 
          { String yytext = yytext();
	int test = 1;
          }
        case 104: break;
        case 35: 
          { String yytext = yytext();
   pushState(ST_PHP_LOOKING_FOR_DIRECTIVE_ARG);
   return BladeTokenId.T_BLADE_DIRECTIVE;
          }
        case 105: break;
        case 8: 
          { popState();
        return BladeTokenId.T_HTML;
          }
        case 106: break;
        case 70: 
          { pushState(ST_PHP_LOOKING_FOR_LOOP_EXPR);
    return BladeTokenId.T_BLADE_FOREACH;
          }
        case 107: break;
        case 55: 
          { return BladeTokenId.T_BLADE_ELSE;
          }
        case 108: break;
        case 65: 
          { String ttext = yytext();
    popState();
    if (yylength() == "@endphp".length()){
        return BladeTokenId.T_BLADE_ENDPHP;
    }
    
    yypushback("@endphp".length());
    return BladeTokenId.T_BLADE_PHP;
          }
        case 109: break;
        case 59: 
          { return BladeTokenId.T_BLADE_ENDIF;
          }
        case 110: break;
        case 50: 
          { pushState(ST_COMMENT);
    return BladeTokenId.T_BLADE_COMMENT;
          }
        case 111: break;
        case 24: 
          { switch (zzLexicalState) {
            case ST_PHP_LOOKING_FOR_IF_EXPR:
                    popState();
                    pushState(ST_PHP_IF_EXPR);
                    break;
            case ST_PHP_LOOKING_FOR_LOOP_EXPR:
                    popState();
                    pushState(ST_PHP_LOOP_EXPR);
                    break;
	}
	parenBalanceInDirective++;
	return BladeTokenId.BLADE_PHP_TOKEN;
          }
        case 112: break;
        case 31: 
          { popState();
                                   return BladeTokenId.BLADE_PHP_STRING;
          }
        case 113: break;
        case 72: 
          { return BladeTokenId.T_BLADE_ENDSECTION;
          }
        case 114: break;
        case 45: 
          { pushState(ST_PHP_ECHO);
    return BladeTokenId.T_PHP_OPEN_ECHO;
          }
        case 115: break;
        case 43: 
          { String yytext = yytext();
    pushState(ST_BLADE_ECHO_ESCAPED);
    return BladeTokenId.T_BLADE_OPEN_ECHO_ESCAPED;
          }
        case 116: break;
        case 12: 
          { //inline div tag directive
	yybegin(ST_HTML);
	return BladeTokenId.T_HTML;
          }
        case 117: break;
        case 68: 
          { pushState(ST_PHP_LOOKING_FOR_DIRECTIVE_ARG);
    return BladeTokenId.T_BLADE_SECTION;
          }
        case 118: break;
        case 52: 
          { pushState(ST_PHP_LOOKING_FOR_LOOP_EXPR);
    return BladeTokenId.T_BLADE_FOR;
          }
        case 119: break;
        case 15: 
          { //second param state
          }
        case 120: break;
        case 2: 
          { String yytext = yytext();
	//whitespace
    return BladeTokenId.WHITESPACE;
          }
        case 121: break;
        case 36: 
          { if (yylength() == 2){
	    popState(); 
		return BladeTokenId.T_CLOSE_PHP;
	}
	yypushback(2);
    return BladeTokenId.T_PHP;
          }
        case 122: break;
        case 32: 
          { String yytext = yytext();
    pushState(ST_BLADE_ECHO);
    return BladeTokenId.T_BLADE_OPEN_ECHO;
          }
        case 123: break;
        case 47: 
          { if (yylength() == 2){
       popState();
       return BladeTokenId.T_CLOSE_PHP;
    }
    yypushback(2);
    return BladeTokenId.T_PHP_ECHO;
          }
        case 124: break;
        case 58: 
          { yypushback(4);
    return BladeTokenId.T_BLADE_COMMENT;
          }
        case 125: break;
        case 66: 
          { return BladeTokenId.T_BLADE_ENDPHP;
          }
        case 126: break;
        case 16: 
          { //second param state
	String yytext = yytext();
	parenBalanceInDirective++;
	if (yylength() == 1 && parenBalanceInDirective == 1){
		return BladeTokenId.BLADE_PHP_TOKEN;
	}
          }
        case 127: break;
        case 37: 
          { if (yylength() == 2){
	    popState(); 
		return BladeTokenId.T_CLOSE_PHP;
	}
	yypushback(2);
    return BladeTokenId.T_PHP_ECHO;
          }
        case 128: break;
        case 5: 
          { //if (yylength() > 1) {
        //    yypushback(1);
        //}
        //pushState(ST_HIGHLIGHTING_ERROR);
          }
        case 129: break;
        case 67: 
          { pushState(ST_PHP_LOOKING_FOR_DIRECTIVE_ARG);
    return BladeTokenId.T_BLADE_EXTENDS;
          }
        case 130: break;
        case 6: 
          { //no break;
          }
        case 131: break;
        case 19: 
          { //debug comma value
	String yytext = yytext();
	int debug = 5;
	pushState(ST_LOOKING_FOR_SECOND_PARAMETER);
	if (yylength() == 1) {
		return BladeTokenId.T_BLADE_COMMA;
	}
          }
        case 132: break;
        case 28: 
          { String yytext = yytext();
    parenBalanceInDirective++;
    if (parenBalanceInDirective == 1){
        //first paranthesis
    	return BladeTokenId.BLADE_PHP_TOKEN;
    }
          }
        case 133: break;
        case 34: 
          { return BladeTokenId.T_BLADE_DIRECTIVE_PREFIX;
          }
        case 134: break;
        case 71: 
          { String ttext = yytext();
    popState();
    return BladeTokenId.T_BLADE_ENDPHP;
          }
        case 135: break;
        case 64: 
          { return BladeTokenId.T_XML;
          }
        case 136: break;
        case 9: 
          { //any char directive arg
    String yytext = yytext();
    int debug = 1;
          }
        case 137: break;
        case 27: 
          { String yytext = yytext();
    int test = 1;
    if (yylength() == 1){
        pushState(ST_STRING_SQUOTE);
    }
          }
        case 138: break;
        case 61: 
          { return BladeTokenId.T_BLADE_PARENT;
          }
        case 139: break;
        case 54: 
          { popState();
    return BladeTokenId.T_BLADE_COMMENT;
          }
        case 140: break;
        case 62: 
          { return BladeTokenId.T_BLADE_ENDFOR;
          }
        case 141: break;
        case 48: 
          { String yytext = yytext();
    if (yylength() == 2){
    	popState();
    	return BladeTokenId.T_BLADE_CLOSE_ECHO;
    }
    yypushback(2);
    return BladeTokenId.T_BLADE_PHP_ECHO;
          }
        case 142: break;
        case 14: 
          { //directive end
    parenBalanceInDirective--;
    String yytext = yytext();
    if (parenBalanceInDirective == 0){
        yybegin(ST_HTML);
    }
    return BladeTokenId.BLADE_PHP_TOKEN;
          }
        case 143: break;
        case 73: 
          { return BladeTokenId.T_BLADE_ENDFOREACH;
          }
        case 144: break;
        case 4: 
          { 
          }
        case 145: break;
        case 10: 
          { String yytext = yytext();
    if (yytext.contains("\n")){
        //finish searching for arguments
        popState();
    }
    if (isWhitespace()){
    	return BladeTokenId.WHITESPACE;
    }
          }
        case 146: break;
        default: 
          if (zzInput == YYEOF) 
            //zzAtEOF = true;
            switch (zzLexicalState) {
            case ST_PHP: {
              if (input.readLength() > 0) {
    input.backup(1);  // backup eof
    return BladeTokenId.T_PHP;
  }
  else {
      return null;
  }
            }
            case 247: break;
            case ST_COMMENT: {
              if (input.readLength() > 0) {
    input.backup(1);  // backup eof
    return BladeTokenId.T_BLADE_COMMENT;
  }
  else {
      return null;
  }
            }
            case 248: break;
            default:
              {         if(input.readLength() > 0) {
            String yytext = yytext();
            // backup eof
            input.backup(1);
            //and return the text as error token
             return BladeTokenId.T_HTML;
        } else {
            return null;
        }
 }
            }
          
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
