/* The following code was generated by JFlex 1.4.3 on 8/14/23, 6:45 AM */

   /*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2016 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2016 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.blade.editor.lexer;

import org.netbeans.api.lexer.TokenId;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;
import org.netbeans.modules.php.blade.editor.common.ByteStack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/14/23, 6:45 AM from the specification file
 * <tt>C:/LOCAL_P5_APPS/lmc/blade-php/tools/BladeColoringLexer.flex</tt>
 */
public class BladeColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_BLADE_PARAMETER_EXPRESSION = 26;
  public static final int ST_LOOKING_FOR_PARAMETER_EXPRESSION = 24;
  public static final int ST_AFTER_DIRECTIVE_ARG = 30;
  public static final int ST_PHP = 4;
  public static final int ST_COMMENT = 20;
  public static final int ST_BLADE_ARGUMENT = 28;
  public static final int ST_BLADE_PHP = 10;
  public static final int ST_BLADE_ECHO = 12;
  public static final int ST_DIRECTIVE = 18;
  public static final int ST_BLADE_ECHO_ESCAPED = 16;
  public static final int YYINITIAL = 0;
  public static final int ST_VALIDATE_BLADE_ECHO = 14;
  public static final int ST_INLINE_PHP = 8;
  public static final int ST_PHP_ECHO = 6;
  public static final int ST_HTML = 2;
  public static final int ST_CLOSE_BLADE_PHP = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  0,  0,  4,  4,  5,  5,  0,  0, 
     6,  6,  0,  0,  7,  7,  0,  0,  8,  8,  9,  9,  0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\2\0\1\2\22\0\1\47\1\6\1\50\2\0"+
    "\1\57\1\0\1\46\1\44\1\45\2\56\1\0\1\7\1\13\1\55"+
    "\12\11\1\51\1\0\1\14\1\21\1\20\1\15\1\12\1\34\1\53"+
    "\1\31\1\24\1\22\1\43\1\36\1\17\1\26\1\10\1\54\1\27"+
    "\1\35\1\23\1\33\1\16\1\10\1\37\1\30\1\32\1\41\1\10"+
    "\1\40\1\42\1\25\1\10\1\52\3\0\1\10\1\0\1\34\1\53"+
    "\1\31\1\24\1\22\1\43\1\36\1\17\1\26\1\10\1\54\1\27"+
    "\1\35\1\23\1\33\1\16\1\10\1\37\1\30\1\32\1\41\1\10"+
    "\1\40\1\42\1\25\1\10\1\4\1\60\1\5\1\0\53\10\1\10"+
    "\12\10\1\10\4\10\1\10\5\10\27\10\1\10\37\10\1\10\10\10"+
    "\u01c2\10\4\0\14\10\16\0\5\10\7\0\1\10\1\0\1\10\201\0"+
    "\5\10\1\0\2\10\2\0\4\10\1\0\1\10\6\0\1\10\1\0"+
    "\3\10\1\0\1\10\1\0\24\10\1\0\123\10\1\0\213\10\10\0"+
    "\246\10\1\0\46\10\2\0\1\10\6\0\51\10\107\0\33\10\4\0"+
    "\4\10\55\0\53\10\25\0\12\11\4\0\2\10\1\0\143\10\1\0"+
    "\1\10\17\0\2\10\7\0\2\10\12\11\3\10\2\0\1\10\20\0"+
    "\1\10\1\0\36\10\35\0\131\10\13\0\1\10\16\0\12\11\41\10"+
    "\11\0\2\10\4\0\1\10\5\0\26\10\4\0\1\10\11\0\1\10"+
    "\3\0\1\10\27\0\31\10\7\0\13\10\65\0\25\10\1\0\22\10"+
    "\74\0\66\10\3\0\1\10\22\0\1\10\7\0\12\10\4\0\12\11"+
    "\1\0\20\10\4\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10"+
    "\1\0\1\10\3\0\4\10\3\0\1\10\20\0\1\10\15\0\2\10"+
    "\1\0\3\10\4\0\12\11\2\10\12\0\1\10\10\0\6\10\4\0"+
    "\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0\2\10\1\0"+
    "\2\10\37\0\4\10\1\0\1\10\7\0\12\11\2\0\3\10\20\0"+
    "\11\10\1\0\3\10\1\0\26\10\1\0\7\10\1\0\2\10\1\0"+
    "\5\10\3\0\1\10\22\0\1\10\17\0\2\10\4\0\12\11\11\0"+
    "\1\10\13\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0"+
    "\2\10\1\0\5\10\3\0\1\10\36\0\2\10\1\0\3\10\4\0"+
    "\12\11\1\0\1\10\21\0\1\10\1\0\6\10\3\0\3\10\1\0"+
    "\4\10\3\0\2\10\1\0\1\10\1\0\2\10\3\0\2\10\3\0"+
    "\3\10\3\0\14\10\26\0\1\10\25\0\12\11\25\0\10\10\1\0"+
    "\3\10\1\0\27\10\1\0\20\10\3\0\1\10\32\0\3\10\5\0"+
    "\2\10\4\0\12\11\20\0\1\10\4\0\10\10\1\0\3\10\1\0"+
    "\27\10\1\0\12\10\1\0\5\10\3\0\1\10\40\0\1\10\1\0"+
    "\2\10\4\0\12\11\1\0\2\10\21\0\11\10\1\0\3\10\1\0"+
    "\51\10\2\0\1\10\20\0\1\10\5\0\3\10\10\0\3\10\4\0"+
    "\12\11\12\0\6\10\5\0\22\10\3\0\30\10\1\0\11\10\1\0"+
    "\1\10\2\0\7\10\37\0\12\11\21\0\60\10\1\0\2\10\14\0"+
    "\7\10\11\0\12\11\47\0\2\10\1\0\1\10\1\0\5\10\1\0"+
    "\30\10\1\0\1\10\1\0\12\10\1\0\2\10\11\0\1\10\2\0"+
    "\5\10\1\0\1\10\11\0\12\11\2\0\4\10\40\0\1\10\37\0"+
    "\12\11\26\0\10\10\1\0\44\10\33\0\5\10\163\0\53\10\24\0"+
    "\1\10\12\11\6\0\6\10\4\0\4\10\3\0\1\10\3\0\2\10"+
    "\7\0\3\10\4\0\15\10\14\0\1\10\1\0\12\11\6\0\46\10"+
    "\1\0\1\10\5\0\1\10\2\0\53\10\1\0\u014d\10\1\0\4\10"+
    "\2\0\7\10\1\0\1\10\1\0\4\10\2\0\51\10\1\0\4\10"+
    "\2\0\41\10\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10"+
    "\2\0\17\10\1\0\71\10\1\0\4\10\2\0\103\10\45\0\20\10"+
    "\20\0\126\10\2\0\6\10\3\0\u026c\10\2\0\21\10\1\0\32\10"+
    "\5\0\113\10\6\0\10\10\7\0\15\10\1\0\4\10\16\0\22\10"+
    "\16\0\22\10\16\0\15\10\1\0\3\10\17\0\64\10\43\0\1\10"+
    "\4\0\1\10\3\0\12\11\46\0\12\11\6\0\131\10\7\0\5\10"+
    "\2\0\42\10\1\0\1\10\5\0\106\10\12\0\37\10\47\0\12\11"+
    "\36\10\2\0\5\10\13\0\54\10\4\0\32\10\6\0\12\11\46\0"+
    "\27\10\11\0\65\10\53\0\12\11\6\0\12\11\15\0\1\10\135\0"+
    "\57\10\21\0\7\10\4\0\12\11\51\0\36\10\15\0\2\10\12\11"+
    "\54\10\32\0\44\10\34\0\12\11\3\0\3\10\12\11\44\10\2\0"+
    "\11\10\7\0\53\10\2\0\3\10\51\0\4\10\1\0\6\10\1\0"+
    "\2\10\3\0\1\10\5\0\300\10\100\0\u0116\10\2\0\6\10\2\0"+
    "\46\10\2\0\6\10\2\0\10\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\37\10\2\0\65\10\1\0\7\10\1\0\1\10\3\0"+
    "\3\10\1\0\7\10\3\0\4\10\2\0\6\10\4\0\15\10\5\0"+
    "\3\10\1\0\7\10\164\0\1\10\15\0\1\10\20\0\15\10\145\0"+
    "\1\10\4\0\1\10\2\0\12\10\1\0\1\10\3\0\5\10\6\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\4\10\1\0\13\10\2\0"+
    "\4\10\5\0\5\10\4\0\1\10\64\0\2\10\u0a7b\0\57\10\1\0"+
    "\57\10\1\0\205\10\6\0\4\10\3\0\2\10\14\0\46\10\1\0"+
    "\1\10\5\0\1\10\2\0\70\10\7\0\1\10\20\0\27\10\11\0"+
    "\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0"+
    "\7\10\1\0\7\10\1\0\7\10\120\0\1\10\u01d5\0\2\10\52\0"+
    "\5\10\5\0\2\10\4\0\126\10\6\0\3\10\1\0\132\10\1\0"+
    "\4\10\5\0\53\10\1\0\136\10\21\0\40\10\60\0\20\10\u0200\0"+
    "\u19c0\10\100\0\u51fd\10\3\0\u048d\10\103\0\56\10\2\0\u010d\10\3\0"+
    "\20\10\12\11\2\10\24\0\57\10\20\0\37\10\2\0\106\10\61\0"+
    "\11\10\2\0\147\10\2\0\65\10\2\0\11\10\52\0\15\10\1\0"+
    "\3\10\1\0\4\10\1\0\27\10\35\0\64\10\16\0\62\10\34\0"+
    "\12\11\30\0\6\10\3\0\1\10\1\0\2\10\1\0\12\11\34\10"+
    "\12\0\27\10\31\0\35\10\7\0\57\10\34\0\1\10\12\11\6\0"+
    "\5\10\1\0\12\10\12\11\5\10\1\0\51\10\27\0\3\10\1\0"+
    "\10\10\4\0\12\11\6\0\27\10\3\0\1\10\3\0\62\10\1\0"+
    "\1\10\3\0\2\10\2\0\5\10\2\0\1\10\1\0\1\10\30\0"+
    "\3\10\2\0\13\10\7\0\3\10\14\0\6\10\2\0\6\10\2\0"+
    "\6\10\11\0\7\10\1\0\7\10\1\0\53\10\1\0\16\10\6\0"+
    "\163\10\15\0\12\11\6\0\u2ba4\10\14\0\27\10\4\0\61\10\u2104\0"+
    "\u016e\10\2\0\152\10\46\0\7\10\14\0\5\10\5\0\1\10\1\0"+
    "\12\10\1\0\15\10\1\0\5\10\1\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\154\10\41\0\u016b\10\22\0\100\10\2\0\66\10\50\0"+
    "\14\10\164\0\5\10\1\0\207\10\23\0\12\11\7\0\32\10\6\0"+
    "\32\10\13\0\131\10\3\0\6\10\2\0\6\10\2\0\6\10\2\0"+
    "\3\10\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\2\3\5\1\1\4\1\0\1\4"+
    "\2\0\1\4\1\0\2\4\1\5\2\6\2\4\1\5"+
    "\2\6\1\4\2\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\13\1\15\1\16\1\13\1\14\2\13\1\0"+
    "\1\17\3\0\1\20\1\21\1\22\14\20\2\0\1\23"+
    "\1\0\1\24\4\0\1\25\5\0\1\26\7\0\1\27"+
    "\1\30\1\31\1\0\11\20\1\32\11\20\1\0\1\33"+
    "\1\0\1\34\1\0\2\35\1\0\1\36\2\0\1\37"+
    "\1\0\2\14\1\37\2\0\1\40\1\0\1\41\17\20"+
    "\1\42\1\20\3\0\1\43\1\0\1\44\4\0\6\20"+
    "\1\45\1\46\4\20\1\47\1\20\1\50\5\20\1\51"+
    "\2\0\1\52\2\0\1\37\1\0\3\20\1\53\4\20"+
    "\1\54\1\20\1\55\4\20\5\0\1\56\1\20\1\57"+
    "\1\20\1\60\1\61\6\20\1\62\1\63\3\0\3\20"+
    "\1\64\1\65\1\66\1\20\1\67\1\20\3\0\5\20"+
    "\3\0\4\20\3\0\1\70\1\71\1\72\1\20\3\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\1\73\2\0"+
    "\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\0"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u0372\0\u03a3\0\u03d4\0\u0405"+
    "\0\u0436\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u0498\0\u052b"+
    "\0\u055c\0\u058d\0\u05be\0\u055c\0\u05ef\0\u0620\0\u0651\0\0"+
    "\0\u0682\0\u06b3\0\0\0\u06e4\0\u0715\0\0\0\u06e4\0\0"+
    "\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d"+
    "\0\u08ce\0\u08ff\0\0\0\0\0\u0930\0\u0961\0\u0992\0\u09c3"+
    "\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b"+
    "\0\u0b7c\0\u03a3\0\0\0\u0bad\0\0\0\u0467\0\u0bde\0\u0498"+
    "\0\u0c0f\0\u0c40\0\u055c\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\0"+
    "\0\u06e4\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b"+
    "\0\0\0\0\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81"+
    "\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u08ff\0\u1076\0\u10a7\0\u10d8"+
    "\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\0"+
    "\0\u1260\0\0\0\u1291\0\u0c40\0\0\0\u12c2\0\0\0\u12f3"+
    "\0\u1324\0\0\0\u1355\0\u06e4\0\0\0\u0d97\0\u1386\0\u13b7"+
    "\0\0\0\u13e8\0\u08ff\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd"+
    "\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665"+
    "\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\0"+
    "\0\u17ed\0\0\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913"+
    "\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u08ff\0\u1a39\0\u1a6a"+
    "\0\u1a9b\0\u1acc\0\u08ff\0\u1afd\0\u08ff\0\u1b2e\0\u1b5f\0\u1b90"+
    "\0\u1bc1\0\u1bf2\0\0\0\u1c23\0\u1c54\0\0\0\u1c85\0\u1cb6"+
    "\0\u1880\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u08ff\0\u1dab\0\u1ddc"+
    "\0\u1e0d\0\u1e3e\0\u08ff\0\u1e6f\0\u08ff\0\u1ea0\0\u1ed1\0\u1f02"+
    "\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7\0\u2028\0\u08ff\0\u2059"+
    "\0\u08ff\0\u208a\0\u20bb\0\u08ff\0\u20ec\0\u211d\0\u214e\0\u217f"+
    "\0\u21b0\0\u21e1\0\u1c23\0\0\0\u2212\0\u2243\0\u2274\0\u22a5"+
    "\0\u22d6\0\u2307\0\u08ff\0\u08ff\0\u2338\0\u2369\0\u08ff\0\u239a"+
    "\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522"+
    "\0\u2553\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa"+
    "\0\u26db\0\u270c\0\u08ff\0\u08ff\0\u08ff\0\u273d\0\u276e\0\u279f"+
    "\0\u27d0\0\u2801\0\u2832\0\u2863\0\u2894\0\u28c5\0\u28f6\0\u08ff"+
    "\0\u2927\0\u2958\0\0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\61\0\1\13\1\14\1\15\1\16\1\17\1\20\4\13"+
    "\1\21\1\13\1\22\27\13\2\20\1\13\1\14\5\13"+
    "\1\23\1\20\1\13\1\20\3\24\1\25\11\24\1\26"+
    "\43\24\15\27\1\30\43\27\3\31\1\32\6\31\1\33"+
    "\46\31\1\34\1\35\1\36\1\37\1\34\1\40\41\34"+
    "\1\35\11\34\1\41\1\42\1\43\1\44\2\41\1\45"+
    "\40\41\1\42\11\41\7\46\1\47\51\46\1\50\2\51"+
    "\41\50\1\52\1\53\1\50\1\51\11\50\1\54\2\55"+
    "\12\54\1\56\26\54\1\57\1\60\1\61\1\62\1\63"+
    "\1\56\1\64\6\54\3\13\3\0\4\13\1\0\1\13"+
    "\1\65\27\13\2\0\7\13\2\0\1\13\1\0\1\13"+
    "\2\14\3\0\4\13\1\0\1\13\1\65\27\13\2\0"+
    "\1\13\1\14\5\13\2\0\1\13\1\0\1\13\1\14"+
    "\1\15\1\16\2\0\4\13\1\0\1\13\1\65\27\13"+
    "\2\0\1\13\1\14\5\13\2\0\1\13\3\0\2\16"+
    "\61\0\1\66\1\0\1\67\56\0\1\70\2\0\1\71"+
    "\1\72\1\0\1\73\1\74\2\0\1\75\1\76\2\0"+
    "\1\77\2\72\1\100\1\101\1\102\1\103\1\72\1\104"+
    "\1\72\1\105\1\106\5\72\1\107\7\0\1\72\1\110"+
    "\4\0\4\13\2\0\6\13\1\0\1\111\26\13\2\0"+
    "\11\13\22\0\1\20\40\0\15\25\1\112\60\25\1\112"+
    "\2\25\1\113\40\25\15\27\1\114\60\27\1\114\2\27"+
    "\1\115\40\27\12\32\1\116\60\32\1\116\7\32\1\117"+
    "\36\32\5\120\1\121\54\120\2\35\2\120\1\121\41\120"+
    "\1\35\12\120\2\35\1\37\1\120\1\121\41\120\1\35"+
    "\16\120\1\122\53\120\6\123\1\124\53\123\2\42\3\123"+
    "\1\124\40\123\1\42\12\123\2\42\1\44\2\123\1\124"+
    "\40\123\1\42\17\123\1\125\52\123\7\46\1\126\60\46"+
    "\1\127\51\46\1\0\2\51\44\0\1\51\56\0\1\130"+
    "\13\0\15\131\1\0\27\131\1\0\1\131\2\0\1\132"+
    "\10\131\2\55\12\131\1\0\27\131\1\0\1\131\1\62"+
    "\1\0\1\132\7\131\2\133\3\131\10\133\1\134\27\133"+
    "\1\134\1\131\1\0\1\134\1\135\7\133\1\0\2\62"+
    "\44\0\1\62\11\0\2\136\3\0\42\136\2\0\10\136"+
    "\15\131\1\0\27\131\1\0\1\131\1\0\1\137\1\132"+
    "\7\131\4\13\2\0\6\13\2\0\26\13\2\0\11\13"+
    "\11\0\1\140\57\0\1\141\56\0\1\142\114\0\1\143"+
    "\30\0\2\72\1\0\1\74\2\0\2\72\2\0\22\72"+
    "\7\0\2\72\14\0\2\72\1\0\1\74\2\0\1\72"+
    "\1\144\2\0\12\72\1\145\7\72\7\0\2\72\14\0"+
    "\2\72\1\0\1\74\2\0\2\72\2\0\12\72\1\146"+
    "\7\72\7\0\2\72\14\0\2\72\1\0\1\74\2\0"+
    "\2\72\2\0\1\72\1\147\3\72\1\150\4\72\1\151"+
    "\5\72\1\152\1\72\7\0\2\72\14\0\2\72\1\0"+
    "\1\74\2\0\2\72\2\0\4\72\1\153\15\72\7\0"+
    "\2\72\14\0\2\72\1\0\1\74\2\0\2\72\2\0"+
    "\1\72\1\154\17\72\1\155\7\0\2\72\14\0\2\72"+
    "\1\0\1\74\2\0\2\72\2\0\12\72\1\156\7\72"+
    "\7\0\2\72\14\0\2\72\1\0\1\74\2\0\1\72"+
    "\1\157\2\0\1\160\7\72\1\161\11\72\7\0\2\72"+
    "\14\0\2\72\1\0\1\74\2\0\2\72\2\0\12\72"+
    "\1\162\7\72\7\0\2\72\14\0\2\72\1\0\1\74"+
    "\2\0\1\163\1\72\2\0\22\72\7\0\2\72\14\0"+
    "\2\72\1\0\1\74\2\0\2\72\2\0\1\164\21\72"+
    "\7\0\2\72\14\0\2\72\1\0\1\74\2\0\2\72"+
    "\2\0\11\72\1\165\10\72\7\0\2\72\14\0\2\72"+
    "\1\0\1\74\2\0\2\72\2\0\1\166\21\72\7\0"+
    "\2\72\22\0\1\167\2\0\1\170\20\0\1\171\16\0"+
    "\15\27\1\114\2\27\1\172\40\27\12\32\1\116\10\32"+
    "\1\173\35\32\5\120\1\174\53\120\5\0\1\175\53\0"+
    "\6\123\1\176\57\123\1\177\1\176\52\123\7\46\1\200"+
    "\56\46\1\201\1\46\1\200\51\46\51\202\1\203\7\202"+
    "\2\133\3\131\10\133\1\134\27\133\1\134\1\204\1\0"+
    "\1\134\1\135\7\133\2\134\3\0\41\134\1\205\1\0"+
    "\11\134\2\206\3\202\41\206\1\205\1\202\1\206\1\207"+
    "\7\206\2\136\3\0\42\136\1\0\1\205\10\136\15\210"+
    "\1\0\27\210\1\0\2\210\2\0\7\210\7\0\1\211"+
    "\73\0\1\212\46\0\2\72\1\0\1\74\2\0\1\213"+
    "\1\72\2\0\22\72\7\0\2\72\14\0\2\72\1\0"+
    "\1\74\2\0\2\72\2\0\15\72\1\214\4\72\7\0"+
    "\2\72\14\0\2\72\1\0\1\74\2\0\2\72\2\0"+
    "\6\72\1\215\13\72\7\0\2\72\14\0\2\72\1\0"+
    "\1\74\2\0\2\72\2\0\2\72\1\216\17\72\7\0"+
    "\2\72\14\0\2\72\1\0\1\74\2\0\2\72\2\0"+
    "\6\72\1\217\13\72\7\0\2\72\14\0\2\72\1\0"+
    "\1\74\2\0\2\72\2\0\7\72\1\220\12\72\7\0"+
    "\2\72\14\0\2\72\1\0\1\74\2\0\2\72\2\0"+
    "\10\72\1\221\11\72\7\0\2\72\14\0\2\72\1\0"+
    "\1\74\2\0\2\72\2\0\1\222\21\72\7\0\2\72"+
    "\14\0\2\72\1\0\1\74\2\0\2\72\2\0\7\72"+
    "\1\223\12\72\7\0\2\72\14\0\2\72\1\0\1\74"+
    "\2\0\2\72\2\0\3\72\1\224\16\72\7\0\2\72"+
    "\14\0\2\72\1\0\1\74\2\0\2\72\2\0\11\72"+
    "\1\225\10\72\7\0\2\72\14\0\2\72\1\0\1\74"+
    "\2\0\2\72\2\0\7\72\1\226\12\72\7\0\2\72"+
    "\14\0\2\72\1\0\1\74\2\0\2\72\2\0\11\72"+
    "\1\227\10\72\7\0\2\72\14\0\2\72\1\0\1\74"+
    "\2\0\2\72\2\0\4\72\1\230\15\72\7\0\2\72"+
    "\14\0\2\72\1\0\1\74\2\0\1\231\1\72\2\0"+
    "\22\72\7\0\2\72\14\0\2\72\1\0\1\74\2\0"+
    "\2\72\2\0\2\72\1\232\17\72\7\0\2\72\14\0"+
    "\2\72\1\0\1\74\2\0\2\72\2\0\15\72\1\233"+
    "\4\72\7\0\2\72\14\0\2\72\1\0\1\74\2\0"+
    "\2\72\2\0\3\72\1\234\16\72\7\0\2\72\23\0"+
    "\1\235\76\0\1\236\23\0\12\32\1\116\11\32\1\237"+
    "\34\32\5\123\1\240\1\176\52\123\5\46\1\241\1\46"+
    "\1\200\56\46\1\242\1\46\1\126\51\46\51\0\1\243"+
    "\7\0\2\134\3\0\41\134\1\205\1\0\1\134\1\244"+
    "\7\134\15\210\1\0\27\210\1\0\2\210\1\245\1\0"+
    "\7\210\53\0\1\246\15\0\2\72\1\0\1\74\2\0"+
    "\2\72\2\0\1\247\21\72\7\0\2\72\14\0\2\72"+
    "\1\0\1\74\2\0\2\72\2\0\6\72\1\250\13\72"+
    "\7\0\2\72\14\0\2\72\1\0\1\74\2\0\1\251"+
    "\1\72\2\0\4\72\1\252\1\72\1\253\12\72\1\254"+
    "\7\0\2\72\14\0\2\72\1\0\1\74\2\0\2\72"+
    "\2\0\1\255\21\72\7\0\2\72\14\0\2\72\1\0"+
    "\1\74\2\0\1\72\1\256\2\0\22\72\7\0\2\72"+
    "\14\0\2\72\1\0\1\74\2\0\2\72\2\0\1\257"+
    "\21\72\7\0\2\72\14\0\2\72\1\0\1\74\2\0"+
    "\2\72\2\0\5\72\1\260\14\72\7\0\2\72\14\0"+
    "\2\72\1\0\1\74\2\0\2\72\2\0\5\72\1\261"+
    "\14\72\7\0\2\72\14\0\2\72\1\0\1\74\2\0"+
    "\2\72\2\0\1\262\21\72\7\0\2\72\14\0\2\72"+
    "\1\0\1\74\2\0\2\72\2\0\16\72\1\263\3\72"+
    "\7\0\2\72\14\0\2\72\1\0\1\74\2\0\2\72"+
    "\2\0\10\72\1\264\11\72\7\0\2\72\14\0\2\72"+
    "\1\0\1\74\2\0\1\265\1\72\2\0\22\72\7\0"+
    "\2\72\14\0\2\72\1\0\1\74\2\0\2\72\2\0"+
    "\5\72\1\266\14\72\7\0\2\72\14\0\2\72\1\0"+
    "\1\74\2\0\2\72\2\0\5\72\1\267\14\72\7\0"+
    "\2\72\14\0\2\72\1\0\1\74\2\0\2\72\2\0"+
    "\4\72\1\270\15\72\7\0\2\72\14\0\2\72\1\0"+
    "\1\74\2\0\2\72\2\0\1\271\21\72\7\0\2\72"+
    "\14\0\2\72\1\0\1\74\2\0\2\72\2\0\21\72"+
    "\1\272\7\0\2\72\22\0\1\273\71\0\1\274\31\0"+
    "\12\32\1\116\3\32\1\275\42\32\5\46\1\276\1\46"+
    "\1\126\51\46\51\202\1\277\7\202\2\206\3\202\41\206"+
    "\1\205\1\202\1\206\1\300\7\206\51\0\1\301\63\0"+
    "\1\302\14\0\2\72\1\0\1\74\2\0\2\72\2\0"+
    "\1\72\1\303\20\72\7\0\2\72\14\0\2\72\1\0"+
    "\1\74\2\0\2\72\2\0\1\304\21\72\7\0\2\72"+
    "\14\0\2\72\1\0\1\74\2\0\1\72\1\305\2\0"+
    "\22\72\7\0\2\72\14\0\2\72\1\0\1\74\2\0"+
    "\2\72\2\0\21\72\1\306\7\0\2\72\14\0\2\72"+
    "\1\0\1\74\2\0\2\72\2\0\1\307\21\72\7\0"+
    "\2\72\14\0\2\72\1\0\1\74\2\0\2\72\2\0"+
    "\11\72\1\310\10\72\7\0\2\72\14\0\2\72\1\0"+
    "\1\74\2\0\2\72\2\0\4\72\1\311\15\72\7\0"+
    "\2\72\14\0\2\72\1\0\1\74\2\0\2\72\2\0"+
    "\1\72\1\312\20\72\7\0\2\72\14\0\2\72\1\0"+
    "\1\74\2\0\2\72\2\0\2\72\1\313\17\72\7\0"+
    "\2\72\14\0\2\72\1\0\1\74\2\0\2\72\2\0"+
    "\17\72\1\314\2\72\7\0\2\72\14\0\2\72\1\0"+
    "\1\74\2\0\2\72\2\0\15\72\1\315\4\72\7\0"+
    "\2\72\14\0\2\72\1\0\1\74\2\0\2\72\2\0"+
    "\4\72\1\316\15\72\7\0\2\72\14\0\2\72\1\0"+
    "\1\74\2\0\2\72\2\0\16\72\1\317\3\72\7\0"+
    "\2\72\14\0\2\72\1\0\1\74\2\0\2\72\2\0"+
    "\3\72\1\315\16\72\7\0\2\72\14\0\2\72\1\0"+
    "\1\74\2\0\2\72\2\0\12\72\1\315\7\72\7\0"+
    "\2\72\14\0\2\72\1\0\1\74\2\0\2\72\2\0"+
    "\12\72\1\320\7\72\7\0\2\72\14\0\2\72\1\0"+
    "\1\74\2\0\2\72\2\0\15\72\1\321\4\72\7\0"+
    "\2\72\4\0\14\274\1\0\1\322\43\274\12\32\1\116"+
    "\4\32\1\323\41\32\51\202\1\324\7\202\2\206\3\202"+
    "\41\206\1\205\1\202\1\206\1\325\7\206\26\0\1\326"+
    "\42\0\2\72\1\0\1\74\2\0\2\72\2\0\10\72"+
    "\1\327\11\72\7\0\2\72\14\0\2\72\1\0\1\74"+
    "\2\0\2\72\2\0\7\72\1\330\12\72\7\0\2\72"+
    "\14\0\2\72\1\0\1\74\2\0\1\331\1\72\2\0"+
    "\22\72\7\0\2\72\14\0\2\72\1\0\1\74\2\0"+
    "\2\72\2\0\7\72\1\332\12\72\7\0\2\72\14\0"+
    "\2\72\1\0\1\74\2\0\2\72\2\0\15\72\1\333"+
    "\4\72\7\0\2\72\14\0\2\72\1\0\1\74\2\0"+
    "\2\72\2\0\21\72\1\334\7\0\2\72\14\0\2\72"+
    "\1\0\1\74\2\0\2\72\2\0\2\72\1\335\17\72"+
    "\7\0\2\72\14\0\2\72\1\0\1\74\2\0\2\72"+
    "\2\0\2\72\1\336\17\72\7\0\2\72\14\0\2\72"+
    "\1\0\1\74\2\0\2\72\2\0\11\72\1\337\10\72"+
    "\7\0\2\72\14\0\2\72\1\0\1\74\2\0\2\72"+
    "\2\0\4\72\1\340\15\72\7\0\2\72\14\0\2\72"+
    "\1\0\1\74\2\0\2\72\2\0\7\72\1\341\12\72"+
    "\7\0\2\72\14\0\2\72\1\0\1\74\2\0\2\72"+
    "\2\0\12\72\1\342\7\72\7\0\2\72\4\0\14\274"+
    "\1\0\1\322\2\274\1\343\40\274\12\32\1\116\3\32"+
    "\1\344\42\32\51\202\1\345\7\202\2\206\3\202\41\206"+
    "\1\205\1\202\1\206\1\346\7\206\32\0\1\347\36\0"+
    "\2\72\1\0\1\74\2\0\2\72\2\0\10\72\1\350"+
    "\11\72\7\0\2\72\14\0\2\72\1\0\1\74\2\0"+
    "\2\72\2\0\10\72\1\351\11\72\7\0\2\72\14\0"+
    "\2\72\1\0\1\74\2\0\2\72\2\0\1\352\21\72"+
    "\7\0\2\72\14\0\2\72\1\0\1\74\2\0\2\72"+
    "\2\0\6\72\1\353\13\72\7\0\2\72\14\0\2\72"+
    "\1\0\1\74\2\0\2\72\2\0\1\354\21\72\7\0"+
    "\2\72\14\0\2\72\1\0\1\74\2\0\2\72\2\0"+
    "\1\72\1\355\20\72\7\0\2\72\14\0\2\72\1\0"+
    "\1\74\2\0\2\72\2\0\1\72\1\356\20\72\7\0"+
    "\2\72\14\0\2\72\1\0\1\74\2\0\1\72\1\357"+
    "\2\0\22\72\7\0\2\72\14\0\2\72\1\0\1\74"+
    "\2\0\2\72\2\0\13\72\1\360\6\72\7\0\2\72"+
    "\4\0\51\202\1\361\7\202\2\206\3\202\41\206\1\205"+
    "\1\202\1\206\1\362\7\206\7\0\1\363\61\0\2\72"+
    "\1\0\1\74\2\0\2\72\2\0\4\72\1\364\15\72"+
    "\7\0\2\72\14\0\2\72\1\0\1\74\2\0\2\72"+
    "\2\0\4\72\1\365\15\72\7\0\2\72\14\0\2\72"+
    "\1\0\1\74\2\0\2\72\2\0\12\72\1\366\7\72"+
    "\7\0\2\72\14\0\2\72\1\0\1\74\2\0\2\72"+
    "\2\0\13\72\1\367\6\72\7\0\2\72\14\0\2\72"+
    "\1\0\1\74\2\0\2\72\2\0\2\72\1\315\17\72"+
    "\7\0\2\72\14\0\2\72\1\0\1\74\2\0\2\72"+
    "\2\0\1\370\21\72\7\0\2\72\4\0\51\202\1\371"+
    "\7\202\2\206\3\202\41\206\1\205\1\202\1\206\1\372"+
    "\7\206\54\0\1\373\14\0\2\72\1\0\1\74\2\0"+
    "\2\72\2\0\11\72\1\374\10\72\7\0\2\72\14\0"+
    "\2\72\1\0\1\74\2\0\2\72\2\0\11\72\1\375"+
    "\10\72\7\0\2\72\14\0\2\72\1\0\1\74\2\0"+
    "\2\72\2\0\7\72\1\376\12\72\7\0\2\72\14\0"+
    "\2\72\1\0\1\74\2\0\2\72\2\0\4\72\1\377"+
    "\15\72\7\0\2\72\14\0\2\72\1\0\1\74\2\0"+
    "\2\72\2\0\6\72\1\315\13\72\7\0\2\72\4\0"+
    "\51\202\1\u0100\7\202\2\206\3\202\41\206\1\205\1\202"+
    "\1\206\1\u0101\7\206\22\0\1\u0102\46\0\2\72\1\0"+
    "\1\74\2\0\2\72\2\0\1\72\1\u0103\20\72\7\0"+
    "\2\72\14\0\2\72\1\0\1\74\2\0\2\72\2\0"+
    "\1\72\1\u0104\20\72\7\0\2\72\14\0\2\72\1\0"+
    "\1\74\2\0\1\72\1\u0105\2\0\22\72\7\0\2\72"+
    "\14\0\2\72\1\0\1\74\2\0\2\72\2\0\6\72"+
    "\1\u0106\13\72\7\0\2\72\4\0\51\202\1\u0107\7\202"+
    "\2\206\3\202\41\206\1\205\1\202\1\206\1\u0108\7\206"+
    "\25\0\1\u0109\43\0\2\72\1\0\1\74\2\0\2\72"+
    "\2\0\6\72\1\u010a\13\72\7\0\2\72\4\0\51\202"+
    "\1\0\7\202\2\206\3\202\41\206\1\205\1\202\1\206"+
    "\1\134\7\206\43\0\1\u010b\25\0\2\72\1\0\1\74"+
    "\2\0\2\72\2\0\4\72\1\u010c\15\72\7\0\2\72"+
    "\43\0\1\u010d\31\0\2\72\1\0\1\74\2\0\2\72"+
    "\2\0\1\72\1\u010e\20\72\7\0\2\72\40\0\1\u010f"+
    "\34\0\2\72\1\0\1\74\2\0\2\72\2\0\14\72"+
    "\1\u0110\5\72\7\0\2\72\41\0\1\u0111\45\0\1\u0112"+
    "\66\0\1\u0113\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10633];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\10\11\0\5\1\1\11\4\1\1\0\1\1\2\0"+
    "\1\1\1\0\13\1\2\0\1\11\2\1\1\11\2\1"+
    "\1\11\1\1\1\11\4\1\1\0\1\1\3\0\1\1"+
    "\2\11\14\1\2\0\1\11\1\0\1\11\4\0\1\1"+
    "\5\0\1\11\7\0\1\1\2\11\1\0\23\1\1\0"+
    "\1\11\1\0\1\11\1\0\1\1\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\1\1\11\1\1\2\0\1\11"+
    "\1\0\22\1\3\0\1\11\1\0\1\11\4\0\24\1"+
    "\1\11\2\0\1\11\2\0\1\1\1\0\17\1\5\0"+
    "\15\1\1\11\3\0\11\1\3\0\5\1\3\0\4\1"+
    "\3\0\4\1\3\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */
    private ByteStack stack = new ByteStack();
    private LexerInput input;
    private int parenBalanceInDirective = 0; //for directive arguments
    private int parameterExpressionLength = 0;
    private int pushBackCount = 0;
    //[\"][^\:\"]+[\:]{1}[^\:]
    private Pattern freezePhpPattern = Pattern.compile("[^\\:\\\"\\)\\? ]+([\\:]{1}|[\\:]{3,})[^\\:]", Pattern.CASE_INSENSITIVE);

    public BladeColoringLexer(LexerRestartInfo<? extends TokenId> info) {
        this.input = info.input();
        if(info.state() != null) {
            //reset state
            setState((LexerState) info.state(), parenBalanceInDirective);
        } else {
            //initial state
            stack.push(ST_HTML);
            zzState = ST_HTML;
            zzLexicalState = ST_HTML;
        }

    }

    public static final class LexerState  {
        final ByteStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;
        final int parenBalanceInDirective; 

        LexerState(ByteStack stack, int zzState, int zzLexicalState, int parenBalanceInDirective) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.parenBalanceInDirective = parenBalanceInDirective;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null || obj.getClass() != this.getClass()) {
                return false;
            }
            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                && (this.zzState == state.zzState)
                );
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            hash = 31 * hash + this.parenBalanceInDirective;
            if (stack != null) {
                hash = 31 * hash + this.stack.hashCode();
            }
            return hash;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.copyOf(), zzState, zzLexicalState, parenBalanceInDirective);
    }

    public void setState(LexerState state, int parenBalanceInDirective) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
        this.parenBalanceInDirective = state.parenBalanceInDirective;
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    //other functions

    protected void pushBack(int i) {
        yypushback(i);
    }

    protected void popState() {
        yybegin(stack.pop());
    }

    protected void pushState(final int state) {
        stack.push(getZZLexicalState());
        yybegin(state);
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BladeColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public BladeColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1804) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public BladeTokenId findNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();
            
            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 56: 
          { pushState(ST_LOOKING_FOR_PARAMETER_EXPRESSION);
       return BladeTokenId.T_BLADE_HAS_SECTION;
          }
        case 60: break;
        case 3: 
          { String yytext = yytext();
	//whitespace
    return BladeTokenId.NEWLINE;
          }
        case 61: break;
        case 21: 
          { //String yytext = yytext();
    popState();
    return BladeTokenId.T_BLADE_CLOSE_ECHO;
          }
        case 62: break;
        case 29: 
          { String yytext = yytext();
    if (yylength() == 2){
    	popState();
    	return BladeTokenId.T_BLADE_CLOSE_ECHO;
    }
    yypushback(2);

    Matcher matcher = freezePhpPattern.matcher(yytext);
    if(matcher.find()) {
        if(yytext.trim().startsWith("'") || yytext.trim().startsWith("\"")){
            return BladeTokenId.T_PHP_STRING;
        }
        return BladeTokenId.T_BLADE_ERROR;
    }
    return BladeTokenId.T_BLADE_PHP_ECHO;
          }
        case 63: break;
        case 39: 
          { return BladeTokenId.T_BLADE_SHOW;
          }
        case 64: break;
        case 20: 
          { if (yylength() == 2){
	    popState(); 
		return BladeTokenId.T_CLOSE_PHP;
	}
	yypushback(2);
    return BladeTokenId.T_PHP_ECHO;
          }
        case 65: break;
        case 10: 
          { parenBalanceInDirective = 0;
   popState();
   return BladeTokenId.T_BLADE_RPAREN;
          }
        case 66: break;
        case 26: 
          { pushState(ST_LOOKING_FOR_PARAMETER_EXPRESSION);
        return BladeTokenId.T_BLADE_IF;
          }
        case 67: break;
        case 55: 
          { pushState(ST_LOOKING_FOR_PARAMETER_EXPRESSION);
        return BladeTokenId.T_BLADE_FOREACH;
          }
        case 68: break;
        case 7: 
          { if (yylength() > 0){
        yypushback(1);
    }
    popState();
          }
        case 69: break;
        case 33: 
          { pushState(ST_BLADE_PHP);
    return BladeTokenId.T_BLADE_PHP_OPEN;
          }
        case 70: break;
        case 24: 
          { //String yytext = yytext();
    pushState(ST_BLADE_ECHO_ESCAPED);
    return BladeTokenId.T_BLADE_OPEN_ECHO_ESCAPED;
          }
        case 71: break;
        case 12: 
          { String text = yytext();
    parameterExpressionLength+= yylength();
          }
        case 72: break;
        case 44: 
          { pushState(ST_LOOKING_FOR_PARAMETER_EXPRESSION);
        return BladeTokenId.T_BLADE_YIELD;
          }
        case 73: break;
        case 40: 
          { return BladeTokenId.T_BLADE_STOP;
          }
        case 74: break;
        case 19: 
          { if (yylength() == 2){
       popState();
       return BladeTokenId.T_CLOSE_PHP;
    }
    yypushback(2);
    return BladeTokenId.T_PHP;
          }
        case 75: break;
        case 9: 
          { pushState(ST_BLADE_PARAMETER_EXPRESSION);
   parenBalanceInDirective = 1;
   parameterExpressionLength = 0;
   return BladeTokenId.T_BLADE_LPAREN;
          }
        case 76: break;
        case 49: 
          { pushState(ST_LOOKING_FOR_PARAMETER_EXPRESSION);
        return BladeTokenId.T_BLADE_ELSEIF;
          }
        case 77: break;
        case 43: 
          { return BladeTokenId.T_BLADE_ENDIF;
          }
        case 78: break;
        case 28: 
          { if (yylength() == 2){
       popState();
       return BladeTokenId.T_CLOSE_PHP;
    }
    yypushback(2);
    return BladeTokenId.T_PHP_ECHO;
          }
        case 79: break;
        case 45: 
          { //css directives
    return BladeTokenId.T_HTML;
          }
        case 80: break;
        case 36: 
          { popState();
    return BladeTokenId.T_BLADE_CLOSE_COMMENT;
          }
        case 81: break;
        case 25: 
          { //escape expression
    return BladeTokenId.T_HTML;
          }
        case 82: break;
        case 17: 
          { //escape directive rule
    return BladeTokenId.T_HTML;
          }
        case 83: break;
        case 18: 
          { //email format
    return BladeTokenId.T_HTML;
          }
        case 84: break;
        case 2: 
          { String yytext = yytext();
	//whitespace
    return BladeTokenId.WHITESPACE;
          }
        case 85: break;
        case 30: 
          { String yytext = yytext();
    popState();
    return BladeTokenId.T_BLADE_CLOSE_ECHO_ESCAPED;
          }
        case 86: break;
        case 50: 
          { return BladeTokenId.T_XML;
          }
        case 87: break;
        case 38: 
          { pushState(ST_LOOKING_FOR_PARAMETER_EXPRESSION);
        return BladeTokenId.T_BLADE_EACH;
          }
        case 88: break;
        case 34: 
          { pushState(ST_LOOKING_FOR_PARAMETER_EXPRESSION);
        return BladeTokenId.T_BLADE_FOR;
          }
        case 89: break;
        case 46: 
          { return BladeTokenId.T_BLADE_PARENT;
          }
        case 90: break;
        case 15: 
          { String yytext = yytext();
    pushState(ST_BLADE_ECHO);
    return BladeTokenId.T_BLADE_OPEN_ECHO;
          }
        case 91: break;
        case 47: 
          { return BladeTokenId.T_BLADE_ENDPHP;
          }
        case 92: break;
        case 51: 
          { String ttext = yytext();
    popState();
    if (yylength() == "@endphp".length()){
        return BladeTokenId.T_BLADE_ENDPHP;
    }
    
    yypushback("@endphp".length());
    return BladeTokenId.T_BLADE_PHP;
          }
        case 93: break;
        case 8: 
          { return BladeTokenId.WHITESPACE;
          }
        case 94: break;
        case 35: 
          { String yytext = yytext();
    if (yylength() == 3){
    	popState();
    	return BladeTokenId.T_BLADE_CLOSE_ECHO;
    }
    yypushback(3);
    Matcher matcher = freezePhpPattern.matcher(yytext);
    if(matcher.find()) {
        if(yytext.trim().startsWith("'") || yytext.trim().startsWith("\"")){
            return BladeTokenId.T_PHP_STRING;
        }
        return BladeTokenId.T_BLADE_ERROR;
    }
    return BladeTokenId.T_BLADE_PHP_ECHO;
          }
        case 95: break;
        case 42: 
          { yypushback(4);
    return BladeTokenId.T_BLADE_COMMENT;
          }
        case 96: break;
        case 14: 
          { parenBalanceInDirective--;
   if (parenBalanceInDirective == 0) {
      yypushback(1);
      popState();
      return BladeTokenId.T_BLADE_PHP_EXPRESSION;
   }
          }
        case 97: break;
        case 32: 
          { pushState(ST_COMMENT);
    return BladeTokenId.T_BLADE_OPEN_COMMENT;
          }
        case 98: break;
        case 54: 
          { pushState(ST_LOOKING_FOR_PARAMETER_EXPRESSION);
       return BladeTokenId.T_BLADE_SECTION;
          }
        case 99: break;
        case 52: 
          { pushState(ST_LOOKING_FOR_PARAMETER_EXPRESSION);
        return BladeTokenId.T_BLADE_EXTENDS;
          }
        case 100: break;
        case 58: 
          { return BladeTokenId.T_BLADE_ENDFOREACH;
          }
        case 101: break;
        case 31: 
          { //php lexer embedding freeze issue when you type / delete a double colon at the start of the script
    //if (parameterExpressionLength == 0) {
        popState();
        popState();
        parameterExpressionLength = 0;
        return  BladeTokenId.T_BLADE_ERROR;
    //}
          }
        case 102: break;
        case 53: 
          { pushState(ST_LOOKING_FOR_PARAMETER_EXPRESSION);
        return BladeTokenId.T_BLADE_INCLUDE;
          }
        case 103: break;
        case 11: 
          { parameterExpressionLength =0;
          }
        case 104: break;
        case 57: 
          { return BladeTokenId.T_BLADE_ENDSECTION;
          }
        case 105: break;
        case 27: 
          { pushState(ST_PHP_ECHO);
    return BladeTokenId.T_PHP_OPEN_ECHO;
          }
        case 106: break;
        case 41: 
          { pushState(ST_PHP);
    return BladeTokenId.T_OPEN_PHP_SCRIPT;
          }
        case 107: break;
        case 16: 
          { String ttext = yytext();
    pushState(ST_LOOKING_FOR_PARAMETER_EXPRESSION);
    return BladeTokenId.T_BLADE_DIRECTIVE;
          }
        case 108: break;
        case 23: 
          { //incomplete comment
    return BladeTokenId.T_HTML;
          }
        case 109: break;
        case 59: 
          { pushState(ST_LOOKING_FOR_PARAMETER_EXPRESSION);
       return BladeTokenId.T_BLADE_SECTION_MISSING;
          }
        case 110: break;
        case 5: 
          { //no break;
    parameterExpressionLength += yylength();
          }
        case 111: break;
        case 48: 
          { return BladeTokenId.T_BLADE_ENDFOR;
          }
        case 112: break;
        case 37: 
          { return BladeTokenId.T_BLADE_ELSE;
          }
        case 113: break;
        case 6: 
          { String yytext = yytext();
    popState();
    return BladeTokenId.T_HTML;
          }
        case 114: break;
        case 22: 
          { parenBalanceInDirective = 0;
   popState();
   return BladeTokenId.T_EMPTY_EXPRESSION;
          }
        case 115: break;
        case 13: 
          { parenBalanceInDirective++;
          }
        case 116: break;
        case 4: 
          { //skipp
          }
        case 117: break;
        case 1: 
          { return  BladeTokenId.T_HTML;
          }
        case 118: break;
        default: 
          if (zzInput == YYEOF) 
            //zzAtEOF = true;
            switch (zzLexicalState) {
            case ST_PHP: {
              if (input.readLength() > 0) {
    input.backup(1);  // backup eof
    return BladeTokenId.T_PHP;
  }
  else {
      return null;
  }
            }
            case 276: break;
            case ST_COMMENT: {
              popState();
  if (yylength() > 0){
    return BladeTokenId.T_HTML;
  }
            }
            case 277: break;
            default:
              {         if(input.readLength() > 0) {
            String yytext = yytext();
            // backup eof
            input.backup(1);
            //and return the text as error token
             return BladeTokenId.T_HTML;
        } else {
            return null;
        }
 }
            }
          
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
