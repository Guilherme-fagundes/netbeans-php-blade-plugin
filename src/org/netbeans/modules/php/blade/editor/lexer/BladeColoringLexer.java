/* The following code was generated by JFlex 1.4.3 on 12/15/22, 4:20 PM */

   /*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2016 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2016 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.blade.editor.lexer;

import org.netbeans.api.lexer.TokenId;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;
import org.netbeans.modules.php.blade.editor.common.ByteStack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/15/22, 4:20 PM from the specification file
 * <tt>C:/LOCAL_P5_APPS/lmc/blade-php/tools/BladeColoringLexer.flex</tt>
 */
public class BladeColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_BLADE_PARAMETER_EXPRESSION = 26;
  public static final int ST_LOOKING_FOR_PARAMETER_EXPRESSION = 24;
  public static final int ST_AFTER_DIRECTIVE_ARG = 30;
  public static final int ST_PHP = 4;
  public static final int ST_COMMENT = 20;
  public static final int ST_BLADE_ARGUMENT = 28;
  public static final int ST_BLADE_PHP = 10;
  public static final int ST_BLADE_ECHO = 12;
  public static final int ST_DIRECTIVE = 18;
  public static final int ST_BLADE_ECHO_ESCAPED = 16;
  public static final int YYINITIAL = 0;
  public static final int ST_VALIDATE_BLADE_ECHO = 14;
  public static final int ST_INLINE_PHP = 8;
  public static final int ST_PHP_ECHO = 6;
  public static final int ST_HTML = 2;
  public static final int ST_CLOSE_BLADE_PHP = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  0,  0,  4,  4,  5,  5,  0,  0, 
     6,  6,  0,  0,  7,  7,  0,  0,  8,  8,  9,  9,  0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\2\0\1\2\22\0\1\1\1\6\1\46\2\0"+
    "\1\52\2\0\1\44\1\45\2\51\1\0\1\7\1\13\1\50\12\11"+
    "\1\47\1\0\1\14\1\21\1\20\1\15\1\12\1\34\1\10\1\31"+
    "\1\24\1\22\1\43\1\36\1\17\1\26\2\10\1\27\1\35\1\23"+
    "\1\33\1\16\1\10\1\37\1\30\1\32\1\41\1\10\1\40\1\42"+
    "\1\25\1\10\4\0\1\10\1\0\1\34\1\10\1\31\1\24\1\22"+
    "\1\43\1\36\1\17\1\26\2\10\1\27\1\35\1\23\1\33\1\16"+
    "\1\10\1\37\1\30\1\32\1\41\1\10\1\40\1\42\1\25\1\10"+
    "\1\4\1\53\1\5\1\0\53\10\1\10\12\10\1\10\4\10\1\10"+
    "\5\10\27\10\1\10\37\10\1\10\10\10\u01c2\10\4\0\14\10\16\0"+
    "\5\10\7\0\1\10\1\0\1\10\201\0\5\10\1\0\2\10\2\0"+
    "\4\10\1\0\1\10\6\0\1\10\1\0\3\10\1\0\1\10\1\0"+
    "\24\10\1\0\123\10\1\0\213\10\10\0\246\10\1\0\46\10\2\0"+
    "\1\10\6\0\51\10\107\0\33\10\4\0\4\10\55\0\53\10\25\0"+
    "\12\11\4\0\2\10\1\0\143\10\1\0\1\10\17\0\2\10\7\0"+
    "\2\10\12\11\3\10\2\0\1\10\20\0\1\10\1\0\36\10\35\0"+
    "\131\10\13\0\1\10\16\0\12\11\41\10\11\0\2\10\4\0\1\10"+
    "\5\0\26\10\4\0\1\10\11\0\1\10\3\0\1\10\27\0\31\10"+
    "\7\0\13\10\65\0\25\10\1\0\22\10\74\0\66\10\3\0\1\10"+
    "\22\0\1\10\7\0\12\10\4\0\12\11\1\0\20\10\4\0\10\10"+
    "\2\0\2\10\2\0\26\10\1\0\7\10\1\0\1\10\3\0\4\10"+
    "\3\0\1\10\20\0\1\10\15\0\2\10\1\0\3\10\4\0\12\11"+
    "\2\10\12\0\1\10\10\0\6\10\4\0\2\10\2\0\26\10\1\0"+
    "\7\10\1\0\2\10\1\0\2\10\1\0\2\10\37\0\4\10\1\0"+
    "\1\10\7\0\12\11\2\0\3\10\20\0\11\10\1\0\3\10\1\0"+
    "\26\10\1\0\7\10\1\0\2\10\1\0\5\10\3\0\1\10\22\0"+
    "\1\10\17\0\2\10\4\0\12\11\11\0\1\10\13\0\10\10\2\0"+
    "\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10\3\0"+
    "\1\10\36\0\2\10\1\0\3\10\4\0\12\11\1\0\1\10\21\0"+
    "\1\10\1\0\6\10\3\0\3\10\1\0\4\10\3\0\2\10\1\0"+
    "\1\10\1\0\2\10\3\0\2\10\3\0\3\10\3\0\14\10\26\0"+
    "\1\10\25\0\12\11\25\0\10\10\1\0\3\10\1\0\27\10\1\0"+
    "\20\10\3\0\1\10\32\0\3\10\5\0\2\10\4\0\12\11\20\0"+
    "\1\10\4\0\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0"+
    "\5\10\3\0\1\10\40\0\1\10\1\0\2\10\4\0\12\11\1\0"+
    "\2\10\21\0\11\10\1\0\3\10\1\0\51\10\2\0\1\10\20\0"+
    "\1\10\5\0\3\10\10\0\3\10\4\0\12\11\12\0\6\10\5\0"+
    "\22\10\3\0\30\10\1\0\11\10\1\0\1\10\2\0\7\10\37\0"+
    "\12\11\21\0\60\10\1\0\2\10\14\0\7\10\11\0\12\11\47\0"+
    "\2\10\1\0\1\10\1\0\5\10\1\0\30\10\1\0\1\10\1\0"+
    "\12\10\1\0\2\10\11\0\1\10\2\0\5\10\1\0\1\10\11\0"+
    "\12\11\2\0\4\10\40\0\1\10\37\0\12\11\26\0\10\10\1\0"+
    "\44\10\33\0\5\10\163\0\53\10\24\0\1\10\12\11\6\0\6\10"+
    "\4\0\4\10\3\0\1\10\3\0\2\10\7\0\3\10\4\0\15\10"+
    "\14\0\1\10\1\0\12\11\6\0\46\10\1\0\1\10\5\0\1\10"+
    "\2\0\53\10\1\0\u014d\10\1\0\4\10\2\0\7\10\1\0\1\10"+
    "\1\0\4\10\2\0\51\10\1\0\4\10\2\0\41\10\1\0\4\10"+
    "\2\0\7\10\1\0\1\10\1\0\4\10\2\0\17\10\1\0\71\10"+
    "\1\0\4\10\2\0\103\10\45\0\20\10\20\0\126\10\2\0\6\10"+
    "\3\0\u026c\10\2\0\21\10\1\0\32\10\5\0\113\10\6\0\10\10"+
    "\7\0\15\10\1\0\4\10\16\0\22\10\16\0\22\10\16\0\15\10"+
    "\1\0\3\10\17\0\64\10\43\0\1\10\4\0\1\10\3\0\12\11"+
    "\46\0\12\11\6\0\131\10\7\0\5\10\2\0\42\10\1\0\1\10"+
    "\5\0\106\10\12\0\37\10\47\0\12\11\36\10\2\0\5\10\13\0"+
    "\54\10\4\0\32\10\6\0\12\11\46\0\27\10\11\0\65\10\53\0"+
    "\12\11\6\0\12\11\15\0\1\10\135\0\57\10\21\0\7\10\4\0"+
    "\12\11\51\0\36\10\15\0\2\10\12\11\54\10\32\0\44\10\34\0"+
    "\12\11\3\0\3\10\12\11\44\10\2\0\11\10\7\0\53\10\2\0"+
    "\3\10\51\0\4\10\1\0\6\10\1\0\2\10\3\0\1\10\5\0"+
    "\300\10\100\0\u0116\10\2\0\6\10\2\0\46\10\2\0\6\10\2\0"+
    "\10\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0\37\10\2\0"+
    "\65\10\1\0\7\10\1\0\1\10\3\0\3\10\1\0\7\10\3\0"+
    "\4\10\2\0\6\10\4\0\15\10\5\0\3\10\1\0\7\10\164\0"+
    "\1\10\15\0\1\10\20\0\15\10\145\0\1\10\4\0\1\10\2\0"+
    "\12\10\1\0\1\10\3\0\5\10\6\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\4\10\1\0\13\10\2\0\4\10\5\0\5\10\4\0"+
    "\1\10\64\0\2\10\u0a7b\0\57\10\1\0\57\10\1\0\205\10\6\0"+
    "\4\10\3\0\2\10\14\0\46\10\1\0\1\10\5\0\1\10\2\0"+
    "\70\10\7\0\1\10\20\0\27\10\11\0\7\10\1\0\7\10\1\0"+
    "\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0"+
    "\7\10\120\0\1\10\u01d5\0\2\10\52\0\5\10\5\0\2\10\4\0"+
    "\126\10\6\0\3\10\1\0\132\10\1\0\4\10\5\0\53\10\1\0"+
    "\136\10\21\0\40\10\60\0\20\10\u0200\0\u19c0\10\100\0\u51fd\10\3\0"+
    "\u048d\10\103\0\56\10\2\0\u010d\10\3\0\20\10\12\11\2\10\24\0"+
    "\57\10\20\0\37\10\2\0\106\10\61\0\11\10\2\0\147\10\2\0"+
    "\65\10\2\0\11\10\52\0\15\10\1\0\3\10\1\0\4\10\1\0"+
    "\27\10\35\0\64\10\16\0\62\10\34\0\12\11\30\0\6\10\3\0"+
    "\1\10\1\0\2\10\1\0\12\11\34\10\12\0\27\10\31\0\35\10"+
    "\7\0\57\10\34\0\1\10\12\11\6\0\5\10\1\0\12\10\12\11"+
    "\5\10\1\0\51\10\27\0\3\10\1\0\10\10\4\0\12\11\6\0"+
    "\27\10\3\0\1\10\3\0\62\10\1\0\1\10\3\0\2\10\2\0"+
    "\5\10\2\0\1\10\1\0\1\10\30\0\3\10\2\0\13\10\7\0"+
    "\3\10\14\0\6\10\2\0\6\10\2\0\6\10\11\0\7\10\1\0"+
    "\7\10\1\0\53\10\1\0\16\10\6\0\163\10\15\0\12\11\6\0"+
    "\u2ba4\10\14\0\27\10\4\0\61\10\u2104\0\u016e\10\2\0\152\10\46\0"+
    "\7\10\14\0\5\10\5\0\1\10\1\0\12\10\1\0\15\10\1\0"+
    "\5\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0\154\10\41\0"+
    "\u016b\10\22\0\100\10\2\0\66\10\50\0\14\10\164\0\5\10\1\0"+
    "\207\10\23\0\12\11\7\0\32\10\6\0\32\10\13\0\131\10\3\0"+
    "\6\10\2\0\6\10\2\0\6\10\2\0\3\10\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\2\3\5\1\1\4\1\0\1\4"+
    "\2\0\1\4\1\0\2\4\1\5\2\6\2\4\1\5"+
    "\2\6\1\4\2\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\13\1\0\1\17\1\0\1\20"+
    "\1\21\1\22\7\20\2\0\1\23\1\0\1\24\4\0"+
    "\1\25\5\0\1\26\2\0\1\27\1\30\11\20\1\31"+
    "\4\20\1\0\1\32\1\0\1\33\1\0\2\34\1\0"+
    "\1\35\2\0\1\36\1\37\1\40\13\20\1\41\3\0"+
    "\1\42\1\0\1\43\5\20\1\44\1\45\3\20\1\46"+
    "\1\20\1\47\1\20\1\50\2\0\1\51\2\20\1\52"+
    "\4\20\1\53\3\20\2\0\1\54\2\20\1\55\1\56"+
    "\4\20\1\57\1\60\3\20\1\61\1\62\1\63\1\64"+
    "\10\20\1\65\1\66\1\67\4\20\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\0"+
    "\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0318\0\u0344\0\u0370\0\u039c"+
    "\0\u03c8\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\u0420\0\u04a4"+
    "\0\u04d0\0\u04fc\0\u0528\0\u04d0\0\u0554\0\u0580\0\u05ac\0\0"+
    "\0\u05d8\0\u0604\0\0\0\u0630\0\u065c\0\u0630\0\0\0\0"+
    "\0\u0688\0\u06b4\0\u06e0\0\u070c\0\0\0\0\0\u0738\0\u0764"+
    "\0\u0790\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0344\0\0"+
    "\0\u0898\0\0\0\u03f4\0\u08c4\0\u0420\0\u08f0\0\u091c\0\u04d0"+
    "\0\u0948\0\u0974\0\u09a0\0\u09cc\0\0\0\u0630\0\u09f8\0\u0a24"+
    "\0\0\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58"+
    "\0\u0b84\0\u0bb0\0\u070c\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c"+
    "\0\0\0\u0cb8\0\0\0\u0ce4\0\u091c\0\0\0\u0d10\0\0"+
    "\0\u0d3c\0\u0d68\0\0\0\0\0\u070c\0\u0d94\0\u0dc0\0\u0dec"+
    "\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c"+
    "\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\0\0\u1028\0\0\0\u1054"+
    "\0\u1080\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u070c\0\u115c\0\u1188"+
    "\0\u11b4\0\u070c\0\u11e0\0\u070c\0\u120c\0\0\0\u1238\0\u1264"+
    "\0\0\0\u1290\0\u12bc\0\u070c\0\u12e8\0\u1314\0\u1340\0\u136c"+
    "\0\u070c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448\0\u070c\0\u1474"+
    "\0\u14a0\0\u14cc\0\u070c\0\u14f8\0\u1524\0\u1550\0\u157c\0\u1238"+
    "\0\0\0\u15a8\0\u15d4\0\u1600\0\u070c\0\u070c\0\u162c\0\u070c"+
    "\0\u1658\0\u1684\0\u16b0\0\u16dc\0\u1708\0\u1734\0\u1760\0\u178c"+
    "\0\u070c\0\u070c\0\u070c\0\u17b8\0\u17e4\0\u1810\0\u183c\0\u070c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\54\0\1\13\1\14\1\15\1\16\1\17\1\20\4\13"+
    "\1\21\1\13\1\22\27\13\2\20\2\13\1\23\1\20"+
    "\1\13\1\20\3\24\1\25\11\24\1\26\36\24\15\27"+
    "\1\30\36\27\3\31\1\32\6\31\1\33\41\31\1\34"+
    "\1\35\1\36\1\37\1\34\1\40\46\34\1\41\1\42"+
    "\1\43\1\44\2\41\1\45\45\41\7\46\1\47\44\46"+
    "\1\50\2\51\41\50\1\52\1\53\6\50\1\54\2\55"+
    "\41\54\1\56\1\57\2\60\4\54\3\13\3\0\4\13"+
    "\1\0\1\13\1\61\27\13\2\0\2\13\2\0\1\13"+
    "\1\0\1\13\2\14\3\0\4\13\1\0\1\13\1\61"+
    "\27\13\2\0\2\13\2\0\1\13\1\0\1\13\1\14"+
    "\1\15\1\16\2\0\4\13\1\0\1\13\1\61\27\13"+
    "\2\0\2\13\2\0\1\13\3\0\2\16\54\0\1\62"+
    "\1\0\1\63\55\0\1\64\1\0\1\65\1\66\2\0"+
    "\1\67\1\70\2\0\1\71\2\64\1\72\1\73\1\64"+
    "\1\74\12\64\1\75\10\0\4\13\2\0\6\13\1\0"+
    "\1\76\26\13\2\0\4\13\22\0\1\20\33\0\15\25"+
    "\1\77\53\25\1\77\2\25\1\100\33\25\15\27\1\101"+
    "\53\27\1\101\2\27\1\102\33\27\12\32\1\103\53\32"+
    "\1\103\7\32\1\104\31\32\5\105\1\106\47\105\2\35"+
    "\2\105\1\106\47\105\2\35\1\37\1\105\1\106\53\105"+
    "\1\107\46\105\6\110\1\111\46\110\2\42\3\110\1\111"+
    "\46\110\2\42\1\44\2\110\1\111\53\110\1\112\45\110"+
    "\7\46\1\113\53\46\1\114\44\46\1\0\2\51\116\0"+
    "\1\115\6\0\45\116\2\0\1\117\5\116\2\55\42\116"+
    "\2\0\1\117\4\116\4\13\2\0\6\13\2\0\26\13"+
    "\2\0\4\13\11\0\1\120\52\0\1\121\55\0\2\64"+
    "\1\0\1\66\2\0\2\64\2\0\22\64\20\0\2\64"+
    "\1\0\1\66\2\0\1\64\1\122\2\0\12\64\1\123"+
    "\7\64\20\0\2\64\1\0\1\66\2\0\2\64\2\0"+
    "\12\64\1\124\7\64\20\0\2\64\1\0\1\66\2\0"+
    "\2\64\2\0\1\64\1\125\3\64\1\126\4\64\1\127"+
    "\5\64\1\130\1\64\20\0\2\64\1\0\1\66\2\0"+
    "\2\64\2\0\4\64\1\131\15\64\20\0\2\64\1\0"+
    "\1\66\2\0\2\64\2\0\1\64\1\132\17\64\1\133"+
    "\20\0\2\64\1\0\1\66\2\0\1\64\1\134\2\0"+
    "\1\135\7\64\1\136\11\64\20\0\2\64\1\0\1\66"+
    "\2\0\2\64\2\0\11\64\1\137\10\64\26\0\1\140"+
    "\2\0\1\141\20\0\1\142\11\0\15\27\1\101\2\27"+
    "\1\143\33\27\12\32\1\103\10\32\1\144\30\32\5\105"+
    "\1\145\46\105\5\0\1\146\46\0\6\110\1\147\52\110"+
    "\1\150\1\147\45\110\7\46\1\151\51\46\1\152\1\46"+
    "\1\151\44\46\47\153\1\0\4\153\7\0\1\154\54\0"+
    "\2\64\1\0\1\66\2\0\1\155\1\64\2\0\22\64"+
    "\20\0\2\64\1\0\1\66\2\0\2\64\2\0\15\64"+
    "\1\156\4\64\20\0\2\64\1\0\1\66\2\0\2\64"+
    "\2\0\6\64\1\157\13\64\20\0\2\64\1\0\1\66"+
    "\2\0\2\64\2\0\2\64\1\160\17\64\20\0\2\64"+
    "\1\0\1\66\2\0\2\64\2\0\6\64\1\161\13\64"+
    "\20\0\2\64\1\0\1\66\2\0\2\64\2\0\7\64"+
    "\1\162\12\64\20\0\2\64\1\0\1\66\2\0\2\64"+
    "\2\0\10\64\1\163\11\64\20\0\2\64\1\0\1\66"+
    "\2\0\2\64\2\0\1\164\21\64\20\0\2\64\1\0"+
    "\1\66\2\0\2\64\2\0\7\64\1\165\12\64\20\0"+
    "\2\64\1\0\1\66\2\0\2\64\2\0\11\64\1\166"+
    "\10\64\20\0\2\64\1\0\1\66\2\0\2\64\2\0"+
    "\7\64\1\167\12\64\20\0\2\64\1\0\1\66\2\0"+
    "\2\64\2\0\11\64\1\170\10\64\20\0\2\64\1\0"+
    "\1\66\2\0\2\64\2\0\15\64\1\171\4\64\27\0"+
    "\1\172\71\0\1\173\16\0\12\32\1\103\11\32\1\174"+
    "\27\32\5\110\1\175\1\147\45\110\5\46\1\176\1\46"+
    "\1\151\51\46\1\177\1\46\1\113\44\46\10\0\2\64"+
    "\1\0\1\66\2\0\2\64\2\0\1\200\21\64\20\0"+
    "\2\64\1\0\1\66\2\0\2\64\2\0\6\64\1\201"+
    "\13\64\20\0\2\64\1\0\1\66\2\0\2\64\2\0"+
    "\4\64\1\202\1\64\1\203\12\64\1\204\20\0\2\64"+
    "\1\0\1\66\2\0\2\64\2\0\1\205\21\64\20\0"+
    "\2\64\1\0\1\66\2\0\1\64\1\206\2\0\22\64"+
    "\20\0\2\64\1\0\1\66\2\0\2\64\2\0\1\207"+
    "\21\64\20\0\2\64\1\0\1\66\2\0\2\64\2\0"+
    "\5\64\1\210\14\64\20\0\2\64\1\0\1\66\2\0"+
    "\2\64\2\0\5\64\1\211\14\64\20\0\2\64\1\0"+
    "\1\66\2\0\2\64\2\0\16\64\1\212\3\64\20\0"+
    "\2\64\1\0\1\66\2\0\2\64\2\0\10\64\1\213"+
    "\11\64\20\0\2\64\1\0\1\66\2\0\1\214\1\64"+
    "\2\0\22\64\20\0\2\64\1\0\1\66\2\0\2\64"+
    "\2\0\1\215\21\64\26\0\1\216\64\0\1\217\24\0"+
    "\12\32\1\103\3\32\1\220\35\32\5\46\1\221\1\46"+
    "\1\113\44\46\10\0\2\64\1\0\1\66\2\0\2\64"+
    "\2\0\1\64\1\222\20\64\20\0\2\64\1\0\1\66"+
    "\2\0\2\64\2\0\1\223\21\64\20\0\2\64\1\0"+
    "\1\66\2\0\2\64\2\0\21\64\1\224\20\0\2\64"+
    "\1\0\1\66\2\0\2\64\2\0\1\225\21\64\20\0"+
    "\2\64\1\0\1\66\2\0\2\64\2\0\11\64\1\226"+
    "\10\64\20\0\2\64\1\0\1\66\2\0\2\64\2\0"+
    "\4\64\1\227\15\64\20\0\2\64\1\0\1\66\2\0"+
    "\2\64\2\0\1\64\1\230\20\64\20\0\2\64\1\0"+
    "\1\66\2\0\2\64\2\0\2\64\1\231\17\64\20\0"+
    "\2\64\1\0\1\66\2\0\2\64\2\0\17\64\1\232"+
    "\2\64\20\0\2\64\1\0\1\66\2\0\2\64\2\0"+
    "\4\64\1\233\15\64\20\0\2\64\1\0\1\66\2\0"+
    "\2\64\2\0\12\64\1\234\7\64\10\0\14\217\1\0"+
    "\1\235\36\217\12\32\1\103\4\32\1\236\34\32\10\0"+
    "\2\64\1\0\1\66\2\0\2\64\2\0\10\64\1\237"+
    "\11\64\20\0\2\64\1\0\1\66\2\0\2\64\2\0"+
    "\7\64\1\240\12\64\20\0\2\64\1\0\1\66\2\0"+
    "\2\64\2\0\7\64\1\241\12\64\20\0\2\64\1\0"+
    "\1\66\2\0\2\64\2\0\15\64\1\242\4\64\20\0"+
    "\2\64\1\0\1\66\2\0\2\64\2\0\21\64\1\243"+
    "\20\0\2\64\1\0\1\66\2\0\2\64\2\0\2\64"+
    "\1\244\17\64\20\0\2\64\1\0\1\66\2\0\2\64"+
    "\2\0\2\64\1\245\17\64\20\0\2\64\1\0\1\66"+
    "\2\0\2\64\2\0\11\64\1\246\10\64\20\0\2\64"+
    "\1\0\1\66\2\0\2\64\2\0\7\64\1\247\12\64"+
    "\10\0\14\217\1\0\1\235\2\217\1\250\33\217\12\32"+
    "\1\103\3\32\1\251\35\32\10\0\2\64\1\0\1\66"+
    "\2\0\2\64\2\0\10\64\1\252\11\64\20\0\2\64"+
    "\1\0\1\66\2\0\2\64\2\0\10\64\1\253\11\64"+
    "\20\0\2\64\1\0\1\66\2\0\2\64\2\0\1\254"+
    "\21\64\20\0\2\64\1\0\1\66\2\0\2\64\2\0"+
    "\6\64\1\255\13\64\20\0\2\64\1\0\1\66\2\0"+
    "\2\64\2\0\1\256\21\64\20\0\2\64\1\0\1\66"+
    "\2\0\2\64\2\0\1\64\1\257\20\64\20\0\2\64"+
    "\1\0\1\66\2\0\1\64\1\260\2\0\22\64\20\0"+
    "\2\64\1\0\1\66\2\0\2\64\2\0\4\64\1\261"+
    "\15\64\20\0\2\64\1\0\1\66\2\0\2\64\2\0"+
    "\4\64\1\262\15\64\20\0\2\64\1\0\1\66\2\0"+
    "\2\64\2\0\12\64\1\263\7\64\20\0\2\64\1\0"+
    "\1\66\2\0\2\64\2\0\13\64\1\264\6\64\20\0"+
    "\2\64\1\0\1\66\2\0\2\64\2\0\11\64\1\265"+
    "\10\64\20\0\2\64\1\0\1\66\2\0\2\64\2\0"+
    "\11\64\1\266\10\64\20\0\2\64\1\0\1\66\2\0"+
    "\2\64\2\0\7\64\1\267\12\64\20\0\2\64\1\0"+
    "\1\66\2\0\2\64\2\0\4\64\1\270\15\64\20\0"+
    "\2\64\1\0\1\66\2\0\2\64\2\0\1\64\1\271"+
    "\20\64\20\0\2\64\1\0\1\66\2\0\2\64\2\0"+
    "\1\64\1\272\20\64\20\0\2\64\1\0\1\66\2\0"+
    "\1\64\1\273\2\0\22\64\20\0\2\64\1\0\1\66"+
    "\2\0\2\64\2\0\6\64\1\274\13\64\20\0\2\64"+
    "\1\0\1\66\2\0\2\64\2\0\6\64\1\275\13\64"+
    "\20\0\2\64\1\0\1\66\2\0\2\64\2\0\4\64"+
    "\1\276\15\64\20\0\2\64\1\0\1\66\2\0\2\64"+
    "\2\0\1\64\1\277\20\64\20\0\2\64\1\0\1\66"+
    "\2\0\2\64\2\0\14\64\1\300\5\64\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6248];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\10\11\0\5\1\1\11\4\1\1\0\1\1\2\0"+
    "\1\1\1\0\13\1\2\0\1\11\2\1\1\11\3\1"+
    "\2\11\1\0\1\1\1\0\1\1\2\11\7\1\2\0"+
    "\1\11\1\0\1\11\4\0\1\1\5\0\1\11\2\0"+
    "\1\1\1\11\16\1\1\0\1\11\1\0\1\11\1\0"+
    "\1\1\1\11\1\0\1\11\2\0\2\11\15\1\3\0"+
    "\1\11\1\0\1\11\16\1\1\11\2\0\1\11\13\1"+
    "\2\0\12\1\1\11\27\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */
    private ByteStack stack = new ByteStack();
    private LexerInput input;
    private int parenBalanceInDirective = 0; //for directive arguments
    private int parameterExpressionLength = 0;
    private int pushBackCount = 0;
    //[\"][^\:\"]+[\:]{1}[^\:]
    private Pattern freezePhpPattern = Pattern.compile("[^\\:\\\"\\)]+[\\:]{1}[^\\:]", Pattern.CASE_INSENSITIVE);

    public BladeColoringLexer(LexerRestartInfo<? extends TokenId> info) {
        this.input = info.input();
        if(info.state() != null) {
            //reset state
            setState((LexerState) info.state(), parenBalanceInDirective);
        } else {
            //initial state
            stack.push(ST_HTML);
            zzState = ST_HTML;
            zzLexicalState = ST_HTML;
        }

    }

    public static final class LexerState  {
        final ByteStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;
        final int parenBalanceInDirective; 

        LexerState(ByteStack stack, int zzState, int zzLexicalState, int parenBalanceInDirective) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.parenBalanceInDirective = parenBalanceInDirective;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null || obj.getClass() != this.getClass()) {
                return false;
            }
            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                && (this.zzState == state.zzState)
                );
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            hash = 31 * hash + this.parenBalanceInDirective;
            if (stack != null) {
                hash = 31 * hash + this.stack.hashCode();
            }
            return hash;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.copyOf(), zzState, zzLexicalState, parenBalanceInDirective);
    }

    public void setState(LexerState state, int parenBalanceInDirective) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
        this.parenBalanceInDirective = state.parenBalanceInDirective;
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    //other functions

    protected void pushBack(int i) {
        yypushback(i);
    }

    protected void popState() {
        yybegin(stack.pop());
    }

    protected void pushState(final int state) {
        stack.push(getZZLexicalState());
        yybegin(state);
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BladeColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public BladeColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1796) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public BladeTokenId findNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();
            
            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 53: 
          { pushState(ST_LOOKING_FOR_PARAMETER_EXPRESSION);
       return BladeTokenId.T_BLADE_HAS_SECTION;
          }
        case 57: break;
        case 3: 
          { String yytext = yytext();
	//whitespace
    return BladeTokenId.NEWLINE;
          }
        case 58: break;
        case 38: 
          { return BladeTokenId.T_BLADE_SHOW;
          }
        case 59: break;
        case 20: 
          { if (yylength() == 2){
	    popState(); 
		return BladeTokenId.T_CLOSE_PHP;
	}
	yypushback(2);
    return BladeTokenId.T_PHP_ECHO;
          }
        case 60: break;
        case 10: 
          { parenBalanceInDirective = 0;
   popState();
   return BladeTokenId.T_BLADE_RPAREN;
          }
        case 61: break;
        case 25: 
          { pushState(ST_LOOKING_FOR_PARAMETER_EXPRESSION);
        return BladeTokenId.T_BLADE_IF;
          }
        case 62: break;
        case 52: 
          { pushState(ST_LOOKING_FOR_PARAMETER_EXPRESSION);
        return BladeTokenId.T_BLADE_FOREACH;
          }
        case 63: break;
        case 7: 
          { if (yylength() > 0){
        yypushback(1);
    }
    popState();
          }
        case 64: break;
        case 28: 
          { String yytext = yytext();
    if (yylength() == 2){
    	popState();
    	return BladeTokenId.T_BLADE_CLOSE_ECHO;
    }
    yypushback(2);

    Matcher matcher = freezePhpPattern.matcher(yytext);
    if(matcher.find()) {
        return BladeTokenId.T_HTML;
    }
    return BladeTokenId.T_BLADE_PHP_ECHO;
          }
        case 65: break;
        case 32: 
          { pushState(ST_BLADE_PHP);
    return BladeTokenId.T_BLADE_PHP_OPEN;
          }
        case 66: break;
        case 12: 
          { String text = yytext();
    parameterExpressionLength+= yylength();
          }
        case 67: break;
        case 43: 
          { pushState(ST_LOOKING_FOR_PARAMETER_EXPRESSION);
        return BladeTokenId.T_BLADE_YIELD;
          }
        case 68: break;
        case 39: 
          { return BladeTokenId.T_BLADE_STOP;
          }
        case 69: break;
        case 19: 
          { if (yylength() == 2){
       popState();
       return BladeTokenId.T_CLOSE_PHP;
    }
    yypushback(2);
    return BladeTokenId.T_PHP;
          }
        case 70: break;
        case 9: 
          { pushState(ST_BLADE_PARAMETER_EXPRESSION);
   parenBalanceInDirective = 1;
   parameterExpressionLength = 0;
   return BladeTokenId.T_BLADE_LPAREN;
          }
        case 71: break;
        case 46: 
          { pushState(ST_LOOKING_FOR_PARAMETER_EXPRESSION);
        return BladeTokenId.T_BLADE_ELSEIF;
          }
        case 72: break;
        case 42: 
          { return BladeTokenId.T_BLADE_ENDIF;
          }
        case 73: break;
        case 27: 
          { if (yylength() == 2){
       popState();
       return BladeTokenId.T_CLOSE_PHP;
    }
    yypushback(2);
    return BladeTokenId.T_PHP_ECHO;
          }
        case 74: break;
        case 35: 
          { popState();
    return BladeTokenId.T_BLADE_CLOSE_COMMENT;
          }
        case 75: break;
        case 17: 
          { //escape directive rule
    return BladeTokenId.T_HTML;
          }
        case 76: break;
        case 18: 
          { //email format
    return BladeTokenId.T_HTML;
          }
        case 77: break;
        case 2: 
          { String yytext = yytext();
	//whitespace
    return BladeTokenId.WHITESPACE;
          }
        case 78: break;
        case 29: 
          { String yytext = yytext();
    popState();
    return BladeTokenId.T_BLADE_CLOSE_ECHO_ESCAPED;
          }
        case 79: break;
        case 47: 
          { return BladeTokenId.T_XML;
          }
        case 80: break;
        case 37: 
          { pushState(ST_LOOKING_FOR_PARAMETER_EXPRESSION);
        return BladeTokenId.T_BLADE_EACH;
          }
        case 81: break;
        case 33: 
          { pushState(ST_LOOKING_FOR_PARAMETER_EXPRESSION);
        return BladeTokenId.T_BLADE_FOR;
          }
        case 82: break;
        case 44: 
          { return BladeTokenId.T_BLADE_PARENT;
          }
        case 83: break;
        case 15: 
          { String yytext = yytext();
    pushState(ST_BLADE_ECHO);
    return BladeTokenId.T_BLADE_OPEN_ECHO;
          }
        case 84: break;
        case 48: 
          { String ttext = yytext();
    popState();
    if (yylength() == "@endphp".length()){
        return BladeTokenId.T_BLADE_ENDPHP;
    }
    
    yypushback("@endphp".length());
    return BladeTokenId.T_BLADE_PHP;
          }
        case 85: break;
        case 8: 
          { return BladeTokenId.WHITESPACE;
          }
        case 86: break;
        case 41: 
          { yypushback(4);
    return BladeTokenId.T_BLADE_COMMENT;
          }
        case 87: break;
        case 34: 
          { String yytext = yytext();
    if (yylength() == 3){
    	popState();
    	return BladeTokenId.T_BLADE_CLOSE_ECHO;
    }
    yypushback(3);
    Matcher matcher = freezePhpPattern.matcher(yytext);
    if(matcher.find()) {
        return BladeTokenId.T_HTML;
    }
    return BladeTokenId.T_BLADE_PHP_ECHO;
          }
        case 88: break;
        case 14: 
          { parenBalanceInDirective--;
   if (parenBalanceInDirective == 0) {
      yypushback(1);
      popState();
      return BladeTokenId.T_BLADE_PHP_EXPRESSION;
   }
          }
        case 89: break;
        case 31: 
          { pushState(ST_COMMENT);
    return BladeTokenId.T_BLADE_OPEN_COMMENT;
          }
        case 90: break;
        case 51: 
          { pushState(ST_LOOKING_FOR_PARAMETER_EXPRESSION);
       return BladeTokenId.T_BLADE_SECTION;
          }
        case 91: break;
        case 49: 
          { pushState(ST_LOOKING_FOR_PARAMETER_EXPRESSION);
        return BladeTokenId.T_BLADE_EXTENDS;
          }
        case 92: break;
        case 24: 
          { String yytext = yytext();
    pushState(ST_BLADE_ECHO_ESCAPED);
    return BladeTokenId.T_BLADE_OPEN_ECHO_ESCAPED;
          }
        case 93: break;
        case 55: 
          { return BladeTokenId.T_BLADE_ENDFOREACH;
          }
        case 94: break;
        case 50: 
          { pushState(ST_LOOKING_FOR_PARAMETER_EXPRESSION);
        return BladeTokenId.T_BLADE_INCLUDE;
          }
        case 95: break;
        case 11: 
          { parameterExpressionLength =0;
          }
        case 96: break;
        case 22: 
          { parenBalanceInDirective = 0;
   popState();
   return BladeTokenId.T_HTML;
          }
        case 97: break;
        case 54: 
          { return BladeTokenId.T_BLADE_ENDSECTION;
          }
        case 98: break;
        case 26: 
          { pushState(ST_PHP_ECHO);
    return BladeTokenId.T_PHP_OPEN_ECHO;
          }
        case 99: break;
        case 30: 
          { //php lexer embedding freeze issue when you type / delete a double colon at the start of the script
    if (parameterExpressionLength == 0) {
        popState();
        popState();
        parameterExpressionLength = 0;
        return  BladeTokenId.T_HTML;
    }
          }
        case 100: break;
        case 40: 
          { pushState(ST_PHP);
    return BladeTokenId.T_OPEN_PHP_SCRIPT;
          }
        case 101: break;
        case 16: 
          { String ttext = yytext();
    pushState(ST_LOOKING_FOR_PARAMETER_EXPRESSION);
    return BladeTokenId.T_BLADE_DIRECTIVE;
          }
        case 102: break;
        case 23: 
          { //incomplete comment
    return BladeTokenId.T_HTML;
          }
        case 103: break;
        case 56: 
          { pushState(ST_LOOKING_FOR_PARAMETER_EXPRESSION);
       return BladeTokenId.T_BLADE_SECTION_MISSING;
          }
        case 104: break;
        case 21: 
          { String yytext = yytext();
    popState();
    return BladeTokenId.T_BLADE_CLOSE_ECHO;
          }
        case 105: break;
        case 5: 
          { //no break;
    parameterExpressionLength += yylength();
          }
        case 106: break;
        case 45: 
          { return BladeTokenId.T_BLADE_ENDFOR;
          }
        case 107: break;
        case 36: 
          { return BladeTokenId.T_BLADE_ELSE;
          }
        case 108: break;
        case 6: 
          { String yytext = yytext();
    popState();
    return BladeTokenId.T_HTML;
          }
        case 109: break;
        case 13: 
          { parenBalanceInDirective++;
          }
        case 110: break;
        case 4: 
          { //skipp
          }
        case 111: break;
        case 1: 
          { return  BladeTokenId.T_HTML;
          }
        case 112: break;
        default: 
          if (zzInput == YYEOF) 
            //zzAtEOF = true;
            switch (zzLexicalState) {
            case ST_PHP: {
              if (input.readLength() > 0) {
    input.backup(1);  // backup eof
    return BladeTokenId.T_PHP;
  }
  else {
      return null;
  }
            }
            case 193: break;
            case ST_COMMENT: {
              popState();
  if (yylength() > 0){
    return BladeTokenId.T_HTML;
  }
            }
            case 194: break;
            default:
              {         if(input.readLength() > 0) {
            String yytext = yytext();
            // backup eof
            input.backup(1);
            //and return the text as error token
             return BladeTokenId.T_HTML;
        } else {
            return null;
        }
 }
            }
          
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
